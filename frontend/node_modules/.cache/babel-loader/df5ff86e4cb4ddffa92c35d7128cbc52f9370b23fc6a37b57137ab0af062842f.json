{"ast":null,"code":"import { API_BASE_URL } from '../config/api';\nimport defaultProfileImage from '../assets/default-profile.jpg';\n\n/**\n * Get the full URL for an image path\n * @param {string} path - The relative path to the image\n * @returns {string} The full URL to the image\n */\nexport const getImageUrl = path => {\n  if (!path) return defaultProfileImage;\n  if (path.startsWith('blob:')) return path;\n  if (path.startsWith('http')) return path;\n  return `${API_BASE_URL}${path.startsWith('/') ? path : `/${path}`}`;\n};\n\n/**\n * Get the full URL for a profile image\n * @param {string|Object} pathOrUser - The relative path to the profile image or user object\n * @returns {string} The full URL to the profile image\n */\nexport const getProfileImageUrl = pathOrUser => {\n  // If it's a user object, extract the profile image path\n  if (pathOrUser && typeof pathOrUser === 'object') {\n    // Try both profileImage and profile_image properties\n    const imagePath = pathOrUser.profileImage || pathOrUser.profile_image;\n    return getImageUrl(imagePath);\n  }\n\n  // If it's a string path\n  return getImageUrl(pathOrUser);\n};\n\n/**\n * Handle image loading errors by setting a default avatar\n * @param {Event} e - The error event\n */\nexport const handleImageError = e => {\n  e.target.src = defaultProfileImage;\n};","map":{"version":3,"names":["API_BASE_URL","defaultProfileImage","getImageUrl","path","startsWith","getProfileImageUrl","pathOrUser","imagePath","profileImage","profile_image","handleImageError","e","target","src"],"sources":["C:/Users/sabin.arsene/Desktop/Tudu-app/TUDU/frontend/src/utils/imageUtils.js"],"sourcesContent":["import { API_BASE_URL } from '../config/api';\nimport defaultProfileImage from '../assets/default-profile.jpg';\n\n/**\n * Get the full URL for an image path\n * @param {string} path - The relative path to the image\n * @returns {string} The full URL to the image\n */\nexport const getImageUrl = (path) => {\n  if (!path) return defaultProfileImage;\n  if (path.startsWith('blob:')) return path;\n  if (path.startsWith('http')) return path;\n  return `${API_BASE_URL}${path.startsWith('/') ? path : `/${path}`}`;\n};\n\n/**\n * Get the full URL for a profile image\n * @param {string|Object} pathOrUser - The relative path to the profile image or user object\n * @returns {string} The full URL to the profile image\n */\nexport const getProfileImageUrl = (pathOrUser) => {\n  // If it's a user object, extract the profile image path\n  if (pathOrUser && typeof pathOrUser === 'object') {\n    // Try both profileImage and profile_image properties\n    const imagePath = pathOrUser.profileImage || pathOrUser.profile_image;\n    return getImageUrl(imagePath);\n  }\n  \n  // If it's a string path\n  return getImageUrl(pathOrUser);\n};\n\n/**\n * Handle image loading errors by setting a default avatar\n * @param {Event} e - The error event\n */\nexport const handleImageError = (e) => {\n  e.target.src = defaultProfileImage;\n}; "],"mappings":"AAAA,SAASA,YAAY,QAAQ,eAAe;AAC5C,OAAOC,mBAAmB,MAAM,+BAA+B;;AAE/D;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIC,IAAI,IAAK;EACnC,IAAI,CAACA,IAAI,EAAE,OAAOF,mBAAmB;EACrC,IAAIE,IAAI,CAACC,UAAU,CAAC,OAAO,CAAC,EAAE,OAAOD,IAAI;EACzC,IAAIA,IAAI,CAACC,UAAU,CAAC,MAAM,CAAC,EAAE,OAAOD,IAAI;EACxC,OAAO,GAAGH,YAAY,GAAGG,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,GAAGD,IAAI,GAAG,IAAIA,IAAI,EAAE,EAAE;AACrE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,kBAAkB,GAAIC,UAAU,IAAK;EAChD;EACA,IAAIA,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAChD;IACA,MAAMC,SAAS,GAAGD,UAAU,CAACE,YAAY,IAAIF,UAAU,CAACG,aAAa;IACrE,OAAOP,WAAW,CAACK,SAAS,CAAC;EAC/B;;EAEA;EACA,OAAOL,WAAW,CAACI,UAAU,CAAC;AAChC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMI,gBAAgB,GAAIC,CAAC,IAAK;EACrCA,CAAC,CAACC,MAAM,CAACC,GAAG,GAAGZ,mBAAmB;AACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
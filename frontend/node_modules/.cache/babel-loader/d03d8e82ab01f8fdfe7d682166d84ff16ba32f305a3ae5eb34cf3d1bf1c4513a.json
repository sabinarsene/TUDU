{"ast":null,"code":"import { API_BASE_URL } from '../config/api';\n\n// Use consistent API URL format\nconst API_ENDPOINT = `${API_BASE_URL}/api`;\n\n/**\n * Add a service to favorites\n * @param {string} serviceId - ID of the service to favorite\n * @returns {Promise<Object>} Response from the server\n */\nexport const addServiceToFavorites = async serviceId => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/services/${serviceId}/favorite`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error adding service to favorites:', error);\n    throw error;\n  }\n};\n\n/**\n * Remove a service from favorites\n * @param {string} serviceId - ID of the service to unfavorite\n * @returns {Promise<Object>} Response from the server\n */\nexport const removeServiceFromFavorites = async serviceId => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/services/${serviceId}/favorite`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error removing service from favorites:', error);\n    throw error;\n  }\n};\n\n/**\n * Add a request to favorites\n * @param {string} requestId - ID of the request to favorite\n * @returns {Promise<Object>} Response from the server\n */\nexport const addRequestToFavorites = async requestId => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/requests/${requestId}/favorite`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error adding request to favorites:', error);\n    throw error;\n  }\n};\n\n/**\n * Remove a request from favorites\n * @param {string} requestId - ID of the request to unfavorite\n * @returns {Promise<Object>} Response from the server\n */\nexport const removeRequestFromFavorites = async requestId => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/requests/${requestId}/favorite`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error removing request from favorites:', error);\n    throw error;\n  }\n};\n\n/**\n * Check if a service is favorited by the current user\n * @param {string} serviceId - ID of the service to check\n * @returns {Promise<boolean>} Whether the service is favorited\n */\nexport const isServiceFavorited = async serviceId => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/services/${serviceId}/favorite`, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to check service favorite status');\n    }\n    const data = await response.json();\n    return data.isFavorited;\n  } catch (error) {\n    console.error('Error checking service favorite status:', error);\n    throw error;\n  }\n};\n\n/**\n * Check if a request is favorited by the current user\n * @param {string} requestId - ID of the request to check\n * @returns {Promise<boolean>} Whether the request is favorited\n */\nexport const isRequestFavorited = async requestId => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/requests/${requestId}/favorite`, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to check request favorite status');\n    }\n    const data = await response.json();\n    return data.isFavorited;\n  } catch (error) {\n    console.error('Error checking request favorite status:', error);\n    throw error;\n  }\n};\n\n/**\n * Get all favorite services for the current user\n * @returns {Promise<Array>} List of favorited services\n */\nexport const getFavoriteServices = async () => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/profile/services/favorites`, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching favorite services:', error);\n    throw error;\n  }\n};\n\n/**\n * Get user's favorite requests\n * @returns {Promise<Array>} List of favorite requests\n */\nexport const getFavoriteRequests = async () => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/requests/favorites`, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching favorite requests:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","API_ENDPOINT","addServiceToFavorites","serviceId","response","fetch","method","headers","localStorage","getItem","json","error","console","removeServiceFromFavorites","addRequestToFavorites","requestId","removeRequestFromFavorites","isServiceFavorited","ok","Error","message","data","isFavorited","isRequestFavorited","getFavoriteServices","getFavoriteRequests"],"sources":["C:/Users/sabin.arsene/Desktop/Tudu-app/TUDU/frontend/src/services/favoriteApi.js"],"sourcesContent":["import { API_BASE_URL } from '../config/api';\n\n// Use consistent API URL format\nconst API_ENDPOINT = `${API_BASE_URL}/api`;\n\n/**\n * Add a service to favorites\n * @param {string} serviceId - ID of the service to favorite\n * @returns {Promise<Object>} Response from the server\n */\nexport const addServiceToFavorites = async (serviceId) => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/services/${serviceId}/favorite`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error adding service to favorites:', error);\n    throw error;\n  }\n};\n\n/**\n * Remove a service from favorites\n * @param {string} serviceId - ID of the service to unfavorite\n * @returns {Promise<Object>} Response from the server\n */\nexport const removeServiceFromFavorites = async (serviceId) => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/services/${serviceId}/favorite`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error removing service from favorites:', error);\n    throw error;\n  }\n};\n\n/**\n * Add a request to favorites\n * @param {string} requestId - ID of the request to favorite\n * @returns {Promise<Object>} Response from the server\n */\nexport const addRequestToFavorites = async (requestId) => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/requests/${requestId}/favorite`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error adding request to favorites:', error);\n    throw error;\n  }\n};\n\n/**\n * Remove a request from favorites\n * @param {string} requestId - ID of the request to unfavorite\n * @returns {Promise<Object>} Response from the server\n */\nexport const removeRequestFromFavorites = async (requestId) => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/requests/${requestId}/favorite`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error removing request from favorites:', error);\n    throw error;\n  }\n};\n\n/**\n * Check if a service is favorited by the current user\n * @param {string} serviceId - ID of the service to check\n * @returns {Promise<boolean>} Whether the service is favorited\n */\nexport const isServiceFavorited = async (serviceId) => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/services/${serviceId}/favorite`, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to check service favorite status');\n    }\n\n    const data = await response.json();\n    return data.isFavorited;\n  } catch (error) {\n    console.error('Error checking service favorite status:', error);\n    throw error;\n  }\n};\n\n/**\n * Check if a request is favorited by the current user\n * @param {string} requestId - ID of the request to check\n * @returns {Promise<boolean>} Whether the request is favorited\n */\nexport const isRequestFavorited = async (requestId) => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/requests/${requestId}/favorite`, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to check request favorite status');\n    }\n\n    const data = await response.json();\n    return data.isFavorited;\n  } catch (error) {\n    console.error('Error checking request favorite status:', error);\n    throw error;\n  }\n};\n\n/**\n * Get all favorite services for the current user\n * @returns {Promise<Array>} List of favorited services\n */\nexport const getFavoriteServices = async () => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/profile/services/favorites`, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching favorite services:', error);\n    throw error;\n  }\n};\n\n/**\n * Get user's favorite requests\n * @returns {Promise<Array>} List of favorite requests\n */\nexport const getFavoriteRequests = async () => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/requests/favorites`, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching favorite requests:', error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { mergeWith, runIfFn, toMediaQueryString, isObject } from '@chakra-ui/utils';\nfunction normalize(value, toArray) {\n  if (Array.isArray(value)) return value;\n  if (isObject(value)) return toArray(value);\n  if (value != null) return [value];\n}\nfunction getNextIndex(values, i) {\n  for (let j = i + 1; j < values.length; j++) {\n    if (values[j] != null) return j;\n  }\n  return -1;\n}\nfunction createResolver(theme) {\n  const breakpointUtil = theme.__breakpoints;\n  return function resolver(config, prop, value, props) {\n    if (!breakpointUtil) return;\n    const result = {};\n    const normalized = normalize(value, breakpointUtil.toArrayValue);\n    if (!normalized) return result;\n    const len = normalized.length;\n    const isSingle = len === 1;\n    const isMultipart = !!config.parts;\n    for (let i = 0; i < len; i++) {\n      const key = breakpointUtil.details[i];\n      const nextKey = breakpointUtil.details[getNextIndex(normalized, i)];\n      const query = toMediaQueryString(key.minW, nextKey?._minW);\n      const styles = runIfFn(config[prop]?.[normalized[i]], props);\n      if (!styles) continue;\n      if (isMultipart) {\n        config.parts?.forEach(part => {\n          mergeWith(result, {\n            [part]: isSingle ? styles[part] : {\n              [query]: styles[part]\n            }\n          });\n        });\n        continue;\n      }\n      if (!isMultipart) {\n        if (isSingle) mergeWith(result, styles);else result[query] = styles;\n        continue;\n      }\n      result[query] = styles;\n    }\n    return result;\n  };\n}\nfunction resolveStyleConfig(config) {\n  return props => {\n    const {\n      variant,\n      size,\n      theme\n    } = props;\n    const recipe = createResolver(theme);\n    return mergeWith({}, runIfFn(config.baseStyle ?? {}, props), recipe(config, \"sizes\", size, props), recipe(config, \"variants\", variant, props));\n  };\n}\nexport { resolveStyleConfig };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
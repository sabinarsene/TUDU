{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef, useMemo, cloneElement, Fragment, Children, isValidElement } from 'react';\nimport { cx } from '../../utils/cx.js';\nimport { chakra } from '../../styled-system/factory.js';\nimport { getSeparatorStyles } from './get-separator-style.js';\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(child => isValidElement(child));\n}\nconst Stack = forwardRef(function Stack2(props, ref) {\n  const {\n    direction = \"column\",\n    align,\n    justify,\n    gap = \"0.5rem\",\n    wrap,\n    children,\n    separator,\n    className,\n    ...rest\n  } = props;\n  const separatorStyle = useMemo(() => getSeparatorStyles({\n    gap,\n    direction\n  }), [gap, direction]);\n  const clones = useMemo(() => {\n    if (!separator) return children;\n    return getValidChildren(children).map((child, index, arr) => {\n      const key = typeof child.key !== \"undefined\" ? child.key : index;\n      const sep = cloneElement(separator, {\n        css: [separatorStyle, separator.props.css]\n      });\n      return /* @__PURE__ */jsxs(Fragment, {\n        children: [child, index === arr.length - 1 ? null : sep]\n      }, key);\n    });\n  }, [children, separator, separatorStyle]);\n  return /* @__PURE__ */jsx(chakra.div, {\n    ref,\n    display: \"flex\",\n    alignItems: align,\n    justifyContent: justify,\n    flexDirection: direction,\n    flexWrap: wrap,\n    gap: separator ? void 0 : gap,\n    className: cx(\"chakra-stack\", className),\n    ...rest,\n    children: clones\n  });\n});\nexport { Stack };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
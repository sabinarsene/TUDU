{"ast":null,"code":"'use client';\n\nimport { mergeRefs } from '@chakra-ui/hooks';\nimport { isObject } from '@chakra-ui/utils';\nimport { useState, useRef, useCallback, useId } from 'react';\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\nfunction useRadioGroup(props = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isDisabled,\n    isFocusable,\n    isNative,\n    ...htmlProps\n  } = props;\n  const [valueState, setValue] = useState(defaultValue || \"\");\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const ref = useRef(null);\n  const focus = useCallback(() => {\n    const rootNode = ref.current;\n    if (!rootNode) return;\n    let query = `input:not(:disabled):checked`;\n    const firstEnabledAndCheckedInput = rootNode.querySelector(query);\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus();\n      return;\n    }\n    query = `input:not(:disabled)`;\n    const firstEnabledInput = rootNode.querySelector(query);\n    firstEnabledInput?.focus();\n  }, []);\n  const uuid = useId();\n  const fallbackName = `radio-${uuid}`;\n  const name = nameProp || fallbackName;\n  const onChange = useCallback(eventOrValue => {\n    const nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n    onChangeProp?.(String(nextValue));\n  }, [onChangeProp, isControlled]);\n  const getRootProps = useCallback((props2 = {}, forwardedRef = null) => ({\n    ...props2,\n    ref: mergeRefs(forwardedRef, ref),\n    role: \"radiogroup\"\n  }), []);\n  const getRadioProps = useCallback((props2 = {}, ref2 = null) => {\n    const checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return {\n      ...props2,\n      ref: ref2,\n      name,\n      [checkedKey]: value != null ? props2.value === value : void 0,\n      onChange(event) {\n        onChange(event);\n      },\n      \"data-radiogroup\": true\n    };\n  }, [isNative, name, onChange, value]);\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    isDisabled,\n    isFocusable,\n    htmlProps\n  };\n}\nexport { useRadioGroup };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
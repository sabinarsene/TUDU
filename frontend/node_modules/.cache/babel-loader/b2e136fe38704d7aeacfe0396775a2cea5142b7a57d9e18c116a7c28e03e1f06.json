{"ast":null,"code":"import { assignRef } from './assignRef';\nimport { useCallbackRef } from './useRef';\n/**\r\n * Create a _lense_ on Ref, making it possible to transform ref value\r\n * @param {ReactRef} ref\r\n * @param {Function} transformer. ðŸ‘‰ Ref would be __NOT updated__ on `transformer` update.\r\n * @returns {RefObject}\r\n *\r\n * @see https://github.com/theKashey/use-callback-ref#usetransformref-to-replace-reactuseimperativehandle\r\n * @example\r\n *\r\n * const ResizableWithRef = forwardRef((props, ref) =>\r\n *  <Resizable {...props} ref={useTransformRef(ref, i => i ? i.resizable : null)}/>\r\n * );\r\n */\nexport function useTransformRef(ref, transformer) {\n  return useCallbackRef(null, function (value) {\n    return assignRef(ref, transformer(value));\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { getAllAffectedNodes } from './utils/all-affected';\nimport { isGuard, isNotAGuard } from './utils/is';\nimport { getTopCommonParent } from './utils/parenting';\nimport { orderByTabIndex } from './utils/tabOrder';\nimport { getFocusables } from './utils/tabUtils';\n/**\r\n * traverses all related nodes (including groups) returning a list of all nodes(outer and internal) with meta information\r\n * This is low-level API!\r\n * @returns list of focusable elements inside a given top(!) node.\r\n * @see {@link getFocusableNodes} providing a simpler API\r\n */\nexport var expandFocusableNodes = function (topNode) {\n  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);\n  var commonParent = getTopCommonParent(topNode, topNode, entries);\n  var outerNodes = orderByTabIndex(getFocusables([commonParent], true), true, true);\n  var innerElements = getFocusables(entries, false);\n  return outerNodes.map(function (_a) {\n    var node = _a.node,\n      index = _a.index;\n    return {\n      node: node,\n      index: index,\n      lockItem: innerElements.indexOf(node) >= 0,\n      guard: isGuard(node)\n    };\n  });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { cx } from '../../utils/cx.js';\nimport { createRecipeContext } from '../../styled-system/create-recipe-context.js';\nimport { chakra } from '../../styled-system/factory.js';\nimport { Grid } from '../grid/grid.js';\nconst {\n  withPropsProvider,\n  useRecipeResult\n} = createRecipeContext({\n  key: \"colorSwatch\"\n});\nconst ColorSwatch = forwardRef(function ColorSwatch2(props, ref) {\n  const {\n    value,\n    ...restProps\n  } = props;\n  const {\n    styles,\n    className,\n    props: localProps\n  } = useRecipeResult(restProps);\n  return /* @__PURE__ */jsx(chakra.span, {\n    ...localProps,\n    ref,\n    \"data-value\": value,\n    css: [styles, {\n      \"--color\": value\n    }, props.css],\n    className: cx(className, props.className)\n  });\n});\nconst ColorSwatchPropsProvider = withPropsProvider();\nconst ColorSwatchMix = props => {\n  const {\n    items,\n    ...restProps\n  } = props;\n  if (items.length > 4) {\n    throw new Error(\"ColorSwatchMix doesn't support more than 4 colors\");\n  }\n  const isThreeColors = items.length === 3;\n  return /* @__PURE__ */jsx(ColorSwatch, {\n    overflow: \"hidden\",\n    ...restProps,\n    value: \"transparent\",\n    children: /* @__PURE__ */jsx(Grid, {\n      templateColumns: \"var(--swatch-size) var(--swatch-size)\",\n      children: items.map((item, index) => {\n        const isLast = index === items.length - 1;\n        return /* @__PURE__ */jsx(ColorSwatch, {\n          size: \"inherit\",\n          rounded: \"none\",\n          value: item,\n          boxShadow: \"none\",\n          gridColumn: isThreeColors && isLast ? \"span 2 / span 2\" : void 0,\n          width: isThreeColors && isLast ? \"unset\" : void 0\n        }, item);\n      })\n    })\n  });\n};\nexport { ColorSwatch, ColorSwatchMix, ColorSwatchPropsProvider };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { defineStyle } from '@chakra-ui/styled-system';\nimport { Circle } from './circle.mjs';\nimport { getProgressProps, spin } from './progress.utils.mjs';\nimport { Shape } from './shape.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\nconst CircularProgress = forwardRef((props, ref) => {\n  const {\n    size = \"48px\",\n    max = 100,\n    min = 0,\n    valueText,\n    getValueText,\n    value,\n    capIsRound,\n    children,\n    thickness = \"10px\",\n    color = \"#0078d4\",\n    trackColor = \"#edebe9\",\n    isIndeterminate,\n    ...rest\n  } = props;\n  const progress = getProgressProps({\n    min,\n    max,\n    value,\n    valueText,\n    getValueText,\n    isIndeterminate\n  });\n  const determinant = isIndeterminate ? void 0 : (progress.percent ?? 0) * 2.64;\n  const strokeDasharray = determinant == null ? void 0 : `${determinant} ${264 - determinant}`;\n  const indicatorProps = isIndeterminate ? {\n    css: {\n      animation: `${spin} 1.5s linear infinite`\n    }\n  } : {\n    strokeDashoffset: 66,\n    strokeDasharray,\n    transitionProperty: \"stroke-dasharray, stroke\",\n    transitionDuration: \"0.6s\",\n    transitionTimingFunction: \"ease\"\n  };\n  const rootStyles = defineStyle({\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size\n  });\n  return /* @__PURE__ */jsxs(chakra.div, {\n    ref,\n    className: \"chakra-progress\",\n    ...progress.bind,\n    ...rest,\n    __css: rootStyles,\n    children: [/* @__PURE__ */jsxs(Shape, {\n      size,\n      isIndeterminate,\n      children: [/* @__PURE__ */jsx(Circle, {\n        stroke: trackColor,\n        strokeWidth: thickness,\n        className: \"chakra-progress__track\"\n      }), /* @__PURE__ */jsx(Circle, {\n        stroke: color,\n        strokeWidth: thickness,\n        className: \"chakra-progress__indicator\",\n        strokeLinecap: capIsRound ? \"round\" : void 0,\n        opacity: progress.value === 0 && !isIndeterminate ? 0 : void 0,\n        ...indicatorProps\n      })]\n    }), children]\n  });\n});\nCircularProgress.displayName = \"CircularProgress\";\nexport { CircularProgress };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
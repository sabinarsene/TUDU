{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useMemo, forwardRef } from 'react';\nimport { createContext } from '../create-context.js';\nimport { mergeProps } from '../merge-props.js';\nimport { cx } from '../utils/cx.js';\nimport { EMPTY_STYLES } from './empty.js';\nimport { chakra } from './factory.js';\nimport { useRecipe } from './use-recipe.js';\nconst upperFirst = str => str.charAt(0).toUpperCase() + str.slice(1);\nfunction createRecipeContext(options) {\n  const {\n    key: recipeKey,\n    recipe: recipeConfig\n  } = options;\n  const contextName = upperFirst(recipeKey || recipeConfig.className || \"Component\");\n  const [PropsProvider, usePropsContext] = createContext({\n    strict: false,\n    name: `${contextName}PropsContext`,\n    providerName: `${contextName}PropsContext`\n  });\n  function useRecipeResult(props) {\n    const {\n      unstyled,\n      ...restProps\n    } = props;\n    const recipe = useRecipe({\n      key: recipeKey,\n      recipe: restProps.recipe || recipeConfig\n    });\n    const [variantProps, otherProps] = useMemo(() => recipe.splitVariantProps(restProps), [recipe, restProps]);\n    const styles = unstyled ? EMPTY_STYLES : recipe(variantProps);\n    return {\n      styles,\n      className: recipe.className,\n      props: otherProps\n    };\n  }\n  const withContext = (Component, options2) => {\n    const SuperComponent = chakra(Component, {}, options2);\n    const StyledComponent = forwardRef((inProps, ref) => {\n      const propsContext = usePropsContext();\n      const props = useMemo(() => mergeProps(propsContext, inProps), [inProps, propsContext]);\n      const {\n        styles,\n        className,\n        props: localProps\n      } = useRecipeResult(props);\n      return /* @__PURE__ */jsx(SuperComponent, {\n        ...localProps,\n        ref,\n        css: [styles, props.css],\n        className: cx(className, props.className)\n      });\n    });\n    StyledComponent.displayName = Component.displayName || Component.name;\n    return StyledComponent;\n  };\n  function withPropsProvider() {\n    return PropsProvider;\n  }\n  return {\n    withContext,\n    PropsProvider,\n    withPropsProvider,\n    usePropsContext,\n    useRecipeResult\n  };\n}\nexport { createRecipeContext };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
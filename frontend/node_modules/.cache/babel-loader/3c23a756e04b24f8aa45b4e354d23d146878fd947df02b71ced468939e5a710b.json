{"ast":null,"code":"import { getDocument, getWindow, getComputedStyle } from '@zag-js/dom-query';\n\n// src/autoresize-input.ts\nfunction getVisualStyles(node) {\n  if (!node) return;\n  const style = getComputedStyle(node);\n  return \"box-sizing:\" + style.boxSizing + \";border-left:\" + style.borderLeftWidth + \" solid red;border-right:\" + style.borderRightWidth + \" solid red;font-family:\" + style.fontFamily + \";font-feature-settings:\" + style.fontFeatureSettings + \";font-kerning:\" + style.fontKerning + \";font-size:\" + style.fontSize + \";font-stretch:\" + style.fontStretch + \";font-style:\" + style.fontStyle + \";font-variant:\" + style.fontVariant + \";font-variant-caps:\" + style.fontVariantCaps + \";font-variant-ligatures:\" + style.fontVariantLigatures + \";font-variant-numeric:\" + style.fontVariantNumeric + \";font-weight:\" + style.fontWeight + \";letter-spacing:\" + style.letterSpacing + \";margin-left:\" + style.marginLeft + \";margin-right:\" + style.marginRight + \";padding-left:\" + style.paddingLeft + \";padding-right:\" + style.paddingRight + \";text-indent:\" + style.textIndent + \";text-transform:\" + style.textTransform;\n}\n\n// src/autoresize-input.ts\nfunction createGhostElement(doc) {\n  var el = doc.createElement(\"div\");\n  el.id = \"ghost\";\n  el.style.cssText = \"display:inline-block;height:0;overflow:hidden;position:absolute;top:0;visibility:hidden;white-space:nowrap;\";\n  doc.body.appendChild(el);\n  return el;\n}\nfunction autoResizeInput(input) {\n  if (!input) return;\n  const doc = getDocument(input);\n  const win = getWindow(input);\n  const ghost = createGhostElement(doc);\n  const cssText = getVisualStyles(input);\n  if (cssText) ghost.style.cssText += cssText;\n  function resize() {\n    win.requestAnimationFrame(() => {\n      ghost.innerHTML = input.value;\n      const rect = win.getComputedStyle(ghost);\n      input?.style.setProperty(\"width\", rect.width);\n    });\n  }\n  resize();\n  input?.addEventListener(\"input\", resize);\n  input?.addEventListener(\"change\", resize);\n  return () => {\n    doc.body.removeChild(ghost);\n    input?.removeEventListener(\"input\", resize);\n    input?.removeEventListener(\"change\", resize);\n  };\n}\nvar autoresizeTextarea = el => {\n  if (!el) return;\n  const style = getComputedStyle(el);\n  const win = getWindow(el);\n  const doc = getDocument(el);\n  const resize = () => {\n    el.style.height = \"auto\";\n    const borderTopWidth = parseInt(style.borderTopWidth, 10);\n    const borderBottomWidth = parseInt(style.borderBottomWidth, 10);\n    el.style.height = `${el.scrollHeight + borderTopWidth + borderBottomWidth}px`;\n  };\n  el.addEventListener(\"input\", resize);\n  const elementPrototype = Object.getPrototypeOf(el);\n  const descriptor = Object.getOwnPropertyDescriptor(elementPrototype, \"value\");\n  Object.defineProperty(el, \"value\", {\n    ...descriptor,\n    set() {\n      descriptor?.set?.apply(this, arguments);\n      resize();\n    }\n  });\n  const resizeObserver = new win.ResizeObserver(() => resize());\n  resizeObserver.observe(el);\n  const attrObserver = new win.MutationObserver(() => resize());\n  attrObserver.observe(el, {\n    attributes: true,\n    attributeFilter: [\"rows\", \"placeholder\"]\n  });\n  doc.fonts?.addEventListener(\"loadingdone\", resize);\n  return () => {\n    el.removeEventListener(\"input\", resize);\n    doc.fonts?.removeEventListener(\"loadingdone\", resize);\n    resizeObserver.disconnect();\n    attrObserver.disconnect();\n  };\n};\nexport { autoResizeInput, autoresizeTextarea };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nimport { memo } from '../utils/memo.js';\nconst createMediaQueryRegex = dimension => ({\n  minMax: new RegExp(`(!?\\\\(\\\\s*min(-device-)?-${dimension})(.|\n)+\\\\(\\\\s*max(-device)?-${dimension}`, \"i\"),\n  min: new RegExp(`\\\\(\\\\s*min(-device)?-${dimension}`, \"i\"),\n  maxMin: new RegExp(`(!?\\\\(\\\\s*max(-device)?-${dimension})(.|\n)+\\\\(\\\\s*min(-device)?-${dimension}`, \"i\"),\n  max: new RegExp(`\\\\(\\\\s*max(-device)?-${dimension}`, \"i\")\n});\nconst widthRegex = createMediaQueryRegex(\"width\");\nconst heightRegex = createMediaQueryRegex(\"height\");\nconst createQueryTester = regexSet => ({\n  isMin: _testQuery(regexSet.minMax, regexSet.maxMin, regexSet.min),\n  isMax: _testQuery(regexSet.maxMin, regexSet.minMax, regexSet.max)\n});\nconst {\n  isMin: isMinWidth,\n  isMax: isMaxWidth\n} = createQueryTester(widthRegex);\nconst {\n  isMin: isMinHeight,\n  isMax: isMaxHeight\n} = createQueryTester(heightRegex);\nconst isPrint = /print/i;\nconst isPrintOnly = /^print$/i;\nconst isLength = /(-?\\d*\\.?\\d+)(ch|em|ex|px|rem)/;\nconst lengthExec = /(\\d)/;\nconst maxValue = Number.MAX_VALUE;\nconst multipliers = {\n  ch: 8.8984375,\n  em: 16,\n  rem: 16,\n  ex: 8.296875,\n  px: 1\n};\nfunction getQueryLength(query) {\n  const length = isLength.exec(query) || (isMinWidth(query) || isMinHeight(query) ? lengthExec.exec(query) : null);\n  if (!length) return maxValue;\n  if (length[0] === \"0\") return 0;\n  const number = parseFloat(length[1]);\n  const unit = length[2];\n  return number * (multipliers[unit] || 1);\n}\nfunction _testQuery(doubleTestTrue, doubleTestFalse, singleTest) {\n  return query => doubleTestTrue.test(query) || !doubleTestFalse.test(query) && singleTest.test(query);\n}\nfunction _testIsPrint(a, b) {\n  const isPrintA = isPrint.test(a),\n    isPrintOnlyA = isPrintOnly.test(a);\n  const isPrintB = isPrint.test(b),\n    isPrintOnlyB = isPrintOnly.test(b);\n  if (isPrintA && isPrintB) {\n    if (!isPrintOnlyA && isPrintOnlyB) return 1;\n    if (isPrintOnlyA && !isPrintOnlyB) return -1;\n    return a.localeCompare(b);\n  }\n  return isPrintA ? 1 : isPrintB ? -1 : null;\n}\nconst sortAtParams = memo((a, b) => {\n  const testIsPrint = _testIsPrint(a, b);\n  if (testIsPrint !== null) return testIsPrint;\n  const minA = isMinWidth(a) || isMinHeight(a),\n    maxA = isMaxWidth(a) || isMaxHeight(a);\n  const minB = isMinWidth(b) || isMinHeight(b),\n    maxB = isMaxWidth(b) || isMaxHeight(b);\n  if (minA && maxB) return -1;\n  if (maxA && minB) return 1;\n  const lengthA = getQueryLength(a),\n    lengthB = getQueryLength(b);\n  if (lengthA === maxValue && lengthB === maxValue) return a.localeCompare(b);\n  if (lengthA === maxValue) return 1;\n  if (lengthB === maxValue) return -1;\n  if (lengthA !== lengthB) {\n    return lengthA > lengthB ? maxA ? -1 : 1 : maxA ? 1 : -1;\n  }\n  return a.localeCompare(b);\n});\nexport { sortAtParams };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
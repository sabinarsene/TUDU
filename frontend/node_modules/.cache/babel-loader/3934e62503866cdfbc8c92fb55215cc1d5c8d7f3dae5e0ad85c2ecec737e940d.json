{"ast":null,"code":"import { isHTMLElement, isHiddenElement, isDisabledElement, isContentEditableElement } from './is-element.mjs';\nconst hasDisplayNone = element => window.getComputedStyle(element).display === \"none\";\nconst hasTabIndex = element => element.hasAttribute(\"tabindex\");\nconst hasNegativeTabIndex = element => hasTabIndex(element) && element.tabIndex === -1;\nfunction hasFocusWithin(element) {\n  if (!document.activeElement) return false;\n  return element.contains(document.activeElement);\n}\nfunction isFocusable(element) {\n  if (!isHTMLElement(element) || isHiddenElement(element) || isDisabledElement(element)) {\n    return false;\n  }\n  const {\n    localName\n  } = element;\n  const focusableTags = [\"input\", \"select\", \"textarea\", \"button\"];\n  if (focusableTags.indexOf(localName) >= 0) return true;\n  const others = {\n    a: () => element.hasAttribute(\"href\"),\n    audio: () => element.hasAttribute(\"controls\"),\n    video: () => element.hasAttribute(\"controls\")\n  };\n  if (localName in others) {\n    return others[localName]();\n  }\n  if (isContentEditableElement(element)) return true;\n  return hasTabIndex(element);\n}\nfunction isTabbable(element) {\n  if (!element) return false;\n  return isHTMLElement(element) && isFocusable(element) && !hasNegativeTabIndex(element);\n}\nexport { hasDisplayNone, hasFocusWithin, hasNegativeTabIndex, hasTabIndex, isFocusable, isTabbable };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
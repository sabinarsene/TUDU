{"ast":null,"code":"\"use strict\";\n\nconst colorMix = (value, token) => {\n  if (!value || typeof value !== \"string\") {\n    return {\n      invalid: true,\n      value\n    };\n  }\n  const [rawColor, rawOpacity] = value.split(\"/\");\n  if (!rawColor || !rawOpacity || rawColor === \"currentBg\") {\n    return {\n      invalid: true,\n      value: rawColor\n    };\n  }\n  const colorToken = token(`colors.${rawColor}`);\n  const opacityToken = token.raw(`opacity.${rawOpacity}`)?.value;\n  if (!opacityToken && isNaN(Number(rawOpacity))) {\n    return {\n      invalid: true,\n      value: rawColor\n    };\n  }\n  const percent = opacityToken ? Number(opacityToken) * 100 + \"%\" : `${rawOpacity}%`;\n  const color = colorToken ?? rawColor;\n  return {\n    invalid: false,\n    color,\n    value: `color-mix(in srgb, ${color} ${percent}, transparent)`\n  };\n};\nconst createColorMixTransform = prop => (value, args) => {\n  const mix = args.utils.colorMix(value);\n  if (mix.invalid) return {\n    [prop]: value\n  };\n  const cssVar = \"--mix-\" + prop;\n  return {\n    [cssVar]: mix.value,\n    [prop]: `var(${cssVar}, ${mix.color})`\n  };\n};\nexport { colorMix, createColorMixTransform };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
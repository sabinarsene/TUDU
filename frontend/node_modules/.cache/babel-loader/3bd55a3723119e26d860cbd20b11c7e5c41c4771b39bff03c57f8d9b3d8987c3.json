{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL } from '../config/api';\nconst API_URL = `${API_BASE_URL}/api/messages`;\n\n// Configure axios instance with default headers\nconst messageApi = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to add auth token\nmessageApi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n/**\r\n * Get all conversations for the current user\r\n * @returns {Promise<Array>} List of conversations\r\n */\nexport const getConversations = async () => {\n  try {\n    const response = await messageApi.get('/conversations');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching conversations:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get messages between current user and another user\r\n * @param {string} userId - ID of the other user\r\n * @returns {Promise<Array>} List of messages\r\n */\nexport const getMessages = async userId => {\n  try {\n    const response = await messageApi.get(`/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching messages:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Send a new message\r\n * @param {string} receiverId - ID of the message receiver\r\n * @param {string} content - Message content\r\n * @param {string} replyTo - Optional ID of the message being replied to\r\n * @returns {Promise<Object>} Created message\r\n */\nexport const sendMessage = async (receiverId, content, replyTo = null) => {\n  try {\n    const response = await messageApi.post('/', {\n      receiverId,\n      content,\n      replyTo\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Edit a message\r\n * @param {string} messageId - ID of the message to edit\r\n * @param {string} content - New message content\r\n * @returns {Promise<Object>} Updated message\r\n */\nexport const editMessage = async (messageId, content) => {\n  try {\n    const response = await messageApi.put(`/${messageId}`, {\n      content\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error editing message:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Delete a message\r\n * @param {string} messageId - ID of the message to delete\r\n * @returns {Promise<Object>} Response data\r\n */\nexport const deleteMessage = async messageId => {\n  try {\n    const response = await messageApi.delete(`/${messageId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting message:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Mark a message as read\r\n * @param {string} messageId - ID of the message to mark as read\r\n * @returns {Promise<Object>} Updated message\r\n */\nexport const markMessageRead = async messageId => {\n  try {\n    const response = await messageApi.post(`/${messageId}/read`);\n    return response.data;\n  } catch (error) {\n    console.error('Error marking message as read:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","API_URL","messageApi","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","getConversations","response","get","data","console","getMessages","userId","sendMessage","receiverId","content","replyTo","post","editMessage","messageId","put","deleteMessage","delete","markMessageRead"],"sources":["C:/Users/sabin.arsene/Desktop/Tudu-app/TUDU/frontend/src/services/messageApi.js"],"sourcesContent":["import axios from 'axios';\r\nimport { API_BASE_URL } from '../config/api';\r\n\r\nconst API_URL = `${API_BASE_URL}/api/messages`;\r\n\r\n// Configure axios instance with default headers\r\nconst messageApi = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Add request interceptor to add auth token\r\nmessageApi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * Get all conversations for the current user\r\n * @returns {Promise<Array>} List of conversations\r\n */\r\nexport const getConversations = async () => {\r\n  try {\r\n    const response = await messageApi.get('/conversations');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching conversations:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get messages between current user and another user\r\n * @param {string} userId - ID of the other user\r\n * @returns {Promise<Array>} List of messages\r\n */\r\nexport const getMessages = async (userId) => {\r\n  try {\r\n    const response = await messageApi.get(`/${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching messages:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Send a new message\r\n * @param {string} receiverId - ID of the message receiver\r\n * @param {string} content - Message content\r\n * @param {string} replyTo - Optional ID of the message being replied to\r\n * @returns {Promise<Object>} Created message\r\n */\r\nexport const sendMessage = async (receiverId, content, replyTo = null) => {\r\n  try {\r\n    const response = await messageApi.post('/', {\r\n      receiverId,\r\n      content,\r\n      replyTo\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error sending message:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Edit a message\r\n * @param {string} messageId - ID of the message to edit\r\n * @param {string} content - New message content\r\n * @returns {Promise<Object>} Updated message\r\n */\r\nexport const editMessage = async (messageId, content) => {\r\n  try {\r\n    const response = await messageApi.put(`/${messageId}`, { content });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error editing message:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Delete a message\r\n * @param {string} messageId - ID of the message to delete\r\n * @returns {Promise<Object>} Response data\r\n */\r\nexport const deleteMessage = async (messageId) => {\r\n  try {\r\n    const response = await messageApi.delete(`/${messageId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error deleting message:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Mark a message as read\r\n * @param {string} messageId - ID of the message to mark as read\r\n * @returns {Promise<Object>} Updated message\r\n */\r\nexport const markMessageRead = async (messageId) => {\r\n  try {\r\n    const response = await messageApi.post(`/${messageId}/read`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error marking message as read:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx } from 'react/jsx-runtime';\nimport { Editable, useEditableContext } from '@ark-ui/react/editable';\nimport { ark } from '@ark-ui/react/factory';\nimport { forwardRef } from 'react';\nimport { mergeProps } from '../../merge-props.js';\nimport { createSlotRecipeContext } from '../../styled-system/create-slot-recipe-context.js';\nconst {\n  withProvider,\n  withContext,\n  useStyles: useEditableStyles,\n  PropsProvider\n} = createSlotRecipeContext({\n  key: \"editable\"\n});\nconst EditableRootProvider = withProvider(Editable.RootProvider, \"root\", {\n  forwardAsChild: true\n});\nconst EditableRoot = withProvider(Editable.Root, \"root\", {\n  forwardAsChild: true\n});\nconst EditablePropsProvider = PropsProvider;\nconst EditablePreview = withContext(Editable.Preview, \"preview\", {\n  forwardAsChild: true\n});\nconst EditableInput = withContext(Editable.Input, \"input\", {\n  forwardAsChild: true\n});\nconst ArkEditableTextarea = forwardRef(function EditableTextarea2(props, ref) {\n  const editable = useEditableContext();\n  const mergedProps = mergeProps(editable.getInputProps(), props);\n  return /* @__PURE__ */jsx(ark.textarea, {\n    ref,\n    ...mergedProps\n  });\n});\nconst EditableTextarea = withContext(ArkEditableTextarea, \"input\", {\n  forwardAsChild: true\n});\nconst EditableControl = withContext(Editable.Control, \"control\", {\n  forwardAsChild: true\n});\nconst EditableArea = withContext(Editable.Area, \"area\", {\n  forwardAsChild: true\n});\nconst EditableEditTrigger = withContext(Editable.EditTrigger, \"editTrigger\", {\n  forwardAsChild: true\n});\nconst EditableSubmitTrigger = withContext(Editable.SubmitTrigger, \"submitTrigger\", {\n  forwardAsChild: true\n});\nconst EditableCancelTrigger = withContext(Editable.CancelTrigger, \"cancelTrigger\", {\n  forwardAsChild: true\n});\nconst EditableContext = Editable.Context;\nexport { EditableArea, EditableCancelTrigger, EditableContext, EditableControl, EditableEditTrigger, EditableInput, EditablePreview, EditablePropsProvider, EditableRoot, EditableRootProvider, EditableSubmitTrigger, EditableTextarea, useEditableStyles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { useMachine, normalizeProps } from '@zag-js/react';\nimport * as select from '@zag-js/select';\nimport { useId, useEffect } from 'react';\nimport { useEnvironmentContext } from '../../providers/environment/use-environment-context.js';\nimport { useLocaleContext } from '../../providers/locale/use-locale-context.js';\nimport { useEvent } from '../../utils/use-event.js';\nimport { useFieldContext } from '../field/use-field-context.js';\nconst useSelect = props => {\n  const {\n    collection,\n    ...selectProps\n  } = props;\n  const locale = useLocaleContext();\n  const environment = useEnvironmentContext();\n  const field = useFieldContext();\n  const initialContext = {\n    id: useId(),\n    ids: {\n      label: field?.ids.label,\n      hiddenSelect: field?.ids.control\n    },\n    disabled: field?.disabled,\n    readOnly: field?.readOnly,\n    invalid: field?.invalid,\n    required: field?.required,\n    dir: locale.dir,\n    getRootNode: environment.getRootNode,\n    collection,\n    open: props.defaultOpen,\n    value: props.defaultValue,\n    \"open.controlled\": props.open !== void 0,\n    ...selectProps\n  };\n  const context = (() => {\n    const {\n      collection: _,\n      ...restProps\n    } = initialContext;\n    return {\n      ...restProps,\n      value: props.value,\n      onValueChange: useEvent(props.onValueChange, {\n        sync: true\n      }),\n      onHighlightChange: useEvent(props.onHighlightChange),\n      onOpenChange: useEvent(props.onOpenChange)\n    };\n  })();\n  const [state, send, service] = useMachine(select.machine(initialContext), {\n    context\n  });\n  useEffect(() => {\n    service.setContext({\n      collection\n    });\n  }, [collection]);\n  return select.connect(state, send, normalizeProps);\n};\nexport { useSelect };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
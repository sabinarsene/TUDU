{"ast":null,"code":"\"use strict\";\n\nimport { createColorMixTransform } from './styled-system/color-mix.js';\nimport { defineConditions, defineConfig } from './styled-system/config.js';\nimport { cssVar } from './styled-system/css-var.js';\nconst isCssVar = v => /^var\\(--.+\\)$/.test(v);\nconst wrap = (str, v) => v != null ? `${str}(${v})` : v;\nconst deg = v => {\n  if (isCssVar(v) || v == null) return v;\n  const unitless = typeof v === \"string\" && !v.endsWith(\"deg\");\n  return typeof v === \"number\" || unitless ? `${v}deg` : v;\n};\nconst createFocusRing = selector => {\n  return {\n    values: [\"outside\", \"inside\", \"mixed\", \"none\"],\n    transform(value, {\n      token\n    }) {\n      const focusRingColor = token(\"colors.colorPalette.focusRing\");\n      const styles = {\n        inside: {\n          \"--focus-ring-color\": focusRingColor,\n          [selector]: {\n            outlineOffset: \"0px\",\n            outlineWidth: \"var(--focus-ring-width, 1px)\",\n            outlineColor: \"var(--focus-ring-color)\",\n            outlineStyle: \"var(--focus-ring-style, solid)\",\n            borderColor: \"var(--focus-ring-color)\"\n          }\n        },\n        outside: {\n          \"--focus-ring-color\": focusRingColor,\n          [selector]: {\n            outlineWidth: \"var(--focus-ring-width, 2px)\",\n            outlineOffset: \"var(--focus-ring-offset, 2px)\",\n            outlineStyle: \"var(--focus-ring-style, solid)\",\n            outlineColor: \"var(--focus-ring-color)\"\n          }\n        },\n        mixed: {\n          \"--focus-ring-color\": focusRingColor,\n          [selector]: {\n            outlineWidth: \"var(--focus-ring-width, 3px)\",\n            outlineStyle: \"var(--focus-ring-style, solid)\",\n            outlineColor: \"color-mix(in srgb, var(--focus-ring-color), transparent 60%)\",\n            borderColor: \"var(--focus-ring-color)\"\n          }\n        },\n        none: {\n          \"--focus-ring-color\": focusRingColor,\n          [selector]: {\n            outline: \"none\"\n          }\n        }\n      };\n      return styles[value] ?? {};\n    }\n  };\n};\nconst divideColor = createColorMixTransform(\"borderColor\");\nconst createTransition = value => {\n  return {\n    transition: value,\n    transitionTimingFunction: \"cubic-bezier(0.4, 0, 0.2, 1)\",\n    transitionDuration: \"150ms\"\n  };\n};\nconst defaultConditions = defineConditions({\n  hover: [\"@media (hover: hover)\", \"&:is(:hover, [data-hover]):not(:disabled, [data-disabled])\"],\n  active: \"&:is(:active, [data-active]):not(:disabled, [data-disabled], [data-state=open])\",\n  focus: \"&:is(:focus, [data-focus])\",\n  focusWithin: \"&:is(:focus-within, [data-focus-within])\",\n  focusVisible: \"&:is(:focus-visible, [data-focus-visible])\",\n  disabled: \"&:is(:disabled, [disabled], [data-disabled], [aria-disabled=true])\",\n  visited: \"&:visited\",\n  target: \"&:target\",\n  readOnly: \"&:is([data-readonly], [aria-readonly=true], [readonly])\",\n  readWrite: \"&:read-write\",\n  empty: \"&:is(:empty, [data-empty])\",\n  checked: \"&:is(:checked, [data-checked], [aria-checked=true], [data-state=checked])\",\n  enabled: \"&:enabled\",\n  expanded: \"&:is([aria-expanded=true], [data-expanded], [data-state=expanded])\",\n  highlighted: \"&[data-highlighted]\",\n  complete: \"&[data-complete]\",\n  incomplete: \"&[data-incomplete]\",\n  dragging: \"&[data-dragging]\",\n  before: \"&::before\",\n  after: \"&::after\",\n  firstLetter: \"&::first-letter\",\n  firstLine: \"&::first-line\",\n  marker: \"&::marker\",\n  selection: \"&::selection\",\n  file: \"&::file-selector-button\",\n  backdrop: \"&::backdrop\",\n  first: \"&:first-of-type\",\n  last: \"&:last-of-type\",\n  notFirst: \"&:not(:first-of-type)\",\n  notLast: \"&:not(:last-of-type)\",\n  only: \"&:only-child\",\n  even: \"&:nth-of-type(even)\",\n  odd: \"&:nth-of-type(odd)\",\n  peerFocus: \".peer:is(:focus, [data-focus]) ~ &\",\n  peerHover: \".peer:is(:hover, [data-hover]):not(:disabled, [data-disabled]) ~ &\",\n  peerActive: \".peer:is(:active, [data-active]):not(:disabled, [data-disabled]) ~ &\",\n  peerFocusWithin: \".peer:focus-within ~ &\",\n  peerFocusVisible: \".peer:is(:focus-visible, [data-focus-visible]) ~ &\",\n  peerDisabled: \".peer:is(:disabled, [disabled], [data-disabled]) ~ &\",\n  peerChecked: \".peer:is(:checked, [data-checked], [aria-checked=true], [data-state=checked]) ~ &\",\n  peerInvalid: \".peer:is(:invalid, [data-invalid], [aria-invalid=true]) ~ &\",\n  peerExpanded: \".peer:is([aria-expanded=true], [data-expanded], [data-state=expanded]) ~ &\",\n  peerPlaceholderShown: \".peer:placeholder-shown ~ &\",\n  groupFocus: \".group:is(:focus, [data-focus]) &\",\n  groupHover: \".group:is(:hover, [data-hover]):not(:disabled, [data-disabled]) &\",\n  groupActive: \".group:is(:active, [data-active]):not(:disabled, [data-disabled]) &\",\n  groupFocusWithin: \".group:focus-within &\",\n  groupFocusVisible: \".group:is(:focus-visible, [data-focus-visible]) &\",\n  groupDisabled: \".group:is(:disabled, [disabled], [data-disabled]) &\",\n  groupChecked: \".group:is(:checked, [data-checked], [aria-checked=true], [data-state=checked]) &\",\n  groupExpanded: \".group:is([aria-expanded=true], [data-expanded], [data-state=expanded]) &\",\n  groupInvalid: \".group:invalid &\",\n  indeterminate: \"&:is(:indeterminate, [data-indeterminate], [aria-checked=mixed], [data-state=indeterminate])\",\n  required: \"&:is([data-required], [aria-required=true])\",\n  valid: \"&:is([data-valid], [data-state=valid])\",\n  invalid: \"&:is([data-invalid], [aria-invalid=true], [data-state=invalid])\",\n  autofill: \"&:autofill\",\n  inRange: \"&:is(:in-range, [data-in-range])\",\n  outOfRange: \"&:is(:out-of-range, [data-outside-range])\",\n  placeholder: \"&::placeholder, &[data-placeholder]\",\n  placeholderShown: \"&:is(:placeholder-shown, [data-placeholder-shown])\",\n  pressed: \"&:is([aria-pressed=true], [data-pressed])\",\n  selected: \"&:is([aria-selected=true], [data-selected])\",\n  grabbed: \"&:is([aria-grabbed=true], [data-grabbed])\",\n  underValue: \"&[data-state=under-value]\",\n  overValue: \"&[data-state=over-value]\",\n  atValue: \"&[data-state=at-value]\",\n  default: \"&:default\",\n  optional: \"&:optional\",\n  open: \"&:is([open], [data-open], [data-state=open])\",\n  closed: \"&:is([closed], [data-closed], [data-state=closed])\",\n  fullscreen: \"&is(:fullscreen, [data-fullscreen])\",\n  loading: \"&:is([data-loading], [aria-busy=true])\",\n  hidden: \"&:is([hidden], [data-hidden])\",\n  current: \"&[data-current]\",\n  currentPage: \"&[aria-current=page]\",\n  currentStep: \"&[aria-current=step]\",\n  today: \"&[data-today]\",\n  unavailable: \"&[data-unavailable]\",\n  rangeStart: \"&[data-range-start]\",\n  rangeEnd: \"&[data-range-end]\",\n  now: \"&[data-now]\",\n  topmost: \"&[data-topmost]\",\n  motionReduce: \"@media (prefers-reduced-motion: reduce)\",\n  motionSafe: \"@media (prefers-reduced-motion: no-preference)\",\n  print: \"@media print\",\n  landscape: \"@media (orientation: landscape)\",\n  portrait: \"@media (orientation: portrait)\",\n  dark: \".dark &, .dark .chakra-theme:not(.light) &\",\n  light: \":root &, .light &\",\n  osDark: \"@media (prefers-color-scheme: dark)\",\n  osLight: \"@media (prefers-color-scheme: light)\",\n  highContrast: \"@media (forced-colors: active)\",\n  lessContrast: \"@media (prefers-contrast: less)\",\n  moreContrast: \"@media (prefers-contrast: more)\",\n  ltr: \"[dir=ltr] &\",\n  rtl: \"[dir=rtl] &\",\n  scrollbar: \"&::-webkit-scrollbar\",\n  scrollbarThumb: \"&::-webkit-scrollbar-thumb\",\n  scrollbarTrack: \"&::-webkit-scrollbar-track\",\n  horizontal: \"&[data-orientation=horizontal]\",\n  vertical: \"&[data-orientation=vertical]\",\n  icon: \"& :where(svg)\",\n  starting: \"@starting-style\"\n});\nconst currentBgVar = cssVar(\"bg-currentcolor\");\nconst isCurrentBgVar = value => value === currentBgVar.ref || value === \"currentBg\";\nconst colorValues = theme => ({\n  ...theme(\"colors\"),\n  currentBg: currentBgVar\n});\nconst defaultBaseConfig = defineConfig({\n  conditions: defaultConditions,\n  utilities: {\n    // background\n    background: {\n      values: colorValues,\n      shorthand: [\"bg\"],\n      transform(value, args) {\n        if (isCurrentBgVar(args.raw)) return {\n          background: currentBgVar.ref\n        };\n        const styleObj = createColorMixTransform(\"background\")(value, args);\n        return {\n          ...styleObj,\n          [currentBgVar.var]: styleObj?.background\n        };\n      }\n    },\n    backgroundColor: {\n      values: colorValues,\n      shorthand: [\"bgColor\"],\n      transform(value, args) {\n        if (isCurrentBgVar(args.raw)) return {\n          backgroundColor: currentBgVar.ref\n        };\n        const styleObj = createColorMixTransform(\"backgroundColor\")(value, args);\n        return {\n          ...styleObj,\n          [currentBgVar.var]: styleObj?.backgroundColor\n        };\n      }\n    },\n    backgroundSize: {\n      shorthand: [\"bgSize\"]\n    },\n    backgroundPosition: {\n      shorthand: [\"bgPos\"]\n    },\n    backgroundRepeat: {\n      shorthand: [\"bgRepeat\"]\n    },\n    backgroundAttachment: {\n      shorthand: [\"bgAttachment\"]\n    },\n    backgroundClip: {\n      shorthand: [\"bgClip\"],\n      values: [\"text\"],\n      transform(value) {\n        return value === \"text\" ? {\n          color: \"transparent\",\n          backgroundClip: \"text\"\n        } : {\n          backgroundClip: value\n        };\n      }\n    },\n    backgroundGradient: {\n      shorthand: [\"bgGradient\"],\n      values(theme) {\n        return {\n          ...theme(\"gradients\"),\n          \"to-t\": \"linear-gradient(to top, var(--gradient))\",\n          \"to-tr\": \"linear-gradient(to top right, var(--gradient))\",\n          \"to-r\": \"linear-gradient(to right, var(--gradient))\",\n          \"to-br\": \"linear-gradient(to bottom right, var(--gradient))\",\n          \"to-b\": \"linear-gradient(to bottom, var(--gradient))\",\n          \"to-bl\": \"linear-gradient(to bottom left, var(--gradient))\",\n          \"to-l\": \"linear-gradient(to left, var(--gradient))\",\n          \"to-tl\": \"linear-gradient(to top left, var(--gradient))\"\n        };\n      },\n      transform(value) {\n        return {\n          \"--gradient-stops\": \"var(--gradient-from), var(--gradient-to)\",\n          \"--gradient\": \"var(--gradient-via-stops, var(--gradient-stops))\",\n          backgroundImage: value\n        };\n      }\n    },\n    gradientFrom: {\n      values: colorValues,\n      transform: createColorMixTransform(\"--gradient-from\")\n    },\n    gradientTo: {\n      values: colorValues,\n      transform: createColorMixTransform(\"--gradient-to\")\n    },\n    gradientVia: {\n      values: colorValues,\n      transform(value, args) {\n        const styles = createColorMixTransform(\"--gradient-via\")(value, args);\n        return {\n          ...styles,\n          \"--gradient-via-stops\": \"var(--gradient-from), var(--gradient-via), var(--gradient-to)\"\n        };\n      }\n    },\n    backgroundImage: {\n      values(theme) {\n        return {\n          ...theme(\"gradients\"),\n          ...theme(\"assets\")\n        };\n      },\n      shorthand: [\"bgImg\", \"bgImage\"]\n    },\n    // border\n    border: {\n      values: \"borders\"\n    },\n    borderTop: {\n      values: \"borders\"\n    },\n    borderLeft: {\n      values: \"borders\"\n    },\n    borderBlockStart: {\n      values: \"borders\"\n    },\n    borderRight: {\n      values: \"borders\"\n    },\n    borderInlineEnd: {\n      values: \"borders\"\n    },\n    borderBottom: {\n      values: \"borders\"\n    },\n    borderBlockEnd: {\n      values: \"borders\"\n    },\n    borderInlineStart: {\n      values: \"borders\",\n      shorthand: [\"borderStart\"]\n    },\n    borderInline: {\n      values: \"borders\",\n      shorthand: [\"borderX\"]\n    },\n    borderBlock: {\n      values: \"borders\",\n      shorthand: [\"borderY\"]\n    },\n    // border colors\n    borderColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"borderColor\")\n    },\n    borderTopColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"borderTopColor\")\n    },\n    borderBlockStartColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"borderBlockStartColor\")\n    },\n    borderBottomColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"borderBottomColor\")\n    },\n    borderBlockEndColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"borderBlockEndColor\")\n    },\n    borderLeftColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"borderLeftColor\")\n    },\n    borderInlineStartColor: {\n      values: colorValues,\n      shorthand: [\"borderStartColor\"],\n      transform: createColorMixTransform(\"borderInlineStartColor\")\n    },\n    borderRightColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"borderRightColor\")\n    },\n    borderInlineEndColor: {\n      values: colorValues,\n      shorthand: [\"borderEndColor\"],\n      transform: createColorMixTransform(\"borderInlineEndColor\")\n    },\n    // border styles\n    borderStyle: {\n      values: \"borderStyles\"\n    },\n    borderTopStyle: {\n      values: \"borderStyles\"\n    },\n    borderBlockStartStyle: {\n      values: \"borderStyles\"\n    },\n    borderBottomStyle: {\n      values: \"borderStyles\"\n    },\n    borderBlockEndStyle: {\n      values: \"borderStyles\"\n    },\n    borderInlineStartStyle: {\n      values: \"borderStyles\",\n      shorthand: [\"borderStartStyle\"]\n    },\n    borderInlineEndStyle: {\n      values: \"borderStyles\",\n      shorthand: [\"borderEndStyle\"]\n    },\n    borderLeftStyle: {\n      values: \"borderStyles\"\n    },\n    borderRightStyle: {\n      values: \"borderStyles\"\n    },\n    // border radius\n    borderRadius: {\n      values: \"radii\",\n      shorthand: [\"rounded\"]\n    },\n    borderTopLeftRadius: {\n      values: \"radii\",\n      shorthand: [\"roundedTopLeft\"]\n    },\n    borderStartStartRadius: {\n      values: \"radii\",\n      shorthand: [\"roundedStartStart\", \"borderTopStartRadius\"]\n    },\n    borderEndStartRadius: {\n      values: \"radii\",\n      shorthand: [\"roundedEndStart\", \"borderBottomStartRadius\"]\n    },\n    borderTopRightRadius: {\n      values: \"radii\",\n      shorthand: [\"roundedTopRight\"]\n    },\n    borderStartEndRadius: {\n      values: \"radii\",\n      shorthand: [\"roundedStartEnd\", \"borderTopEndRadius\"]\n    },\n    borderEndEndRadius: {\n      values: \"radii\",\n      shorthand: [\"roundedEndEnd\", \"borderBottomEndRadius\"]\n    },\n    borderBottomLeftRadius: {\n      values: \"radii\",\n      shorthand: [\"roundedBottomLeft\"]\n    },\n    borderBottomRightRadius: {\n      values: \"radii\",\n      shorthand: [\"roundedBottomRight\"]\n    },\n    borderInlineStartRadius: {\n      values: \"radii\",\n      property: \"borderRadius\",\n      shorthand: [\"roundedStart\", \"borderStartRadius\"],\n      transform: value => ({\n        borderStartStartRadius: value,\n        borderEndStartRadius: value\n      })\n    },\n    borderInlineEndRadius: {\n      values: \"radii\",\n      property: \"borderRadius\",\n      shorthand: [\"roundedEnd\", \"borderEndRadius\"],\n      transform: value => ({\n        borderStartEndRadius: value,\n        borderEndEndRadius: value\n      })\n    },\n    borderTopRadius: {\n      values: \"radii\",\n      property: \"borderRadius\",\n      shorthand: [\"roundedTop\"],\n      transform: value => ({\n        borderTopLeftRadius: value,\n        borderTopRightRadius: value\n      })\n    },\n    borderBottomRadius: {\n      values: \"radii\",\n      property: \"borderRadius\",\n      shorthand: [\"roundedBottom\"],\n      transform: value => ({\n        borderBottomLeftRadius: value,\n        borderBottomRightRadius: value\n      })\n    },\n    borderLeftRadius: {\n      values: \"radii\",\n      property: \"borderRadius\",\n      shorthand: [\"roundedLeft\"],\n      transform: value => ({\n        borderTopLeftRadius: value,\n        borderBottomLeftRadius: value\n      })\n    },\n    borderRightRadius: {\n      values: \"radii\",\n      property: \"borderRadius\",\n      shorthand: [\"roundedRight\"],\n      transform: value => ({\n        borderTopRightRadius: value,\n        borderBottomRightRadius: value\n      })\n    },\n    borderWidth: {\n      values: \"borderWidths\"\n    },\n    borderBlockStartWidth: {\n      values: \"borderWidths\"\n    },\n    borderTopWidth: {\n      values: \"borderWidths\"\n    },\n    borderBottomWidth: {\n      values: \"borderWidths\"\n    },\n    borderBlockEndWidth: {\n      values: \"borderWidths\"\n    },\n    borderRightWidth: {\n      values: \"borderWidths\"\n    },\n    borderInlineWidth: {\n      values: \"borderWidths\",\n      shorthand: [\"borderXWidth\"]\n    },\n    borderInlineStartWidth: {\n      values: \"borderWidths\",\n      shorthand: [\"borderStartWidth\"]\n    },\n    borderInlineEndWidth: {\n      values: \"borderWidths\",\n      shorthand: [\"borderEndWidth\"]\n    },\n    borderLeftWidth: {\n      values: \"borderWidths\"\n    },\n    borderBlockWidth: {\n      values: \"borderWidths\",\n      shorthand: [\"borderYWidth\"]\n    },\n    // colors\n    color: {\n      values: colorValues,\n      transform: createColorMixTransform(\"color\")\n    },\n    fill: {\n      values: colorValues,\n      transform: createColorMixTransform(\"fill\")\n    },\n    stroke: {\n      values: colorValues,\n      transform: createColorMixTransform(\"stroke\")\n    },\n    accentColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"accentColor\")\n    },\n    // divide\n    divideX: {\n      values: {\n        type: \"string\"\n      },\n      transform(value) {\n        return {\n          \"& > :not(style, [hidden]) ~ :not(style, [hidden])\": {\n            borderInlineStartWidth: value,\n            borderInlineEndWidth: \"0px\"\n          }\n        };\n      }\n    },\n    divideY: {\n      values: {\n        type: \"string\"\n      },\n      transform(value) {\n        return {\n          \"& > :not(style, [hidden]) ~ :not(style, [hidden])\": {\n            borderTopWidth: value,\n            borderBottomWidth: \"0px\"\n          }\n        };\n      }\n    },\n    divideColor: {\n      values: colorValues,\n      transform(value, args) {\n        return {\n          \"& > :not(style, [hidden]) ~ :not(style, [hidden])\": divideColor(value, args)\n        };\n      }\n    },\n    divideStyle: {\n      property: \"borderStyle\",\n      transform(value) {\n        return {\n          \"& > :not(style, [hidden]) ~ :not(style, [hidden])\": {\n            borderStyle: value\n          }\n        };\n      }\n    },\n    // effects\n    boxShadow: {\n      values: \"shadows\",\n      shorthand: [\"shadow\"]\n    },\n    boxShadowColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"--shadow-color\"),\n      shorthand: [\"shadowColor\"]\n    },\n    mixBlendMode: {\n      shorthand: [\"blendMode\"]\n    },\n    backgroundBlendMode: {\n      shorthand: [\"bgBlendMode\"]\n    },\n    opacity: {\n      values: \"opacity\"\n    },\n    // filters\n    filter: {\n      transform(v) {\n        if (v !== \"auto\") {\n          return {\n            filter: v\n          };\n        }\n        return {\n          filter: `var(--blur) var(--brightness) var(--contrast) var(--grayscale) var(--hue-rotate) var(--invert) var(--saturate) var(--sepia) var(--drop-shadow)`\n        };\n      }\n    },\n    blur: {\n      values: \"blurs\",\n      transform: v => ({\n        \"--blur\": wrap(\"blur\", v)\n      })\n    },\n    brightness: {\n      transform: v => ({\n        \"--brightness\": wrap(\"brightness\", v)\n      })\n    },\n    contrast: {\n      transform: v => ({\n        \"--contrast\": wrap(\"contrast\", v)\n      })\n    },\n    grayscale: {\n      transform: v => ({\n        \"--grayscale\": wrap(\"grayscale\", v)\n      })\n    },\n    hueRotate: {\n      transform: v => ({\n        \"--hue-rotate\": wrap(\"hue-rotate\", deg(v))\n      })\n    },\n    invert: {\n      transform: v => ({\n        \"--invert\": wrap(\"invert\", v)\n      })\n    },\n    saturate: {\n      transform: v => ({\n        \"--saturate\": wrap(\"saturate\", v)\n      })\n    },\n    sepia: {\n      transform: v => ({\n        \"--sepia\": wrap(\"sepia\", v)\n      })\n    },\n    dropShadow: {\n      transform: v => ({\n        \"--drop-shadow\": wrap(\"drop-shadow\", v)\n      })\n    },\n    // backdrop filters\n    backdropFilter: {\n      transform(v) {\n        if (v !== \"auto\") {\n          return {\n            backdropFilter: v\n          };\n        }\n        return {\n          backdropFilter: `var(--backdrop-blur) var(--backdrop-brightness) var(--backdrop-contrast) var(--backdrop-grayscale) var(--backdrop-hue-rotate) var(--backdrop-invert) var(--backdrop-opacity) var(--backdrop-saturate) var(--backdrop-sepia)`\n        };\n      }\n    },\n    backdropBlur: {\n      values: \"blurs\",\n      transform: v => ({\n        \"--backdrop-blur\": wrap(\"blur\", v)\n      })\n    },\n    backdropBrightness: {\n      transform: v => ({\n        \"--backdrop-brightness\": wrap(\"brightness\", v)\n      })\n    },\n    backdropContrast: {\n      transform: v => ({\n        \"--backdrop-contrast\": wrap(\"contrast\", v)\n      })\n    },\n    backdropGrayscale: {\n      transform: v => ({\n        \"--backdrop-grayscale\": wrap(\"grayscale\", v)\n      })\n    },\n    backdropHueRotate: {\n      transform: v => ({\n        \"--backdrop-hue-rotate\": wrap(\"hue-rotate\", deg(v))\n      })\n    },\n    backdropInvert: {\n      transform: v => ({\n        \"--backdrop-invert\": wrap(\"invert\", v)\n      })\n    },\n    backdropOpacity: {\n      transform: v => ({\n        \"--backdrop-opacity\": wrap(\"opacity\", v)\n      })\n    },\n    backdropSaturate: {\n      transform: v => ({\n        \"--backdrop-saturate\": wrap(\"saturate\", v)\n      })\n    },\n    backdropSepia: {\n      transform: v => ({\n        \"--backdrop-sepia\": wrap(\"sepia\", v)\n      })\n    },\n    // flexbox\n    flexBasis: {\n      values: \"sizes\"\n    },\n    gap: {\n      values: \"spacing\"\n    },\n    rowGap: {\n      values: \"spacing\",\n      shorthand: [\"gapY\"]\n    },\n    columnGap: {\n      values: \"spacing\",\n      shorthand: [\"gapX\"]\n    },\n    flexDirection: {\n      shorthand: [\"flexDir\"]\n    },\n    // grid\n    gridGap: {\n      values: \"spacing\"\n    },\n    gridColumnGap: {\n      values: \"spacing\"\n    },\n    gridRowGap: {\n      values: \"spacing\"\n    },\n    // interactivity\n    outlineColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"outlineColor\")\n    },\n    focusRing: createFocusRing(\"&:is(:focus, [data-focus])\"),\n    focusVisibleRing: createFocusRing(\"&:is(:focus-visible, [data-focus-visible])\"),\n    focusRingColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"--focus-ring-color\")\n    },\n    focusRingOffset: {\n      values: \"spacing\",\n      transform: v => ({\n        \"--focus-ring-offset\": v\n      })\n    },\n    focusRingWidth: {\n      values: \"borderWidths\",\n      property: \"outlineWidth\",\n      transform: v => ({\n        \"--focus-ring-width\": v\n      })\n    },\n    focusRingStyle: {\n      values: \"borderStyles\",\n      property: \"outlineStyle\",\n      transform: v => ({\n        \"--focus-ring-style\": v\n      })\n    },\n    // layout\n    aspectRatio: {\n      values: \"aspectRatios\"\n    },\n    width: {\n      values: \"sizes\",\n      shorthand: [\"w\"]\n    },\n    inlineSize: {\n      values: \"sizes\"\n    },\n    height: {\n      values: \"sizes\",\n      shorthand: [\"h\"]\n    },\n    blockSize: {\n      values: \"sizes\"\n    },\n    boxSize: {\n      values: \"sizes\",\n      property: \"width\",\n      transform: v => ({\n        width: v,\n        height: v\n      })\n    },\n    minWidth: {\n      values: \"sizes\",\n      shorthand: [\"minW\"]\n    },\n    minInlineSize: {\n      values: \"sizes\"\n    },\n    minHeight: {\n      values: \"sizes\",\n      shorthand: [\"minH\"]\n    },\n    minBlockSize: {\n      values: \"sizes\"\n    },\n    maxWidth: {\n      values: \"sizes\",\n      shorthand: [\"maxW\"]\n    },\n    maxInlineSize: {\n      values: \"sizes\"\n    },\n    maxHeight: {\n      values: \"sizes\",\n      shorthand: [\"maxH\"]\n    },\n    maxBlockSize: {\n      values: \"sizes\"\n    },\n    hideFrom: {\n      values: \"breakpoints\",\n      //@ts-ignore\n      transform: (value, {\n        raw,\n        token\n      }) => {\n        const bp = token.raw(`breakpoints.${raw}`);\n        const media = bp ? `@breakpoint ${raw}` : `@media screen and (min-width: ${value})`;\n        return {\n          [media]: {\n            display: \"none\"\n          }\n        };\n      }\n    },\n    hideBelow: {\n      values: \"breakpoints\",\n      //@ts-ignore\n      transform(value, {\n        raw,\n        token\n      }) {\n        const bp = token.raw(`breakpoints.${raw}`);\n        const media = bp ? `@breakpoint ${raw}Down` : `@media screen and (max-width: ${value})`;\n        return {\n          [media]: {\n            display: \"none\"\n          }\n        };\n      }\n    },\n    // scroll\n    overscrollBehavior: {\n      shorthand: [\"overscroll\"]\n    },\n    overscrollBehaviorX: {\n      shorthand: [\"overscrollX\"]\n    },\n    overscrollBehaviorY: {\n      shorthand: [\"overscrollY\"]\n    },\n    scrollbar: {\n      values: [\"visible\", \"hidden\"],\n      transform(v) {\n        switch (v) {\n          case \"visible\":\n            return {\n              msOverflowStyle: \"auto\",\n              scrollbarWidth: \"auto\",\n              \"&::-webkit-scrollbar\": {\n                display: \"block\"\n              }\n            };\n          case \"hidden\":\n            return {\n              msOverflowStyle: \"none\",\n              scrollbarWidth: \"none\",\n              \"&::-webkit-scrollbar\": {\n                display: \"none\"\n              }\n            };\n          default:\n            return {};\n        }\n      }\n    },\n    scrollbarColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"scrollbarColor\")\n    },\n    scrollbarGutter: {\n      values: \"spacing\"\n    },\n    scrollbarWidth: {\n      values: \"sizes\"\n    },\n    // scroll margin\n    scrollMargin: {\n      values: \"spacing\"\n    },\n    scrollMarginTop: {\n      values: \"spacing\"\n    },\n    scrollMarginBottom: {\n      values: \"spacing\"\n    },\n    scrollMarginLeft: {\n      values: \"spacing\"\n    },\n    scrollMarginRight: {\n      values: \"spacing\"\n    },\n    scrollMarginX: {\n      values: \"spacing\",\n      transform: v => ({\n        scrollMarginLeft: v,\n        scrollMarginRight: v\n      })\n    },\n    scrollMarginY: {\n      values: \"spacing\",\n      transform: v => ({\n        scrollMarginTop: v,\n        scrollMarginBottom: v\n      })\n    },\n    // scroll padding\n    scrollPadding: {\n      values: \"spacing\"\n    },\n    scrollPaddingTop: {\n      values: \"spacing\"\n    },\n    scrollPaddingBottom: {\n      values: \"spacing\"\n    },\n    scrollPaddingLeft: {\n      values: \"spacing\"\n    },\n    scrollPaddingRight: {\n      values: \"spacing\"\n    },\n    scrollPaddingInline: {\n      values: \"spacing\",\n      shorthand: [\"scrollPaddingX\"]\n    },\n    scrollPaddingBlock: {\n      values: \"spacing\",\n      shorthand: [\"scrollPaddingY\"]\n    },\n    // scroll snap\n    scrollSnapType: {\n      values: {\n        none: \"none\",\n        x: \"x var(--scroll-snap-strictness)\",\n        y: \"y var(--scroll-snap-strictness)\",\n        both: \"both var(--scroll-snap-strictness)\"\n      }\n    },\n    scrollSnapStrictness: {\n      values: [\"mandatory\", \"proximity\"],\n      transform: v => ({\n        \"--scroll-snap-strictness\": v\n      })\n    },\n    scrollSnapMargin: {\n      values: \"spacing\"\n    },\n    scrollSnapMarginTop: {\n      values: \"spacing\"\n    },\n    scrollSnapMarginBottom: {\n      values: \"spacing\"\n    },\n    scrollSnapMarginLeft: {\n      values: \"spacing\"\n    },\n    scrollSnapMarginRight: {\n      values: \"spacing\"\n    },\n    // list\n    listStylePosition: {\n      shorthand: [\"listStylePos\"]\n    },\n    listStyleImage: {\n      values: \"assets\",\n      shorthand: [\"listStyleImg\"]\n    },\n    // position\n    position: {\n      shorthand: [\"pos\"]\n    },\n    zIndex: {\n      values: \"zIndex\"\n    },\n    inset: {\n      values: \"spacing\"\n    },\n    insetInline: {\n      values: \"spacing\",\n      shorthand: [\"insetX\"]\n    },\n    insetBlock: {\n      values: \"spacing\",\n      shorthand: [\"insetY\"]\n    },\n    top: {\n      values: \"spacing\"\n    },\n    insetBlockStart: {\n      values: \"spacing\"\n    },\n    bottom: {\n      values: \"spacing\"\n    },\n    insetBlockEnd: {\n      values: \"spacing\"\n    },\n    left: {\n      values: \"spacing\"\n    },\n    right: {\n      values: \"spacing\"\n    },\n    insetInlineStart: {\n      values: \"spacing\",\n      shorthand: [\"insetStart\"]\n    },\n    insetInlineEnd: {\n      values: \"spacing\",\n      shorthand: [\"insetEnd\"]\n    },\n    // shadow / ring\n    ring: {\n      transform(value) {\n        return {\n          \"--ring-offset-shadow\": `var(--ring-inset) 0 0 0 var(--ring-offset-width) var(--ring-offset-color)`,\n          \"--ring-shadow\": `var(--ring-inset) 0 0 0 calc(var(--ring-width) + var(--ring-offset-width)) var(--ring-color)`,\n          \"--ring-width\": value,\n          boxShadow: \"var(--ring-offset-shadow), var(--ring-shadow), var(--shadow, 0 0 #0000)\"\n        };\n      }\n    },\n    ringColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"--ring-color\")\n    },\n    ringOffset: {\n      transform: value => ({\n        \"--ring-offset-width\": value\n      })\n    },\n    ringOffsetColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"--ring-offset-color\")\n    },\n    ringInset: {\n      transform: v => ({\n        \"--ring-inset\": v\n      })\n    },\n    // margin\n    margin: {\n      values: \"spacing\",\n      shorthand: [\"m\"]\n    },\n    marginTop: {\n      values: \"spacing\",\n      shorthand: [\"mt\"]\n    },\n    marginBlockStart: {\n      values: \"spacing\"\n    },\n    marginRight: {\n      values: \"spacing\",\n      shorthand: [\"mr\"]\n    },\n    marginBottom: {\n      values: \"spacing\",\n      shorthand: [\"mb\"]\n    },\n    marginBlockEnd: {\n      values: \"spacing\"\n    },\n    marginLeft: {\n      values: \"spacing\",\n      shorthand: [\"ml\"]\n    },\n    marginInlineStart: {\n      values: \"spacing\",\n      shorthand: [\"ms\", \"marginStart\"]\n    },\n    marginInlineEnd: {\n      values: \"spacing\",\n      shorthand: [\"me\", \"marginEnd\"]\n    },\n    marginInline: {\n      values: \"spacing\",\n      shorthand: [\"mx\", \"marginX\"]\n    },\n    marginBlock: {\n      values: \"spacing\",\n      shorthand: [\"my\", \"marginY\"]\n    },\n    // padding\n    padding: {\n      values: \"spacing\",\n      shorthand: [\"p\"]\n    },\n    paddingTop: {\n      values: \"spacing\",\n      shorthand: [\"pt\"]\n    },\n    paddingRight: {\n      values: \"spacing\",\n      shorthand: [\"pr\"]\n    },\n    paddingBottom: {\n      values: \"spacing\",\n      shorthand: [\"pb\"]\n    },\n    paddingBlockStart: {\n      values: \"spacing\"\n    },\n    paddingBlockEnd: {\n      values: \"spacing\"\n    },\n    paddingLeft: {\n      values: \"spacing\",\n      shorthand: [\"pl\"]\n    },\n    paddingInlineStart: {\n      values: \"spacing\",\n      shorthand: [\"ps\", \"paddingStart\"]\n    },\n    paddingInlineEnd: {\n      values: \"spacing\",\n      shorthand: [\"pe\", \"paddingEnd\"]\n    },\n    paddingInline: {\n      values: \"spacing\",\n      shorthand: [\"px\", \"paddingX\"]\n    },\n    paddingBlock: {\n      values: \"spacing\",\n      shorthand: [\"py\", \"paddingY\"]\n    },\n    // text decoration\n    textDecoration: {\n      shorthand: [\"textDecor\"]\n    },\n    textDecorationColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"textDecorationColor\")\n    },\n    textShadow: {\n      values: \"shadows\"\n    },\n    // transform\n    transform: {\n      transform: value => {\n        let v = value;\n        if (value === \"auto\") {\n          v = `translateX(var(--translate-x, 0)) translateY(var(--translate-y, 0)) rotate(var(--rotate, 0)) scaleX(var(--scale-x, 1)) scaleY(var(--scale-y, 1)) skewX(var(--skew-x, 0)) skewY(var(--skew-y, 0))`;\n        }\n        if (value === \"auto-gpu\") {\n          v = `translate3d(var(--translate-x, 0), var(--translate-y, 0), 0) rotate(var(--rotate, 0)) scaleX(var(--scale-x, 1)) scaleY(var(--scale-y, 1)) skewX(var(--skew-x, 0)) skewY(var(--skew-y, 0))`;\n        }\n        return {\n          transform: v\n        };\n      }\n    },\n    skewX: {\n      transform: v => ({\n        \"--skew-x\": deg(v)\n      })\n    },\n    skewY: {\n      transform: v => ({\n        \"--skew-y\": deg(v)\n      })\n    },\n    scaleX: {\n      transform: v => ({\n        \"--scale-x\": v\n      })\n    },\n    scaleY: {\n      transform: v => ({\n        \"--scale-y\": v\n      })\n    },\n    scale: {\n      transform(value) {\n        if (value !== \"auto\") return {\n          scale: value\n        };\n        return {\n          scale: `var(--scale-x, 1) var(--scale-y, 1)`\n        };\n      }\n    },\n    spaceXReverse: {\n      values: {\n        type: \"boolean\"\n      },\n      transform(value) {\n        return {\n          \"& > :not(style, [hidden]) ~ :not(style, [hidden])\": {\n            \"--space-x-reverse\": value ? \"1\" : void 0\n          }\n        };\n      }\n    },\n    spaceX: {\n      property: \"marginInlineStart\",\n      values: \"spacing\",\n      transform: v => ({\n        \"& > :not(style, [hidden]) ~ :not(style, [hidden])\": {\n          \"--space-x-reverse\": \"0\",\n          marginInlineStart: `calc(${v} * calc(1 - var(--space-x-reverse)))`,\n          marginInlineEnd: `calc(${v} * var(--space-x-reverse))`\n        }\n      })\n    },\n    spaceYReverse: {\n      values: {\n        type: \"boolean\"\n      },\n      transform(value) {\n        return {\n          \"& > :not(style, [hidden]) ~ :not(style, [hidden])\": {\n            \"--space-y-reverse\": value ? \"1\" : void 0\n          }\n        };\n      }\n    },\n    spaceY: {\n      property: \"marginTop\",\n      values: \"spacing\",\n      transform: v => ({\n        \"& > :not(style, [hidden]) ~ :not(style, [hidden])\": {\n          \"--space-y-reverse\": \"0\",\n          marginTop: `calc(${v} * calc(1 - var(--space-y-reverse)))`,\n          marginBottom: `calc(${v} * var(--space-y-reverse))`\n        }\n      })\n    },\n    rotate: {\n      transform(value) {\n        if (value !== \"auto\") return {\n          rotate: deg(value)\n        };\n        return {\n          rotate: `var(--rotate-x, 0) var(--rotate-y, 0) var(--rotate-z, 0)`\n        };\n      }\n    },\n    rotateX: {\n      transform(value) {\n        return {\n          \"--rotate-x\": deg(value)\n        };\n      }\n    },\n    rotateY: {\n      transform(value) {\n        return {\n          \"--rotate-y\": deg(value)\n        };\n      }\n    },\n    // transform / translate\n    translate: {\n      transform(value) {\n        if (value !== \"auto\") return {\n          translate: value\n        };\n        return {\n          translate: `var(--translate-x) var(--translate-y)`\n        };\n      }\n    },\n    translateX: {\n      values: \"spacing\",\n      transform: v => ({\n        \"--translate-x\": v\n      })\n    },\n    translateY: {\n      values: \"spacing\",\n      transform: v => ({\n        \"--translate-y\": v\n      })\n    },\n    // transition\n    transition: {\n      values: [\"all\", \"common\", \"colors\", \"opacity\", \"position\", \"backgrounds\", \"size\", \"shadow\", \"transform\"],\n      transform(value) {\n        switch (value) {\n          case \"all\":\n            return createTransition(\"all\");\n          case \"position\":\n            return createTransition(\"left, right, top, bottom, inset-inline, inset-block\");\n          case \"colors\":\n            return createTransition(\"color, background-color, border-color, text-decoration-color, fill, stroke\");\n          case \"opacity\":\n            return createTransition(\"opacity\");\n          case \"shadow\":\n            return createTransition(\"box-shadow\");\n          case \"transform\":\n            return createTransition(\"transform\");\n          case \"size\":\n            return createTransition(\"width, height\");\n          case \"backgrounds\":\n            return createTransition(\"background, background-color, background-image, background-position\");\n          case \"common\":\n            return createTransition(\"color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter\");\n          default:\n            return {\n              transition: value\n            };\n        }\n      }\n    },\n    transitionDuration: {\n      values: \"durations\"\n    },\n    transitionProperty: {\n      values: {\n        common: \"background-color, border-color, color, fill, stroke, opacity, box-shadow, translate, transform\",\n        colors: \"background-color, border-color, color, fill, stroke\",\n        size: \"width, height\",\n        position: \"left, right, top, bottom, inset-inline, inset-block\",\n        background: \"background, background-color, background-image, background-position\"\n      }\n    },\n    transitionTimingFunction: {\n      values: \"easings\"\n    },\n    // animation\n    animation: {\n      values: \"animations\"\n    },\n    animationDuration: {\n      values: \"durations\"\n    },\n    animationDelay: {\n      values: \"durations\"\n    },\n    animationTimingFunction: {\n      values: \"easings\"\n    },\n    // typography\n    fontFamily: {\n      values: \"fonts\"\n    },\n    fontSize: {\n      values: \"fontSizes\"\n    },\n    fontWeight: {\n      values: \"fontWeights\"\n    },\n    lineHeight: {\n      values: \"lineHeights\"\n    },\n    letterSpacing: {\n      values: \"letterSpacings\"\n    },\n    textIndent: {\n      values: \"spacing\"\n    },\n    truncate: {\n      values: {\n        type: \"boolean\"\n      },\n      transform(value) {\n        if (value === true) {\n          return {\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            whiteSpace: \"nowrap\"\n          };\n        }\n        return {};\n      }\n    },\n    lineClamp: {\n      transform(value) {\n        if (value === \"none\") {\n          return {\n            WebkitLineClamp: \"unset\"\n          };\n        }\n        return {\n          overflow: \"hidden\",\n          display: \"-webkit-box\",\n          WebkitLineClamp: value,\n          WebkitBoxOrient: \"vertical\",\n          textWrap: \"wrap\"\n        };\n      }\n    },\n    // helpers\n    srOnly: {\n      values: {\n        type: \"boolean\"\n      },\n      transform(value) {\n        return srMapping[value] || {};\n      }\n    },\n    debug: {\n      values: {\n        type: \"boolean\"\n      },\n      transform(value) {\n        if (!value) return {};\n        return {\n          outline: \"1px solid blue !important\",\n          \"& > *\": {\n            outline: \"1px solid red !important\"\n          }\n        };\n      }\n    },\n    caretColor: {\n      values: colorValues,\n      transform: createColorMixTransform(\"caretColor\")\n    },\n    cursor: {\n      values: \"cursor\"\n    }\n  }\n});\nconst srMapping = {\n  true: {\n    position: \"absolute\",\n    width: \"1px\",\n    height: \"1px\",\n    padding: \"0\",\n    margin: \"-1px\",\n    overflow: \"hidden\",\n    clip: \"rect(0, 0, 0, 0)\",\n    whiteSpace: \"nowrap\",\n    borderWidth: \"0\"\n  },\n  false: {\n    position: \"static\",\n    width: \"auto\",\n    height: \"auto\",\n    padding: \"0\",\n    margin: \"0\",\n    overflow: \"visible\",\n    clip: \"auto\",\n    whiteSpace: \"normal\"\n  }\n};\nexport { defaultBaseConfig, defaultConditions };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
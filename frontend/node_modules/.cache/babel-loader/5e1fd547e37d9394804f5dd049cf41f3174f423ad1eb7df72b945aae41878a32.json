{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sabin.arsene\\\\Desktop\\\\Tudu-app\\\\TUDU\\\\frontend\\\\src\\\\components\\\\FavoriteButton.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { Heart, Loader } from 'lucide-react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { addServiceToFavorites, removeServiceFromFavorites, addRequestToFavorites, removeRequestFromFavorites } from '../services/favoriteApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FavoriteButton = ({\n  itemId,\n  itemType,\n  // 'service' sau 'request'\n  initialFavorite = false,\n  className = '',\n  size = 20\n}) => {\n  _s();\n  const [isFavorite, setIsFavorite] = useState(initialFavorite);\n  const [isTogglingFavorite, setIsTogglingFavorite] = useState(false);\n  const {\n    user\n  } = useAuth();\n  const navigate = useNavigate();\n  const toggleFavorite = async e => {\n    e.preventDefault(); // Previne navigarea când butonul este în card\n    e.stopPropagation(); // Oprește propagarea evenimentului\n\n    if (!user) {\n      navigate('/login');\n      return;\n    }\n    try {\n      setIsTogglingFavorite(true);\n      const token = localStorage.getItem('token');\n      if (itemType === 'service') {\n        if (isFavorite) {\n          await removeServiceFromFavorites(itemId, token);\n        } else {\n          await addServiceToFavorites(itemId, token);\n        }\n      } else {\n        if (isFavorite) {\n          await removeRequestFromFavorites(itemId, token);\n        } else {\n          await addRequestToFavorites(itemId, token);\n        }\n      }\n      setIsFavorite(!isFavorite);\n    } catch (error) {\n      console.error('Error toggling favorite:', error);\n      alert('A apărut o eroare. Te rugăm să încerci din nou.');\n    } finally {\n      setIsTogglingFavorite(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `favorite-button ${className} ${isFavorite ? 'favorite' : ''}`,\n    onClick: toggleFavorite,\n    disabled: isTogglingFavorite,\n    title: isFavorite ? 'Elimină de la favorite' : 'Adaugă la favorite',\n    children: isTogglingFavorite ? /*#__PURE__*/_jsxDEV(Loader, {\n      size: size,\n      className: \"animate-spin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Heart, {\n      size: size,\n      fill: isFavorite ? \"#ff1d68\" : \"none\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(FavoriteButton, \"bSjQ6D20LNBh3XirFtVxkbm7SGk=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = FavoriteButton;\nexport default FavoriteButton;\nvar _c;\n$RefreshReg$(_c, \"FavoriteButton\");","map":{"version":3,"names":["useState","Heart","Loader","useAuth","useNavigate","addServiceToFavorites","removeServiceFromFavorites","addRequestToFavorites","removeRequestFromFavorites","jsxDEV","_jsxDEV","FavoriteButton","itemId","itemType","initialFavorite","className","size","_s","isFavorite","setIsFavorite","isTogglingFavorite","setIsTogglingFavorite","user","navigate","toggleFavorite","e","preventDefault","stopPropagation","token","localStorage","getItem","error","console","alert","onClick","disabled","title","children","fileName","_jsxFileName","lineNumber","columnNumber","fill","_c","$RefreshReg$"],"sources":["C:/Users/sabin.arsene/Desktop/Tudu-app/TUDU/frontend/src/components/FavoriteButton.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { Heart, Loader } from 'lucide-react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { \r\n  addServiceToFavorites, \r\n  removeServiceFromFavorites, \r\n  addRequestToFavorites, \r\n  removeRequestFromFavorites \r\n} from '../services/favoriteApi';\r\n\r\nconst FavoriteButton = ({ \r\n  itemId, \r\n  itemType, // 'service' sau 'request'\r\n  initialFavorite = false,\r\n  className = '',\r\n  size = 20\r\n}) => {\r\n  const [isFavorite, setIsFavorite] = useState(initialFavorite);\r\n  const [isTogglingFavorite, setIsTogglingFavorite] = useState(false);\r\n  const { user } = useAuth();\r\n  const navigate = useNavigate();\r\n\r\n  const toggleFavorite = async (e) => {\r\n    e.preventDefault(); // Previne navigarea când butonul este în card\r\n    e.stopPropagation(); // Oprește propagarea evenimentului\r\n\r\n    if (!user) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsTogglingFavorite(true);\r\n      const token = localStorage.getItem('token');\r\n      \r\n      if (itemType === 'service') {\r\n        if (isFavorite) {\r\n          await removeServiceFromFavorites(itemId, token);\r\n        } else {\r\n          await addServiceToFavorites(itemId, token);\r\n        }\r\n      } else {\r\n        if (isFavorite) {\r\n          await removeRequestFromFavorites(itemId, token);\r\n        } else {\r\n          await addRequestToFavorites(itemId, token);\r\n        }\r\n      }\r\n      \r\n      setIsFavorite(!isFavorite);\r\n    } catch (error) {\r\n      console.error('Error toggling favorite:', error);\r\n      alert('A apărut o eroare. Te rugăm să încerci din nou.');\r\n    } finally {\r\n      setIsTogglingFavorite(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button \r\n      className={`favorite-button ${className} ${isFavorite ? 'favorite' : ''}`}\r\n      onClick={toggleFavorite}\r\n      disabled={isTogglingFavorite}\r\n      title={isFavorite ? 'Elimină de la favorite' : 'Adaugă la favorite'}\r\n    >\r\n      {isTogglingFavorite ? (\r\n        <Loader size={size} className=\"animate-spin\" />\r\n      ) : (\r\n        <Heart size={size} fill={isFavorite ? \"#ff1d68\" : \"none\"} />\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default FavoriteButton; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
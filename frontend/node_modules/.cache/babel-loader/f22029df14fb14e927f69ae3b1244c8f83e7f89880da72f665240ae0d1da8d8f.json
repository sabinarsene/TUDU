{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx } from 'react/jsx-runtime';\nimport { Dialog, useDialogContext } from '@ark-ui/react/dialog';\nimport { forwardRef } from 'react';\nimport { createSlotRecipeContext } from '../../styled-system/create-slot-recipe-context.js';\nimport { chakra } from '../../styled-system/factory.js';\nconst {\n  withRootProvider,\n  withContext,\n  useStyles: useDialogStyles,\n  PropsProvider\n} = createSlotRecipeContext({\n  key: \"dialog\"\n});\nconst DialogRootProvider = withRootProvider(Dialog.RootProvider, {\n  defaultProps: {\n    unmountOnExit: true,\n    lazyMount: true\n  }\n});\nconst DialogRoot = withRootProvider(Dialog.Root, {\n  defaultProps: {\n    unmountOnExit: true,\n    lazyMount: true\n  }\n});\nconst DialogPropsProvider = PropsProvider;\nconst DialogTrigger = withContext(Dialog.Trigger, \"trigger\", {\n  forwardAsChild: true\n});\nconst DialogPositioner = withContext(Dialog.Positioner, \"positioner\", {\n  forwardAsChild: true\n});\nconst DialogContent = withContext(Dialog.Content, \"content\", {\n  forwardAsChild: true\n});\nconst DialogDescription = withContext(Dialog.Description, \"description\", {\n  forwardAsChild: true\n});\nconst DialogTitle = withContext(Dialog.Title, \"title\", {\n  forwardAsChild: true\n});\nconst DialogCloseTrigger = withContext(Dialog.CloseTrigger, \"closeTrigger\", {\n  forwardAsChild: true\n});\nconst DialogActionTrigger = forwardRef(function DialogActionTrigger2(props, ref) {\n  const dialog = useDialogContext();\n  return /* @__PURE__ */jsx(chakra.button, {\n    ...props,\n    ref,\n    onClick: () => dialog.setOpen(false)\n  });\n});\nconst DialogBackdrop = withContext(Dialog.Backdrop, \"backdrop\", {\n  forwardAsChild: true\n});\nconst DialogBody = withContext(\"div\", \"body\");\nconst DialogFooter = withContext(\"div\", \"footer\");\nconst DialogHeader = withContext(\"div\", \"header\");\nconst DialogContext = Dialog.Context;\nexport { DialogActionTrigger, DialogBackdrop, DialogBody, DialogCloseTrigger, DialogContent, DialogContext, DialogDescription, DialogFooter, DialogHeader, DialogPositioner, DialogPropsProvider, DialogRoot, DialogRootProvider, DialogTitle, DialogTrigger, useDialogStyles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
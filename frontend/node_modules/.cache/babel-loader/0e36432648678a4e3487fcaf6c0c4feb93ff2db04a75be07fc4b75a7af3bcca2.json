{"ast":null,"code":"// src/normalize-span.ts\nvar normalizeSpan = (spans, len) => {\n  const result = [];\n  const append = (start, end, match) => {\n    if (end - start > 0) result.push({\n      start,\n      end,\n      match\n    });\n  };\n  if (spans.length === 0) {\n    append(0, len, false);\n  } else {\n    let lastIndex = 0;\n    for (const chunk of spans) {\n      append(lastIndex, chunk.start, false);\n      append(chunk.start, chunk.end, true);\n      lastIndex = chunk.end;\n    }\n    append(lastIndex, len, false);\n  }\n  return result;\n};\n\n// src/highlight-first.ts\nfunction highlightFirst(props) {\n  const {\n    text,\n    query,\n    ignoreCase\n  } = props;\n  const searchText = ignoreCase ? text.toLowerCase() : text;\n  const searchQuery = ignoreCase ? typeof query === \"string\" ? query.toLowerCase() : query : query;\n  const start = typeof searchText === \"string\" ? searchText.indexOf(searchQuery) : -1;\n  if (start === -1) {\n    return [{\n      text,\n      match: false\n    }];\n  }\n  const end = start + searchQuery.length;\n  const spans = [{\n    start,\n    end\n  }];\n  return normalizeSpan(spans, text.length).map(chunk => ({\n    text: text.slice(chunk.start, chunk.end),\n    match: !!chunk.match\n  }));\n}\n\n// src/highlight-multiple.ts\nvar escapeRegexp = term => term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, char => `\\\\${char}`);\nvar buildRegex = (queryProp, flags) => {\n  const query = queryProp.filter(Boolean).map(text => escapeRegexp(text));\n  return new RegExp(`(${query.join(\"|\")})`, flags);\n};\nvar getRegexFlags = (ignoreCase, matchAll = true) => `${ignoreCase ? \"i\" : \"\"}${matchAll ? \"g\" : \"\"}`;\nfunction highlightMultiple(props) {\n  const {\n    text,\n    query,\n    ignoreCase,\n    matchAll\n  } = props;\n  if (query.length === 0) {\n    return [{\n      text,\n      match: false\n    }];\n  }\n  const flags = getRegexFlags(ignoreCase, matchAll);\n  const regex = buildRegex(Array.isArray(query) ? query : [query], flags);\n  const spans = [...text.matchAll(regex)].map(match => ({\n    start: match.index || 0,\n    end: (match.index || 0) + match[0].length\n  }));\n  return normalizeSpan(spans, props.text.length).map(chunk => ({\n    text: props.text.slice(chunk.start, chunk.end),\n    match: !!chunk.match\n  }));\n}\n\n// src/highlight.ts\nvar highlightWord = props => {\n  if (props.matchAll == null) {\n    props.matchAll = Array.isArray(props.query);\n  }\n  if (!props.matchAll && Array.isArray(props.query)) {\n    throw new Error(\"matchAll must be true when using multiple queries\");\n  }\n  return props.matchAll ? highlightMultiple(props) : highlightFirst(props);\n};\nexport { highlightWord };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
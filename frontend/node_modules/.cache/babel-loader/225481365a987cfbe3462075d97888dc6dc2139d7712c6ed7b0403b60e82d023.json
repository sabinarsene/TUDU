{"ast":null,"code":"const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';\nconst _navigator = typeof navigator === 'object' && navigator || undefined;\n\n/**\r\n * Determine if we're running in a standard browser environment\r\n *\r\n * This allows axios to run in a web worker, and react-native.\r\n * Both environments support XMLHttpRequest, but not fully standard globals.\r\n *\r\n * web workers:\r\n *  typeof window -> undefined\r\n *  typeof document -> undefined\r\n *\r\n * react-native:\r\n *  navigator.product -> 'ReactNative'\r\n * nativescript\r\n *  navigator.product -> 'NativeScript' or 'NS'\r\n *\r\n * @returns {boolean}\r\n */\nconst hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);\n\n/**\r\n * Determine if we're running in a standard browser webWorker environment\r\n *\r\n * Although the `isStandardBrowserEnv` method indicates that\r\n * `allows axios to run in a web worker`, the WebWorker will still be\r\n * filtered out due to its judgment standard\r\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\r\n * This leads to a problem when axios post `FormData` in webWorker\r\n */\nconst hasStandardBrowserWebWorkerEnv = (() => {\n  return typeof WorkerGlobalScope !== 'undefined' &&\n  // eslint-disable-next-line no-undef\n  self instanceof WorkerGlobalScope && typeof self.importScripts === 'function';\n})();\nconst origin = hasBrowserEnv && window.location.href || 'http://localhost';\nexport { hasBrowserEnv, hasStandardBrowserWebWorkerEnv, hasStandardBrowserEnv, _navigator as navigator, origin };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
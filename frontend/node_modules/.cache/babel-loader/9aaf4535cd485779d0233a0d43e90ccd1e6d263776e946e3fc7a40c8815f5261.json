{"ast":null,"code":"'use client';\n\nconst classNames = {\n  light: \"chakra-ui-light\",\n  dark: \"chakra-ui-dark\"\n};\nfunction getColorModeUtils(options = {}) {\n  const {\n    preventTransition = true,\n    nonce\n  } = options;\n  const utils = {\n    setDataset: value => {\n      const cleanup = preventTransition ? utils.preventTransition() : void 0;\n      document.documentElement.dataset.theme = value;\n      document.documentElement.style.colorScheme = value;\n      cleanup?.();\n    },\n    setClassName(dark) {\n      document.body.classList.add(dark ? classNames.dark : classNames.light);\n      document.body.classList.remove(dark ? classNames.light : classNames.dark);\n    },\n    query() {\n      return window.matchMedia(\"(prefers-color-scheme: dark)\");\n    },\n    getSystemTheme(fallback) {\n      const dark = utils.query().matches ?? fallback === \"dark\";\n      return dark ? \"dark\" : \"light\";\n    },\n    addListener(fn) {\n      const mql = utils.query();\n      const listener = e => {\n        fn(e.matches ? \"dark\" : \"light\");\n      };\n      if (typeof mql.addListener === \"function\") mql.addListener(listener);else mql.addEventListener(\"change\", listener);\n      return () => {\n        if (typeof mql.removeListener === \"function\") mql.removeListener(listener);else mql.removeEventListener(\"change\", listener);\n      };\n    },\n    preventTransition() {\n      const css = document.createElement(\"style\");\n      css.appendChild(document.createTextNode(`*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}`));\n      if (nonce !== void 0) {\n        css.nonce = nonce;\n      }\n      document.head.appendChild(css);\n      return () => {\n        (() => window.getComputedStyle(document.body))();\n        requestAnimationFrame(() => {\n          requestAnimationFrame(() => {\n            document.head.removeChild(css);\n          });\n        });\n      };\n    }\n  };\n  return utils;\n}\nexport { getColorModeUtils };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
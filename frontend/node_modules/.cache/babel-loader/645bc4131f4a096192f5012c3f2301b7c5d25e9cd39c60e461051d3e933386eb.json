{"ast":null,"code":"\"use strict\";\n\nimport { useMemo } from 'react';\nimport { splitProps } from '../utils/split-props.js';\nimport { useChakraContext } from './provider.js';\nconst htmlProps = /* @__PURE__ */new Set([\"htmlWidth\", \"htmlHeight\", \"htmlSize\", \"htmlTranslate\"]);\nfunction isHtmlProp(prop) {\n  return typeof prop === \"string\" && htmlProps.has(prop);\n}\nfunction useResolvedProps(inProps, cvaRecipe, shouldForwardProps) {\n  const {\n    css,\n    isValidProperty\n  } = useChakraContext();\n  const {\n    children,\n    ...props\n  } = inProps;\n  const result = useMemo(() => {\n    const [forwardedProps, restProps_B] = splitProps(props, key => shouldForwardProps(key, cvaRecipe.variantKeys));\n    const [variantProps, restProps_C] = splitProps(restProps_B, cvaRecipe.variantKeys);\n    const [styleProps, elementProps] = splitProps(restProps_C, isValidProperty);\n    return {\n      forwardedProps,\n      variantProps,\n      styleProps,\n      elementProps\n    };\n  }, [cvaRecipe.variantKeys, shouldForwardProps, props, isValidProperty]);\n  const {\n    css: cssStyles,\n    ...propStyles\n  } = result.styleProps;\n  const cvaStyles = useMemo(() => {\n    const variantProps = {\n      ...result.variantProps\n    };\n    if (!cvaRecipe.variantKeys.includes(\"colorPalette\")) {\n      variantProps.colorPalette = props.colorPalette;\n    }\n    if (!cvaRecipe.variantKeys.includes(\"orientation\")) {\n      variantProps.orientation = props.orientation;\n    }\n    return cvaRecipe(variantProps);\n  }, [cvaRecipe, result.variantProps, props.colorPalette, props.orientation]);\n  const styles = useMemo(() => {\n    return css(cvaStyles, ...toArray(cssStyles), propStyles);\n  }, [css, cvaStyles, cssStyles, propStyles]);\n  return {\n    styles,\n    props: {\n      ...result.forwardedProps,\n      ...result.elementProps,\n      children\n    }\n  };\n}\nconst toArray = val => {\n  const res = Array.isArray(val) ? val : [val];\n  return res.filter(Boolean).flat();\n};\nexport { isHtmlProp, useResolvedProps };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
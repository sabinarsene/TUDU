{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope, query, dispatchInputValueEvent, dataAttr, ariaAttr, isLeftClick, getEventPoint, getRelativePoint, getEventKey, trackFormControl, raf } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport { createSplitProps, compact, isEqual } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/rating-group.anatomy.ts\nvar anatomy = createAnatomy(\"rating-group\").parts(\"root\", \"label\", \"item\", \"control\");\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `rating:${ctx.id}`,\n  getLabelId: ctx => ctx.ids?.label ?? `rating:${ctx.id}:label`,\n  getHiddenInputId: ctx => ctx.ids?.hiddenInput ?? `rating:${ctx.id}:input`,\n  getControlId: ctx => ctx.ids?.control ?? `rating:${ctx.id}:control`,\n  getItemId: (ctx, id) => ctx.ids?.item?.(id) ?? `rating:${ctx.id}:item:${id}`,\n  getRootEl: ctx => dom.getById(ctx, dom.getRootId(ctx)),\n  getControlEl: ctx => dom.getById(ctx, dom.getControlId(ctx)),\n  getRadioEl: (ctx, value = ctx.value) => {\n    const selector = `[role=radio][aria-posinset='${Math.ceil(value)}']`;\n    return query(dom.getControlEl(ctx), selector);\n  },\n  getHiddenInputEl: ctx => dom.getById(ctx, dom.getHiddenInputId(ctx)),\n  dispatchChangeEvent: ctx => {\n    const inputEl = dom.getHiddenInputEl(ctx);\n    if (!inputEl) return;\n    dispatchInputValueEvent(inputEl, {\n      value: ctx.value\n    });\n  }\n});\n\n// src/rating-group.connect.ts\nfunction connect(state, send, normalize) {\n  const interactive = state.context.isInteractive;\n  const disabled = state.context.isDisabled;\n  const readOnly = state.context.readOnly;\n  const value = state.context.value;\n  const hoveredValue = state.context.hoveredValue;\n  const translations = state.context.translations;\n  function getItemState(props2) {\n    const value2 = state.context.isHovering ? state.context.hoveredValue : state.context.value;\n    const equal = Math.ceil(value2) === props2.index;\n    const highlighted = props2.index <= value2 || equal;\n    const half = equal && Math.abs(value2 - props2.index) === 0.5;\n    return {\n      highlighted,\n      half,\n      checked: equal || state.context.value === -1 && props2.index === 1\n    };\n  }\n  return {\n    hovering: state.context.isHovering,\n    value,\n    hoveredValue,\n    count: state.context.count,\n    items: Array.from({\n      length: state.context.count\n    }).map((_, index) => index + 1),\n    setValue(value2) {\n      send({\n        type: \"SET_VALUE\",\n        value: value2\n      });\n    },\n    clearValue() {\n      send(\"CLEAR_VALUE\");\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: state.context.dir,\n        id: dom.getRootId(state.context)\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        name: state.context.name,\n        form: state.context.form,\n        type: \"text\",\n        hidden: true,\n        disabled,\n        readOnly,\n        required: state.context.required,\n        id: dom.getHiddenInputId(state.context),\n        defaultValue: state.context.value\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        dir: state.context.dir,\n        id: dom.getLabelId(state.context),\n        \"data-disabled\": dataAttr(disabled),\n        htmlFor: dom.getHiddenInputId(state.context),\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          event.preventDefault();\n          const radioEl = dom.getRadioEl(state.context, 1);\n          radioEl?.focus({\n            preventScroll: true\n          });\n        }\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        id: dom.getControlId(state.context),\n        ...parts.control.attrs,\n        dir: state.context.dir,\n        role: \"radiogroup\",\n        \"aria-orientation\": \"horizontal\",\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"aria-readonly\": ariaAttr(readOnly),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-disabled\": dataAttr(disabled),\n        onPointerMove(event) {\n          if (!interactive) return;\n          if (event.pointerType === \"touch\") return;\n          send(\"GROUP_POINTER_OVER\");\n        },\n        onPointerLeave(event) {\n          if (!interactive) return;\n          if (event.pointerType === \"touch\") return;\n          send(\"GROUP_POINTER_LEAVE\");\n        }\n      });\n    },\n    getItemState,\n    getItemProps(props2) {\n      const {\n        index\n      } = props2;\n      const itemState = getItemState(props2);\n      const valueText = translations.ratingValueText(index);\n      return normalize.element({\n        ...parts.item.attrs,\n        dir: state.context.dir,\n        id: dom.getItemId(state.context, index.toString()),\n        role: \"radio\",\n        tabIndex: (() => {\n          if (readOnly) return itemState.checked ? 0 : void 0;\n          if (disabled) return void 0;\n          return itemState.checked ? 0 : -1;\n        })(),\n        \"aria-roledescription\": \"rating\",\n        \"aria-label\": valueText,\n        \"aria-disabled\": disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(readOnly),\n        \"aria-setsize\": state.context.count,\n        \"aria-checked\": itemState.checked,\n        \"data-checked\": dataAttr(itemState.checked),\n        \"aria-posinset\": index,\n        \"data-highlighted\": dataAttr(itemState.highlighted),\n        \"data-half\": dataAttr(itemState.half),\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          event.preventDefault();\n        },\n        onPointerMove(event) {\n          if (!interactive) return;\n          const point = getEventPoint(event);\n          const relativePoint = getRelativePoint(point, event.currentTarget);\n          const percentX = relativePoint.getPercentValue({\n            orientation: \"horizontal\",\n            dir: state.context.dir\n          });\n          const isMidway = percentX < 0.5;\n          send({\n            type: \"POINTER_OVER\",\n            index,\n            isMidway\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const keyMap = {\n            ArrowLeft() {\n              send(\"ARROW_LEFT\");\n            },\n            ArrowRight() {\n              send(\"ARROW_RIGHT\");\n            },\n            ArrowUp() {\n              send(\"ARROW_LEFT\");\n            },\n            ArrowDown() {\n              send(\"ARROW_RIGHT\");\n            },\n            Space() {\n              send({\n                type: \"SPACE\",\n                value: index\n              });\n            },\n            Home() {\n              send(\"HOME\");\n            },\n            End() {\n              send(\"END\");\n            }\n          };\n          const key = getEventKey(event, state.context);\n          const exec = keyMap[key];\n          if (exec) {\n            event.preventDefault();\n            exec(event);\n          }\n        },\n        onClick() {\n          if (!interactive) return;\n          send({\n            type: \"CLICK\",\n            value: index\n          });\n        },\n        onFocus() {\n          if (!interactive) return;\n          send(\"FOCUS\");\n        },\n        onBlur() {\n          if (!interactive) return;\n          send(\"BLUR\");\n        }\n      });\n    }\n  };\n}\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"rating\",\n    initial: \"idle\",\n    context: {\n      name: \"rating\",\n      count: 5,\n      dir: \"ltr\",\n      value: -1,\n      readOnly: false,\n      disabled: false,\n      ...ctx,\n      hoveredValue: -1,\n      fieldsetDisabled: false,\n      translations: {\n        ratingValueText: index => `${index} stars`,\n        ...ctx.translations\n      }\n    },\n    created: [\"roundValueIfNeeded\"],\n    watch: {\n      allowHalf: [\"roundValueIfNeeded\"]\n    },\n    computed: {\n      isDisabled: ctx2 => !!ctx2.disabled || ctx2.fieldsetDisabled,\n      isInteractive: ctx2 => !(ctx2.isDisabled || ctx2.readOnly),\n      isHovering: ctx2 => ctx2.hoveredValue > -1\n    },\n    activities: [\"trackFormControlState\"],\n    on: {\n      SET_VALUE: {\n        actions: [\"setValue\"]\n      },\n      CLEAR_VALUE: {\n        actions: [\"clearValue\"]\n      }\n    },\n    states: {\n      idle: {\n        entry: \"clearHoveredValue\",\n        on: {\n          GROUP_POINTER_OVER: \"hover\",\n          FOCUS: \"focus\",\n          CLICK: {\n            actions: [\"setValue\", \"focusActiveRadio\"]\n          }\n        }\n      },\n      focus: {\n        on: {\n          POINTER_OVER: {\n            actions: \"setHoveredValue\"\n          },\n          GROUP_POINTER_LEAVE: {\n            actions: \"clearHoveredValue\"\n          },\n          BLUR: \"idle\",\n          SPACE: {\n            guard: \"isValueEmpty\",\n            actions: [\"setValue\"]\n          },\n          CLICK: {\n            actions: [\"setValue\", \"focusActiveRadio\"]\n          },\n          ARROW_LEFT: {\n            actions: [\"setPrevValue\", \"focusActiveRadio\"]\n          },\n          ARROW_RIGHT: {\n            actions: [\"setNextValue\", \"focusActiveRadio\"]\n          },\n          HOME: {\n            actions: [\"setValueToMin\", \"focusActiveRadio\"]\n          },\n          END: {\n            actions: [\"setValueToMax\", \"focusActiveRadio\"]\n          }\n        }\n      },\n      hover: {\n        on: {\n          POINTER_OVER: {\n            actions: \"setHoveredValue\"\n          },\n          GROUP_POINTER_LEAVE: [{\n            guard: \"isRadioFocused\",\n            target: \"focus\",\n            actions: \"clearHoveredValue\"\n          }, {\n            target: \"idle\",\n            actions: \"clearHoveredValue\"\n          }],\n          CLICK: {\n            actions: [\"setValue\", \"focusActiveRadio\"]\n          }\n        }\n      }\n    }\n  }, {\n    guards: {\n      isInteractive: ctx2 => !(ctx2.disabled || ctx2.readOnly),\n      isHoveredValueEmpty: ctx2 => ctx2.hoveredValue === -1,\n      isValueEmpty: ctx2 => ctx2.value <= 0,\n      isRadioFocused: ctx2 => !!dom.getControlEl(ctx2)?.contains(dom.getActiveElement(ctx2))\n    },\n    activities: {\n      trackFormControlState(ctx2, _evt, {\n        initialContext\n      }) {\n        return trackFormControl(dom.getHiddenInputEl(ctx2), {\n          onFieldsetDisabledChange(disabled) {\n            ctx2.fieldsetDisabled = disabled;\n          },\n          onFormReset() {\n            set.value(ctx2, initialContext.value);\n          }\n        });\n      }\n    },\n    actions: {\n      clearHoveredValue(ctx2) {\n        set.hoveredValue(ctx2, -1);\n      },\n      focusActiveRadio(ctx2) {\n        raf(() => dom.getRadioEl(ctx2)?.focus());\n      },\n      setPrevValue(ctx2) {\n        const factor = ctx2.allowHalf ? 0.5 : 1;\n        set.value(ctx2, Math.max(0, ctx2.value - factor));\n      },\n      setNextValue(ctx2) {\n        const factor = ctx2.allowHalf ? 0.5 : 1;\n        const value = ctx2.value === -1 ? 0 : ctx2.value;\n        set.value(ctx2, Math.min(ctx2.count, value + factor));\n      },\n      setValueToMin(ctx2) {\n        set.value(ctx2, 1);\n      },\n      setValueToMax(ctx2) {\n        set.value(ctx2, ctx2.count);\n      },\n      setValue(ctx2, evt) {\n        const value = ctx2.hoveredValue === -1 ? evt.value : ctx2.hoveredValue;\n        set.value(ctx2, value);\n      },\n      clearValue(ctx2) {\n        set.value(ctx2, -1);\n      },\n      setHoveredValue(ctx2, evt) {\n        const half = ctx2.allowHalf && evt.isMidway;\n        const factor = half ? 0.5 : 0;\n        set.hoveredValue(ctx2, evt.index - factor);\n      },\n      roundValueIfNeeded(ctx2) {\n        if (ctx2.allowHalf) return;\n        ctx2.value = Math.round(ctx2.value);\n      }\n    }\n  });\n}\nvar invoke = {\n  change: ctx => {\n    ctx.onValueChange?.({\n      value: ctx.value\n    });\n    dom.dispatchChangeEvent(ctx);\n  },\n  hoverChange: ctx => {\n    ctx.onHoverChange?.({\n      hoveredValue: ctx.hoveredValue\n    });\n  }\n};\nvar set = {\n  value: (ctx, value) => {\n    if (isEqual(ctx.value, value)) return;\n    ctx.value = value;\n    invoke.change(ctx);\n  },\n  hoveredValue: (ctx, value) => {\n    if (isEqual(ctx.hoveredValue, value)) return;\n    ctx.hoveredValue = value;\n    invoke.hoverChange(ctx);\n  }\n};\nvar props = createProps()([\"allowHalf\", \"autoFocus\", \"count\", \"dir\", \"disabled\", \"form\", \"getRootNode\", \"id\", \"ids\", \"name\", \"onHoverChange\", \"onValueChange\", \"required\", \"readOnly\", \"translations\", \"value\"]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"index\"]);\nvar splitItemProps = createSplitProps(itemProps);\nexport { anatomy, connect, itemProps, machine, props, splitItemProps, splitProps };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
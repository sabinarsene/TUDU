{"ast":null,"code":"/**\r\n * Initialize backoff timer with `opts`.\r\n *\r\n * - `min` initial timeout in milliseconds [100]\r\n * - `max` max timeout [10000]\r\n * - `jitter` [0]\r\n * - `factor` [2]\r\n *\r\n * @param {Object} opts\r\n * @api public\r\n */\nexport function Backoff(opts) {\n  opts = opts || {};\n  this.ms = opts.min || 100;\n  this.max = opts.max || 10000;\n  this.factor = opts.factor || 2;\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n  this.attempts = 0;\n}\n/**\r\n * Return the backoff duration.\r\n *\r\n * @return {Number}\r\n * @api public\r\n */\nBackoff.prototype.duration = function () {\n  var ms = this.ms * Math.pow(this.factor, this.attempts++);\n  if (this.jitter) {\n    var rand = Math.random();\n    var deviation = Math.floor(rand * this.jitter * ms);\n    ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n  }\n  return Math.min(ms, this.max) | 0;\n};\n/**\r\n * Reset the number of attempts.\r\n *\r\n * @api public\r\n */\nBackoff.prototype.reset = function () {\n  this.attempts = 0;\n};\n/**\r\n * Set the minimum duration\r\n *\r\n * @api public\r\n */\nBackoff.prototype.setMin = function (min) {\n  this.ms = min;\n};\n/**\r\n * Set the maximum duration\r\n *\r\n * @api public\r\n */\nBackoff.prototype.setMax = function (max) {\n  this.max = max;\n};\n/**\r\n * Set the jitter\r\n *\r\n * @api public\r\n */\nBackoff.prototype.setJitter = function (jitter) {\n  this.jitter = jitter;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
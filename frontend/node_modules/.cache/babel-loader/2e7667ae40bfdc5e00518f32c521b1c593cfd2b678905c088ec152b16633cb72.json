{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { forwardRef, useState, useEffect, useId } from 'react';\nimport { createPortal } from 'react-dom';\nimport { EnvironmentProvider } from '../../providers/environment/environment-provider.js';\nimport { composeRefs } from '../../utils/compose-refs.js';\nimport { useSafeLayoutEffect } from '../../utils/use-safe-layout-effect.js';\nimport { FrameContent } from './frame-content.js';\nconst resetStyle = \"<style>*,*::before,*::after { margin: 0; padding: 0; box-sizing: border-box; }</style>\";\nconst initialSrcDoc = `<html><head>${resetStyle}</head><body><div class=\"frame-root\"></div></body></html>`;\nfunction getMountNode(frame) {\n  const doc = frame.contentWindow?.document;\n  if (!doc) return null;\n  const mountNode = doc.body.querySelector(\".frame-root\") || doc.body;\n  return mountNode;\n}\nconst Frame = forwardRef((props, ref) => {\n  const {\n    children,\n    head,\n    onMount,\n    onUnmount,\n    srcDoc = initialSrcDoc,\n    ...rest\n  } = props;\n  const [frameRef, setFrameRef] = useState(null);\n  const [mountNode, setMountNode] = useState(null);\n  useSafeLayoutEffect(() => {\n    if (!frameRef) return;\n    const doc = frameRef.contentWindow?.document;\n    if (!doc) return;\n    doc.open();\n    doc.write(srcDoc);\n    doc.close();\n    setMountNode(getMountNode(frameRef));\n  }, [frameRef, srcDoc]);\n  useEffect(() => {\n    if (!frameRef || !frameRef.contentDocument) return;\n    const win = frameRef.contentWindow;\n    if (!win) return;\n    const mountNode2 = getMountNode(frameRef);\n    if (!mountNode2) return;\n    const exec = () => {\n      const rootEl = frameRef.contentDocument?.documentElement;\n      if (!rootEl) return;\n      frameRef.style.setProperty(\"--width\", `${mountNode2.scrollWidth}px`);\n      frameRef.style.setProperty(\"--height\", `${mountNode2.scrollHeight}px`);\n    };\n    const resizeObserver = new win.ResizeObserver(exec);\n    exec();\n    if (frameRef.contentDocument) {\n      resizeObserver.observe(mountNode2);\n    }\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [frameRef]);\n  return /* @__PURE__ */jsx(EnvironmentProvider, {\n    value: () => frameRef?.contentDocument ?? document,\n    children: /* @__PURE__ */jsxs(\"iframe\", {\n      title: `frame:${useId()}`,\n      ref: composeRefs(ref, setFrameRef),\n      ...rest,\n      children: [mountNode ? createPortal(/* @__PURE__ */jsx(FrameContent, {\n        onMount,\n        onUnmount,\n        children\n      }), mountNode) : null, head && frameRef ? createPortal(head, frameRef.contentDocument.head) : null]\n    })\n  });\n});\nexport { Frame };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
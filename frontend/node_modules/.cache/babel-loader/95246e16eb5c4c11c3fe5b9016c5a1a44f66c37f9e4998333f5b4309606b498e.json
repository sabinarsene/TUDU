{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx } from 'react/jsx-runtime';\nimport { Toaster as Toaster$1, Toast, useToastContext } from '@ark-ui/react/toast';\nexport { createToaster } from '@ark-ui/react/toast';\nimport { forwardRef } from 'react';\nimport { createSlotRecipeContext } from '../../styled-system/create-slot-recipe-context.js';\nimport { chakra } from '../../styled-system/factory.js';\nimport { CloseIcon, WarningIcon, CheckCircleIcon } from '../icons.js';\nconst {\n  withProvider,\n  withContext,\n  useStyles: useToastStyles\n} = createSlotRecipeContext({\n  key: \"toast\"\n});\nconst Toaster = chakra(Toaster$1, {}, {\n  forwardAsChild: true\n});\nconst ToastRoot = withProvider(Toast.Root, \"root\", {\n  forwardAsChild: true\n});\nconst ToastCloseTrigger = withContext(Toast.CloseTrigger, \"closeTrigger\", {\n  forwardAsChild: true,\n  defaultProps: {\n    children: /* @__PURE__ */jsx(CloseIcon, {})\n  }\n});\nconst ToastTitle = withContext(Toast.Title, \"title\", {\n  forwardAsChild: true\n});\nconst ToastDescription = withContext(Toast.Description, \"description\", {\n  forwardAsChild: true\n});\nconst ToastActionTrigger = withContext(Toast.ActionTrigger, \"actionTrigger\", {\n  forwardAsChild: true\n});\nconst iconMap = {\n  warning: WarningIcon,\n  success: CheckCircleIcon,\n  error: WarningIcon\n};\nconst ToastIndicator = forwardRef(function ToastIndicator2(props, ref) {\n  const api = useToastContext();\n  const styles = useToastStyles();\n  const Component = iconMap[api.type];\n  if (!Component) return null;\n  return /* @__PURE__ */jsx(Component, {\n    ref,\n    ...props,\n    css: [styles.indicator, props.css]\n  });\n});\nexport { ToastActionTrigger, ToastCloseTrigger, ToastDescription, ToastIndicator, ToastRoot, ToastTitle, Toaster, useToastStyles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
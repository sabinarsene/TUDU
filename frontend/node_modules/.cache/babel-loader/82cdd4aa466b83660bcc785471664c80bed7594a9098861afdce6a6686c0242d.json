{"ast":null,"code":"'use client';\n\nimport { getWindow } from '@zag-js/dom-query';\nimport { useRef, useId, useMemo } from 'react';\nimport { useSafeLayoutEffect } from '../../utils/use-safe-layout-effect.js';\nimport { parts } from './fieldset.anatomy.js';\nconst useFieldset = props => {\n  const {\n    disabled = false,\n    invalid = false\n  } = props;\n  const hasErrorText = useRef(false);\n  const hasHelperText = useRef(false);\n  const id = props.id ?? useId();\n  const rootRef = useRef(null);\n  const errorTextId = `fieldset::${id}::error-text`;\n  const helperTextId = `fieldset::${id}::helper-text`;\n  useSafeLayoutEffect(() => {\n    const rootNode = rootRef.current;\n    if (!rootNode) return;\n    const win = getWindow(rootNode);\n    const doc = win.document;\n    const checkTextElements = () => {\n      hasErrorText.current = !!doc.getElementById(errorTextId);\n      hasHelperText.current = !!doc.getElementById(helperTextId);\n    };\n    checkTextElements();\n    const observer = new win.MutationObserver(checkTextElements);\n    observer.observe(rootNode, {\n      childList: true,\n      subtree: true\n    });\n    return () => observer.disconnect();\n  }, [errorTextId, helperTextId]);\n  const labelIds = useMemo(() => {\n    const ids = [];\n    if (hasErrorText.current && invalid) ids.push(errorTextId);\n    if (hasHelperText.current) ids.push(helperTextId);\n    return ids.join(\" \") || void 0;\n  }, [invalid, errorTextId, helperTextId]);\n  const getRootProps = useMemo(() => () => ({\n    ...parts.root.attrs,\n    ref: rootRef,\n    disabled,\n    \"data-disabled\": disabled ? \"true\" : void 0,\n    \"data-invalid\": invalid ? \"true\" : void 0,\n    \"aria-describedby\": labelIds\n  }), [disabled, invalid, labelIds]);\n  const getLegendProps = useMemo(() => () => ({\n    ...parts.legend.attrs,\n    \"data-disabled\": disabled ? \"true\" : void 0,\n    \"data-invalid\": invalid ? \"true\" : void 0\n  }), [disabled, invalid]);\n  const getHelperTextProps = useMemo(() => () => ({\n    id: helperTextId,\n    ...parts.helperText.attrs\n  }), [helperTextId]);\n  const getErrorTextProps = useMemo(() => () => ({\n    id: errorTextId,\n    ...parts.errorText.attrs,\n    \"aria-live\": \"polite\"\n  }), [errorTextId]);\n  return {\n    refs: {\n      rootRef\n    },\n    disabled,\n    invalid,\n    getRootProps,\n    getLegendProps,\n    getHelperTextProps,\n    getErrorTextProps\n  };\n};\nexport { useFieldset };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
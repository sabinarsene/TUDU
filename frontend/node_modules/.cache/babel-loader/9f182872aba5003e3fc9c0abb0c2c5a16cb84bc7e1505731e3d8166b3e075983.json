{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef, Fragment } from 'react';\nimport { createContext } from '../../create-context.js';\nimport { createSlotRecipeContext } from '../../styled-system/create-slot-recipe-context.js';\nimport { chakra } from '../../styled-system/factory.js';\nimport { InfoIcon, WarningIcon, CheckCircleIcon } from '../icons.js';\nconst [AlertStatusProvider, useAlertStatusContext] = createContext({\n  name: \"AlertStatusContext\",\n  hookName: \"useAlertStatusContext\",\n  providerName: \"<Alert />\"\n});\nconst {\n  withProvider,\n  withContext,\n  useStyles: useAlertStyles,\n  PropsProvider\n} = createSlotRecipeContext({\n  key: \"alert\"\n});\nconst AlertRoot = withProvider(\"div\", \"root\", {\n  forwardAsChild: true,\n  wrapElement(element, props) {\n    return (\n      // @ts-ignore fix later\n      /* @__PURE__ */\n      jsx(AlertStatusProvider, {\n        value: {\n          status: props.status || \"info\"\n        },\n        children: element\n      })\n    );\n  }\n});\nconst AlertPropsProvider = PropsProvider;\nconst AlertTitle = withContext(\"div\", \"title\");\nconst AlertDescription = withContext(\"div\", \"description\");\nconst AlertContent = withContext(\"div\", \"content\");\nconst iconMap = {\n  info: InfoIcon,\n  warning: WarningIcon,\n  success: CheckCircleIcon,\n  error: WarningIcon,\n  neutral: InfoIcon\n};\nconst AlertIndicator = forwardRef(function AlertIndicator2(props, ref) {\n  const api = useAlertStatusContext();\n  const styles = useAlertStyles();\n  const Icon = typeof api.status === \"string\" ? iconMap[api.status] : Fragment;\n  const {\n    children = /* @__PURE__ */jsx(Icon, {}),\n    ...rest\n  } = props;\n  return /* @__PURE__ */jsx(chakra.span, {\n    ref,\n    ...rest,\n    css: [styles.indicator, props.css],\n    children\n  });\n});\nexport { AlertContent, AlertDescription, AlertIndicator, AlertPropsProvider, AlertRoot, AlertStatusProvider, AlertTitle, useAlertStatusContext, useAlertStyles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
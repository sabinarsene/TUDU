{"ast":null,"code":"import { sliderAnatomy } from '@chakra-ui/anatomy';\nimport { createMultiStyleConfigHelpers, cssVar, defineStyle, calc } from '@chakra-ui/styled-system';\nimport { orient } from '@chakra-ui/theme-tools';\nconst {\n  defineMultiStyleConfig,\n  definePartsStyle\n} = createMultiStyleConfigHelpers(sliderAnatomy.keys);\nconst $thumbSize = cssVar(\"slider-thumb-size\");\nconst $trackSize = cssVar(\"slider-track-size\");\nconst $bg = cssVar(\"slider-bg\");\nconst baseStyleContainer = defineStyle(props => {\n  const {\n    orientation\n  } = props;\n  return {\n    display: \"inline-block\",\n    position: \"relative\",\n    cursor: \"pointer\",\n    _disabled: {\n      opacity: 0.6,\n      cursor: \"default\",\n      pointerEvents: \"none\"\n    },\n    ...orient({\n      orientation,\n      vertical: {\n        h: \"100%\",\n        px: calc($thumbSize.reference).divide(2).toString()\n      },\n      horizontal: {\n        w: \"100%\",\n        py: calc($thumbSize.reference).divide(2).toString()\n      }\n    })\n  };\n});\nconst baseStyleTrack = defineStyle(props => {\n  const orientationStyles = orient({\n    orientation: props.orientation,\n    horizontal: {\n      h: $trackSize.reference\n    },\n    vertical: {\n      w: $trackSize.reference\n    }\n  });\n  return {\n    ...orientationStyles,\n    overflow: \"hidden\",\n    borderRadius: \"sm\",\n    [$bg.variable]: \"colors.gray.200\",\n    _dark: {\n      [$bg.variable]: \"colors.whiteAlpha.200\"\n    },\n    _disabled: {\n      [$bg.variable]: \"colors.gray.300\",\n      _dark: {\n        [$bg.variable]: \"colors.whiteAlpha.300\"\n      }\n    },\n    bg: $bg.reference\n  };\n});\nconst baseStyleThumb = defineStyle(props => {\n  const {\n    orientation\n  } = props;\n  const orientationStyle = orient({\n    orientation,\n    vertical: {\n      left: \"50%\",\n      transform: `translateX(-50%)`,\n      _active: {\n        transform: `translateX(-50%) scale(1.15)`\n      }\n    },\n    horizontal: {\n      top: \"50%\",\n      transform: `translateY(-50%)`,\n      _active: {\n        transform: `translateY(-50%) scale(1.15)`\n      }\n    }\n  });\n  return {\n    ...orientationStyle,\n    w: $thumbSize.reference,\n    h: $thumbSize.reference,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    outline: 0,\n    zIndex: 1,\n    borderRadius: \"full\",\n    bg: \"white\",\n    boxShadow: \"base\",\n    border: \"1px solid\",\n    borderColor: \"transparent\",\n    transitionProperty: \"transform\",\n    transitionDuration: \"normal\",\n    _focusVisible: {\n      boxShadow: \"outline\"\n    },\n    _disabled: {\n      bg: \"gray.300\"\n    }\n  };\n});\nconst baseStyleFilledTrack = defineStyle(props => {\n  const {\n    colorScheme: c\n  } = props;\n  return {\n    width: \"inherit\",\n    height: \"inherit\",\n    [$bg.variable]: `colors.${c}.500`,\n    _dark: {\n      [$bg.variable]: `colors.${c}.200`\n    },\n    bg: $bg.reference\n  };\n});\nconst baseStyle = definePartsStyle(props => ({\n  container: baseStyleContainer(props),\n  track: baseStyleTrack(props),\n  thumb: baseStyleThumb(props),\n  filledTrack: baseStyleFilledTrack(props)\n}));\nconst sizeLg = definePartsStyle({\n  container: {\n    [$thumbSize.variable]: `sizes.4`,\n    [$trackSize.variable]: `sizes.1`\n  }\n});\nconst sizeMd = definePartsStyle({\n  container: {\n    [$thumbSize.variable]: `sizes.3.5`,\n    [$trackSize.variable]: `sizes.1`\n  }\n});\nconst sizeSm = definePartsStyle({\n  container: {\n    [$thumbSize.variable]: `sizes.2.5`,\n    [$trackSize.variable]: `sizes.0.5`\n  }\n});\nconst sizes = {\n  lg: sizeLg,\n  md: sizeMd,\n  sm: sizeSm\n};\nconst sliderTheme = defineMultiStyleConfig({\n  baseStyle,\n  sizes,\n  defaultProps: {\n    size: \"md\",\n    colorScheme: \"blue\"\n  }\n});\nexport { sliderTheme };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { focusOn } from './commands';\nimport { focusSolver } from './focusSolver';\nvar guardCount = 0;\nvar lockDisabled = false;\n/**\r\n * The main functionality of the focus-lock package\r\n *\r\n * Contains focus at a given node.\r\n * The last focused element will help to determine which element(first or last) should be focused.\r\n * The found element will be focused.\r\n *\r\n * This is one time action (move), not a persistent focus-lock\r\n *\r\n * HTML markers (see {@link import('./constants').FOCUS_AUTO} constants) can control autofocus\r\n * @see {@link focusSolver} for the same functionality without autofocus\r\n */\nexport var moveFocusInside = function (topNode, lastNode, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var focusable = focusSolver(topNode, lastNode);\n  // global local side effect to countain recursive lock activation and resolve focus-fighting\n  if (lockDisabled) {\n    return;\n  }\n  if (focusable) {\n    /** +FOCUS-FIGHTING prevention **/\n    if (guardCount > 2) {\n      // we have recursive entered back the lock activation\n      console.error('FocusLock: focus-fighting detected. Only one focus management system could be active. ' + 'See https://github.com/theKashey/focus-lock/#focus-fighting');\n      lockDisabled = true;\n      setTimeout(function () {\n        lockDisabled = false;\n      }, 1);\n      return;\n    }\n    guardCount++;\n    focusOn(focusable.node, options.focusOptions);\n    guardCount--;\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
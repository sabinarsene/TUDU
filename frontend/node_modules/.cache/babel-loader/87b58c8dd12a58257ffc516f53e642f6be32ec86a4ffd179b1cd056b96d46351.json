{"ast":null,"code":"import { contains, raf, addDomEvent, getDocument, waitForElements, setStyle, getEventTarget, isHTMLElement } from '@zag-js/dom-query';\nimport { trackInteractOutside } from '@zag-js/interact-outside';\nimport { isFunction, warn } from '@zag-js/utils';\n\n// src/dismissable-layer.ts\nfunction trackEscapeKeydown(node, fn) {\n  const handleKeyDown = event => {\n    if (event.key !== \"Escape\") return;\n    if (event.isComposing) return;\n    fn?.(event);\n  };\n  return addDomEvent(getDocument(node), \"keydown\", handleKeyDown, {\n    capture: true\n  });\n}\nvar layerStack = {\n  layers: [],\n  branches: [],\n  count() {\n    return this.layers.length;\n  },\n  pointerBlockingLayers() {\n    return this.layers.filter(layer => layer.pointerBlocking);\n  },\n  topMostPointerBlockingLayer() {\n    return [...this.pointerBlockingLayers()].slice(-1)[0];\n  },\n  hasPointerBlockingLayer() {\n    return this.pointerBlockingLayers().length > 0;\n  },\n  isBelowPointerBlockingLayer(node) {\n    const index = this.indexOf(node);\n    const highestBlockingIndex = this.topMostPointerBlockingLayer() ? this.indexOf(this.topMostPointerBlockingLayer()?.node) : -1;\n    return index < highestBlockingIndex;\n  },\n  isTopMost(node) {\n    const layer = this.layers[this.count() - 1];\n    return layer?.node === node;\n  },\n  getNestedLayers(node) {\n    return Array.from(this.layers).slice(this.indexOf(node) + 1);\n  },\n  isInNestedLayer(node, target) {\n    return this.getNestedLayers(node).some(layer => contains(layer.node, target));\n  },\n  isInBranch(target) {\n    return Array.from(this.branches).some(branch => contains(branch, target));\n  },\n  add(layer) {\n    const num = this.layers.push(layer);\n    layer.node.style.setProperty(\"--layer-index\", `${num}`);\n  },\n  addBranch(node) {\n    this.branches.push(node);\n  },\n  remove(node) {\n    const index = this.indexOf(node);\n    if (index < 0) return;\n    if (index < this.count() - 1) {\n      const _layers = this.getNestedLayers(node);\n      _layers.forEach(layer => layer.dismiss());\n    }\n    this.layers.splice(index, 1);\n    node.style.removeProperty(\"--layer-index\");\n  },\n  removeBranch(node) {\n    const index = this.branches.indexOf(node);\n    if (index >= 0) this.branches.splice(index, 1);\n  },\n  indexOf(node) {\n    return this.layers.findIndex(layer => layer.node === node);\n  },\n  dismiss(node) {\n    this.layers[this.indexOf(node)]?.dismiss();\n  },\n  clear() {\n    this.remove(this.layers[0].node);\n  }\n};\nvar originalBodyPointerEvents;\nfunction assignPointerEventToLayers() {\n  layerStack.layers.forEach(({\n    node\n  }) => {\n    node.style.pointerEvents = layerStack.isBelowPointerBlockingLayer(node) ? \"none\" : \"auto\";\n  });\n}\nfunction clearPointerEvent(node) {\n  node.style.pointerEvents = \"\";\n}\nfunction disablePointerEventsOutside(node, persistentElements) {\n  const doc = getDocument(node);\n  const cleanups = [];\n  if (layerStack.hasPointerBlockingLayer() && !doc.body.hasAttribute(\"data-inert\")) {\n    originalBodyPointerEvents = document.body.style.pointerEvents;\n    queueMicrotask(() => {\n      doc.body.style.pointerEvents = \"none\";\n      doc.body.setAttribute(\"data-inert\", \"\");\n    });\n  }\n  if (persistentElements) {\n    const persistedCleanup = waitForElements(persistentElements, el => {\n      cleanups.push(setStyle(el, {\n        pointerEvents: \"auto\"\n      }));\n    });\n    cleanups.push(persistedCleanup);\n  }\n  return () => {\n    if (layerStack.hasPointerBlockingLayer()) return;\n    queueMicrotask(() => {\n      doc.body.style.pointerEvents = originalBodyPointerEvents;\n      doc.body.removeAttribute(\"data-inert\");\n      if (doc.body.style.length === 0) doc.body.removeAttribute(\"style\");\n    });\n    cleanups.forEach(fn => fn());\n  };\n}\n\n// src/dismissable-layer.ts\nfunction trackDismissableElementImpl(node, options) {\n  if (!node) {\n    warn(\"[@zag-js/dismissable] node is `null` or `undefined`\");\n    return;\n  }\n  const {\n    onDismiss,\n    pointerBlocking,\n    exclude: excludeContainers,\n    debug\n  } = options;\n  const layer = {\n    dismiss: onDismiss,\n    node,\n    pointerBlocking\n  };\n  layerStack.add(layer);\n  assignPointerEventToLayers();\n  function onPointerDownOutside(event) {\n    const target = getEventTarget(event.detail.originalEvent);\n    if (layerStack.isBelowPointerBlockingLayer(node) || layerStack.isInBranch(target)) return;\n    options.onPointerDownOutside?.(event);\n    options.onInteractOutside?.(event);\n    if (event.defaultPrevented) return;\n    if (debug) {\n      console.log(\"onPointerDownOutside:\", event.detail.originalEvent);\n    }\n    onDismiss?.();\n  }\n  function onFocusOutside(event) {\n    const target = getEventTarget(event.detail.originalEvent);\n    if (layerStack.isInBranch(target)) return;\n    options.onFocusOutside?.(event);\n    options.onInteractOutside?.(event);\n    if (event.defaultPrevented) return;\n    if (debug) {\n      console.log(\"onFocusOutside:\", event.detail.originalEvent);\n    }\n    onDismiss?.();\n  }\n  function onEscapeKeyDown(event) {\n    if (!layerStack.isTopMost(node)) return;\n    options.onEscapeKeyDown?.(event);\n    if (!event.defaultPrevented && onDismiss) {\n      event.preventDefault();\n      onDismiss();\n    }\n  }\n  function exclude(target) {\n    if (!node) return false;\n    const containers = typeof excludeContainers === \"function\" ? excludeContainers() : excludeContainers;\n    const _containers = Array.isArray(containers) ? containers : [containers];\n    const persistentElements = options.persistentElements?.map(fn => fn()).filter(isHTMLElement);\n    if (persistentElements) _containers.push(...persistentElements);\n    return _containers.some(node2 => contains(node2, target)) || layerStack.isInNestedLayer(node, target);\n  }\n  const cleanups = [pointerBlocking ? disablePointerEventsOutside(node, options.persistentElements) : void 0, trackEscapeKeydown(node, onEscapeKeyDown), trackInteractOutside(node, {\n    exclude,\n    onFocusOutside,\n    onPointerDownOutside,\n    defer: options.defer\n  })];\n  return () => {\n    layerStack.remove(node);\n    assignPointerEventToLayers();\n    clearPointerEvent(node);\n    cleanups.forEach(fn => fn?.());\n  };\n}\nfunction trackDismissableElement(nodeOrFn, options) {\n  const {\n    defer\n  } = options;\n  const func = defer ? raf : v => v();\n  const cleanups = [];\n  cleanups.push(func(() => {\n    const node = isFunction(nodeOrFn) ? nodeOrFn() : nodeOrFn;\n    cleanups.push(trackDismissableElementImpl(node, options));\n  }));\n  return () => {\n    cleanups.forEach(fn => fn?.());\n  };\n}\nfunction trackDismissableBranch(nodeOrFn, options = {}) {\n  const {\n    defer\n  } = options;\n  const func = defer ? raf : v => v();\n  const cleanups = [];\n  cleanups.push(func(() => {\n    const node = isFunction(nodeOrFn) ? nodeOrFn() : nodeOrFn;\n    if (!node) {\n      warn(\"[@zag-js/dismissable] branch node is `null` or `undefined`\");\n      return;\n    }\n    layerStack.addBranch(node);\n    cleanups.push(() => {\n      layerStack.removeBranch(node);\n    });\n  }));\n  return () => {\n    cleanups.forEach(fn => fn?.());\n  };\n}\nexport { trackDismissableBranch, trackDismissableElement };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
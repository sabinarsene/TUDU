{"ast":null,"code":"const state = {\n  open: (str, post) => `${str}[data-open], ${str}[open], ${str}[data-state=open] ${post}`,\n  closed: (str, post) => `${str}[data-closed], ${str}[data-state=closed] ${post}`,\n  hover: (str, post) => `${str}:hover ${post}, ${str}[data-hover] ${post}`,\n  focus: (str, post) => `${str}:focus ${post}, ${str}[data-focus] ${post}`,\n  focusVisible: (str, post) => `${str}:focus-visible ${post}`,\n  focusWithin: (str, post) => `${str}:focus-within ${post}`,\n  active: (str, post) => `${str}:active ${post}, ${str}[data-active] ${post}`,\n  disabled: (str, post) => `${str}:disabled ${post}, ${str}[data-disabled] ${post}`,\n  invalid: (str, post) => `${str}:invalid ${post}, ${str}[data-invalid] ${post}`,\n  checked: (str, post) => `${str}:checked ${post}, ${str}[data-checked] ${post}`,\n  indeterminate: (str, post) => `${str}:indeterminate ${post}, ${str}[aria-checked=mixed] ${post}, ${str}[data-indeterminate] ${post}`,\n  readOnly: (str, post) => `${str}:read-only ${post}, ${str}[readonly] ${post}, ${str}[data-read-only] ${post}`,\n  expanded: (str, post) => `${str}:read-only ${post}, ${str}[aria-expanded=true] ${post}, ${str}[data-expanded] ${post}`,\n  placeholderShown: (str, post) => `${str}:placeholder-shown ${post}`\n};\nconst toGroup = fn => merge(v => fn(v, \"&\"), \"[role=group]\", \"[data-group]\", \".group\");\nconst toPeer = fn => merge(v => fn(v, \"~ &\"), \"[data-peer]\", \".peer\");\nconst merge = (fn, ...selectors) => selectors.map(fn).join(\", \");\nconst pseudoSelectors = {\n  /**\r\n   * Styles for CSS selector `&:hover`\r\n   */\n  _hover: \"&:hover, &[data-hover]\",\n  /**\r\n   * Styles for CSS Selector `&:active`\r\n   */\n  _active: \"&:active, &[data-active]\",\n  /**\r\n   * Styles for CSS selector `&:focus`\r\n   *\r\n   */\n  _focus: \"&:focus, &[data-focus]\",\n  /**\r\n   * Styles for the highlighted state.\r\n   */\n  _highlighted: \"&[data-highlighted]\",\n  /**\r\n   * Styles to apply when a child of this element has received focus\r\n   * - CSS Selector `&:focus-within`\r\n   */\n  _focusWithin: \"&:focus-within, &[data-focus-within]\",\n  /**\r\n   * Styles to apply when this element has received focus via tabbing\r\n   * - CSS Selector `&:focus-visible`\r\n   */\n  _focusVisible: \"&:focus-visible, &[data-focus-visible]\",\n  /**\r\n   * Styles to apply when this element is disabled. The passed styles are applied to these CSS selectors:\r\n   * - `&[aria-disabled=true]`\r\n   * - `&:disabled`\r\n   * - `&[data-disabled]`\r\n   * - `&[disabled]`\r\n   */\n  _disabled: \"&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]\",\n  /**\r\n   * Styles for CSS Selector `&:readonly`\r\n   */\n  _readOnly: \"&[aria-readonly=true], &[readonly], &[data-readonly]\",\n  /**\r\n   * Styles for CSS selector `&::before`\r\n   *\r\n   * NOTE:When using this, ensure the `content` is wrapped in a backtick.\r\n   * @example\r\n   * ```jsx\r\n   * <Box _before={{content:`\"\"` }}/>\r\n   * ```\r\n   */\n  _before: \"&::before\",\n  /**\r\n   * Styles for CSS selector `&::after`\r\n   *\r\n   * NOTE:When using this, ensure the `content` is wrapped in a backtick.\r\n   * @example\r\n   * ```jsx\r\n   * <Box _after={{content:`\"\"` }}/>\r\n   * ```\r\n   */\n  _after: \"&::after\",\n  /**\r\n   * Styles for CSS selector `&:empty`\r\n   */\n  _empty: \"&:empty, &[data-empty]\",\n  /**\r\n   * Styles to apply when the ARIA attribute `aria-expanded` is `true`\r\n   * - CSS selector `&[aria-expanded=true]`\r\n   */\n  _expanded: \"&[aria-expanded=true], &[data-expanded], &[data-state=expanded]\",\n  /**\r\n   * Styles to apply when the ARIA attribute `aria-checked` is `true`\r\n   * - CSS selector `&[aria-checked=true]`\r\n   */\n  _checked: \"&[aria-checked=true], &[data-checked], &[data-state=checked]\",\n  /**\r\n   * Styles to apply when the ARIA attribute `aria-grabbed` is `true`\r\n   * - CSS selector `&[aria-grabbed=true]`\r\n   */\n  _grabbed: \"&[aria-grabbed=true], &[data-grabbed]\",\n  /**\r\n   * Styles for CSS Selector `&[aria-pressed=true]`\r\n   * Typically used to style the current \"pressed\" state of toggle buttons\r\n   */\n  _pressed: \"&[aria-pressed=true], &[data-pressed]\",\n  /**\r\n   * Styles to apply when the ARIA attribute `aria-invalid` is `true`\r\n   * - CSS selector `&[aria-invalid=true]`\r\n   */\n  _invalid: \"&[aria-invalid=true], &[data-invalid]\",\n  /**\r\n   * Styles for the valid state\r\n   * - CSS selector `&[data-valid], &[data-state=valid]`\r\n   */\n  _valid: \"&[data-valid], &[data-state=valid]\",\n  /**\r\n   * Styles for CSS Selector `&[aria-busy=true]` or `&[data-loading=true]`.\r\n   * Useful for styling loading states\r\n   */\n  _loading: \"&[data-loading], &[aria-busy=true]\",\n  /**\r\n   * Styles to apply when the ARIA attribute `aria-selected` is `true`\r\n   *\r\n   * - CSS selector `&[aria-selected=true]`\r\n   */\n  _selected: \"&[aria-selected=true], &[data-selected]\",\n  /**\r\n   * Styles for CSS Selector `[hidden=true]`\r\n   */\n  _hidden: \"&[hidden], &[data-hidden]\",\n  /**\r\n   * Styles for CSS Selector `&:-webkit-autofill`\r\n   */\n  _autofill: \"&:-webkit-autofill\",\n  /**\r\n   * Styles for CSS Selector `&:nth-child(even)`\r\n   */\n  _even: \"&:nth-of-type(even)\",\n  /**\r\n   * Styles for CSS Selector `&:nth-child(odd)`\r\n   */\n  _odd: \"&:nth-of-type(odd)\",\n  /**\r\n   * Styles for CSS Selector `&:first-of-type`\r\n   */\n  _first: \"&:first-of-type\",\n  /**\r\n   * Styles for CSS selector `&::first-letter`\r\n   *\r\n   * NOTE: This selector is only applied for block-level elements and not preceded by an image or table.\r\n   * @example\r\n   * ```jsx\r\n   * <Text _firstLetter={{ textDecoration: 'underline' }}>Once upon a time</Text>\r\n   * ```\r\n   */\n  _firstLetter: \"&::first-letter\",\n  /**\r\n   * Styles for CSS Selector `&:last-of-type`\r\n   */\n  _last: \"&:last-of-type\",\n  /**\r\n   * Styles for CSS Selector `&:not(:first-of-type)`\r\n   */\n  _notFirst: \"&:not(:first-of-type)\",\n  /**\r\n   * Styles for CSS Selector `&:not(:last-of-type)`\r\n   */\n  _notLast: \"&:not(:last-of-type)\",\n  /**\r\n   * Styles for CSS Selector `&:visited`\r\n   */\n  _visited: \"&:visited\",\n  /**\r\n   * Used to style the active link in a navigation\r\n   * Styles for CSS Selector `&[aria-current=page]`\r\n   */\n  _activeLink: \"&[aria-current=page]\",\n  /**\r\n   * Used to style the current step within a process\r\n   * Styles for CSS Selector `&[aria-current=step]`\r\n   */\n  _activeStep: \"&[aria-current=step]\",\n  /**\r\n   * Styles to apply when the ARIA attribute `aria-checked` is `mixed`\r\n   * - CSS selector `&[aria-checked=mixed]`\r\n   */\n  _indeterminate: \"&:indeterminate, &[aria-checked=mixed], &[data-indeterminate], &[data-state=indeterminate]\",\n  /**\r\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is open\r\n   */\n  _groupOpen: toGroup(state.open),\n  /**\r\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is closed\r\n   */\n  _groupClosed: toGroup(state.closed),\n  /**\r\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is hovered\r\n   */\n  _groupHover: toGroup(state.hover),\n  /**\r\n   * Styles to apply when a sibling element with `.peer` or `data-peer` is hovered\r\n   */\n  _peerHover: toPeer(state.hover),\n  /**\r\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is focused\r\n   */\n  _groupFocus: toGroup(state.focus),\n  /**\r\n   * Styles to apply when a sibling element with `.peer` or `data-peer` is focused\r\n   */\n  _peerFocus: toPeer(state.focus),\n  /**\r\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` has visible focus\r\n   */\n  _groupFocusVisible: toGroup(state.focusVisible),\n  /**\r\n   * Styles to apply when a sibling element with `.peer`or `data-peer` has visible focus\r\n   */\n  _peerFocusVisible: toPeer(state.focusVisible),\n  /**\r\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is active\r\n   */\n  _groupActive: toGroup(state.active),\n  /**\r\n   * Styles to apply when a sibling element with `.peer` or `data-peer` is active\r\n   */\n  _peerActive: toPeer(state.active),\n  /**\r\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is disabled\r\n   */\n  _groupDisabled: toGroup(state.disabled),\n  /**\r\n   *  Styles to apply when a sibling element with `.peer` or `data-peer` is disabled\r\n   */\n  _peerDisabled: toPeer(state.disabled),\n  /**\r\n   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` is invalid\r\n   */\n  _groupInvalid: toGroup(state.invalid),\n  /**\r\n   *  Styles to apply when a sibling element with `.peer` or `data-peer` is invalid\r\n   */\n  _peerInvalid: toPeer(state.invalid),\n  /**\r\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is checked\r\n   */\n  _groupChecked: toGroup(state.checked),\n  /**\r\n   * Styles to apply when a sibling element with `.peer` or `data-peer` is checked\r\n   */\n  _peerChecked: toPeer(state.checked),\n  /**\r\n   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` has focus within\r\n   */\n  _groupFocusWithin: toGroup(state.focusWithin),\n  /**\r\n   *  Styles to apply when a sibling element with `.peer` or `data-peer` has focus within\r\n   */\n  _peerFocusWithin: toPeer(state.focusWithin),\n  /**\r\n   * Styles to apply when a sibling element with `.peer` or `data-peer` has placeholder shown\r\n   */\n  _peerPlaceholderShown: toPeer(state.placeholderShown),\n  /**\r\n   * Styles for CSS Selector `&::placeholder`.\r\n   */\n  _placeholder: \"&::placeholder, &[data-placeholder]\",\n  /**\r\n   * Styles for CSS Selector `&:placeholder-shown`.\r\n   */\n  _placeholderShown: \"&:placeholder-shown, &[data-placeholder-shown]\",\n  /**\r\n   * Styles for CSS Selector `&:fullscreen`.\r\n   */\n  _fullScreen: \"&:fullscreen, &[data-fullscreen]\",\n  /**\r\n   * Styles for CSS Selector `&::selection`\r\n   */\n  _selection: \"&::selection\",\n  /**\r\n   * Styles for CSS Selector `[dir=rtl] &`\r\n   * It is applied when a parent element or this element has `dir=\"rtl\"`\r\n   */\n  _rtl: \"[dir=rtl] &, &[dir=rtl]\",\n  /**\r\n   * Styles for CSS Selector `[dir=ltr] &`\r\n   * It is applied when a parent element or this element has `dir=\"ltr\"`\r\n   */\n  _ltr: \"[dir=ltr] &, &[dir=ltr]\",\n  /**\r\n   * Styles for CSS Selector `@media (prefers-color-scheme: dark)`\r\n   * It is used when the user has requested the system use a light or dark color theme.\r\n   */\n  _mediaDark: \"@media (prefers-color-scheme: dark)\",\n  /**\r\n   * Styles for CSS Selector `@media (prefers-reduced-motion: reduce)`\r\n   * It is used when the user has requested the system to reduce the amount of animations.\r\n   */\n  _mediaReduceMotion: \"@media (prefers-reduced-motion: reduce)\",\n  /**\r\n   * Styles for when `data-theme` is applied to any parent of\r\n   * this component or element.\r\n   */\n  _dark: \".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]\",\n  /**\r\n   * Styles for when `data-theme` is applied to any parent of\r\n   * this component or element.\r\n   */\n  _light: \".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]\",\n  /**\r\n   * Styles for the CSS Selector `&[data-orientation=horizontal]`\r\n   */\n  _horizontal: \"&[data-orientation=horizontal]\",\n  /**\r\n   * Styles for the CSS Selector `&[data-orientation=vertical]`\r\n   */\n  _vertical: \"&[data-orientation=vertical]\",\n  /**\r\n   * Styles for the CSS Selector `&[data-open], &[open], &[data-state=open]`\r\n   */\n  _open: \"&[data-open], &[open], &[data-state=open]\",\n  /**\r\n   * Styles for the CSS Selector `&[data-closed], &[data-state=closed]`\r\n   */\n  _closed: \"&[data-closed], &[data-state=closed]\",\n  /**\r\n   * Styles for the CSS Selector `&[data-complete]`\r\n   */\n  _complete: \"&[data-complete]\",\n  /**\r\n   * Styles for the CSS Selector `&[data-incomplete]`\r\n   */\n  _incomplete: \"&[data-incomplete]\",\n  /**\r\n   * Styles for the CSS Selector `&[data-current]`\r\n   */\n  _current: \"&[data-current]\"\n};\nconst pseudoPropNames = Object.keys(pseudoSelectors);\nexport { pseudoPropNames, pseudoSelectors };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { omitThemingProps } from '@chakra-ui/styled-system';\nimport { createContext, cx, getValidChildren, compact } from '@chakra-ui/utils';\nimport { cloneElement } from 'react';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { useMultiStyleConfig } from '../system/use-style-config.mjs';\nimport { chakra } from '../system/factory.mjs';\nconst [InputGroupStylesProvider, useInputGroupStyles] = createContext({\n  name: `InputGroupStylesContext`,\n  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<InputGroup />\" `\n});\nconst InputGroup = forwardRef(function InputGroup2(props, ref) {\n  const styles = useMultiStyleConfig(\"Input\", props);\n  const {\n    children,\n    className,\n    ...rest\n  } = omitThemingProps(props);\n  const _className = cx(\"chakra-input__group\", className);\n  const groupStyles = {};\n  const validChildren = getValidChildren(children);\n  const input = styles.field;\n  validChildren.forEach(child => {\n    if (!styles) return;\n    if (input && child.type.id === \"InputLeftElement\") {\n      groupStyles.paddingStart = input.height ?? input.h;\n    }\n    if (input && child.type.id === \"InputRightElement\") {\n      groupStyles.paddingEnd = input.height ?? input.h;\n    }\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderEndRadius = 0;\n    }\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderStartRadius = 0;\n    }\n  });\n  const clones = validChildren.map(child => {\n    const theming = compact({\n      size: child.props?.size || props.size,\n      variant: child.props?.variant || props.variant\n    });\n    return child.type.id !== \"Input\" ? cloneElement(child, theming) : cloneElement(child, Object.assign(theming, groupStyles, child.props));\n  });\n  return /* @__PURE__ */jsx(chakra.div, {\n    className: _className,\n    ref,\n    __css: {\n      width: \"100%\",\n      display: \"flex\",\n      position: \"relative\",\n      // Parts of inputs override z-index to ensure that they stack correctly on each other\n      // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n      isolation: \"isolate\",\n      ...styles.group\n    },\n    \"data-group\": true,\n    ...rest,\n    children: /* @__PURE__ */jsx(InputGroupStylesProvider, {\n      value: styles,\n      children: clones\n    })\n  });\n});\nInputGroup.displayName = \"InputGroup\";\nexport { InputGroup, useInputGroupStyles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { isBrowser } from '@chakra-ui/utils';\nimport { __unsafe_useEmotionCache } from '@emotion/react';\nimport { useLayoutEffect, useEffect, useState, useMemo, useCallback } from 'react';\nimport { ColorModeContext } from './color-mode-context.mjs';\nimport { getColorModeUtils } from './color-mode.utils.mjs';\nimport { localStorageManager } from './storage-manager.mjs';\nconst noop = () => {};\nconst useSafeLayoutEffect = isBrowser() ? useLayoutEffect : useEffect;\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\nconst ColorModeProvider = function ColorModeProvider2(props) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange\n    } = {},\n    colorModeManager = localStorageManager\n  } = props;\n  const cache = __unsafe_useEmotionCache();\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  const [colorMode, rawSetColorMode] = useState(() => getTheme(colorModeManager, defaultColorMode));\n  const [resolvedColorMode, setResolvedColorMode] = useState(() => getTheme(colorModeManager));\n  const {\n    getSystemTheme,\n    setClassName,\n    setDataset,\n    addListener\n  } = useMemo(() => getColorModeUtils({\n    preventTransition: disableTransitionOnChange,\n    nonce: cache?.nonce\n  }), [disableTransitionOnChange, cache?.nonce]);\n  const resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  const setColorMode = useCallback(value2 => {\n    const resolved = value2 === \"system\" ? getSystemTheme() : value2;\n    rawSetColorMode(resolved);\n    setClassName(resolved === \"dark\");\n    setDataset(resolved);\n    colorModeManager.set(resolved);\n  }, [colorModeManager, getSystemTheme, setClassName, setDataset]);\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(() => {\n    const managerValue = colorModeManager.get();\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(() => {\n    if (!useSystemColorMode) return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  const context = useMemo(() => ({\n    colorMode: value ?? resolvedValue,\n    toggleColorMode: value ? noop : toggleColorMode,\n    setColorMode: value ? noop : setColorMode,\n    forced: value !== void 0\n  }), [resolvedValue, toggleColorMode, setColorMode, value]);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    children\n  });\n};\nColorModeProvider.displayName = \"ColorModeProvider\";\nfunction DarkMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"dark\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\nDarkMode.displayName = \"DarkMode\";\nfunction LightMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"light\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\nLightMode.displayName = \"LightMode\";\nexport { ColorModeProvider, DarkMode, LightMode };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
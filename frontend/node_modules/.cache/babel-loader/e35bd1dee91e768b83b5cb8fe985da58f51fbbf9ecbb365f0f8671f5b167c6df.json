{"ast":null,"code":"'use client';\n\nimport { getWindow, dataAttr, ariaAttr } from '@zag-js/dom-query';\nimport { useRef, useId, useMemo } from 'react';\nimport { useSafeLayoutEffect } from '../../utils/use-safe-layout-effect.js';\nimport { useFieldsetContext } from '../fieldset/use-fieldset-context.js';\nimport { parts } from './field.anatomy.js';\nconst useField = props => {\n  const fieldset = useFieldsetContext();\n  const {\n    ids,\n    disabled = Boolean(fieldset?.disabled),\n    invalid = false,\n    readOnly = false,\n    required = false\n  } = props;\n  const hasErrorText = useRef(false);\n  const hasHelperText = useRef(false);\n  const id = props.id ?? useId();\n  const rootRef = useRef(null);\n  const rootId = ids?.control ?? `field::${id}`;\n  const errorTextId = ids?.errorText ?? `field::${id}::error-text`;\n  const helperTextId = ids?.helperText ?? `field::${id}::helper-text`;\n  const labelId = ids?.label ?? `field::${id}::label`;\n  useSafeLayoutEffect(() => {\n    const rootNode = rootRef.current;\n    if (!rootNode) return;\n    const win = getWindow(rootNode);\n    const doc = win.document;\n    const checkTextElements = () => {\n      hasErrorText.current = !!doc.getElementById(errorTextId);\n      hasHelperText.current = !!doc.getElementById(helperTextId);\n    };\n    checkTextElements();\n    const observer = new win.MutationObserver(checkTextElements);\n    observer.observe(rootNode, {\n      childList: true,\n      subtree: true\n    });\n    return () => observer.disconnect();\n  }, [errorTextId, helperTextId]);\n  const labelIds = useMemo(() => {\n    const ids2 = [];\n    if (hasErrorText.current && invalid) ids2.push(errorTextId);\n    if (hasHelperText.current) ids2.push(helperTextId);\n    return ids2.join(\" \") || void 0;\n  }, [invalid, errorTextId, helperTextId]);\n  const getRootProps = useMemo(() => () => ({\n    ...parts.root.attrs,\n    id: rootId,\n    ref: rootRef,\n    role: \"group\",\n    \"data-disabled\": dataAttr(disabled),\n    \"data-invalid\": dataAttr(invalid),\n    \"data-readonly\": dataAttr(readOnly)\n  }), [disabled, invalid, readOnly, rootId]);\n  const getLabelProps = useMemo(() => () => ({\n    ...parts.label.attrs,\n    id: labelId,\n    \"data-disabled\": dataAttr(disabled),\n    \"data-invalid\": dataAttr(invalid),\n    \"data-readonly\": dataAttr(readOnly),\n    htmlFor: id\n  }), [disabled, invalid, readOnly, id, labelId]);\n  const getControlProps = useMemo(() => () => ({\n    \"aria-describedby\": labelIds,\n    \"aria-invalid\": ariaAttr(invalid),\n    \"data-invalid\": dataAttr(invalid),\n    \"data-required\": dataAttr(required),\n    \"data-readonly\": dataAttr(readOnly),\n    id,\n    required,\n    disabled,\n    readOnly\n  }), [labelIds, invalid, required, readOnly, id, disabled]);\n  const getInputProps = useMemo(() => () => ({\n    ...getControlProps(),\n    ...parts.input.attrs\n  }), [getControlProps]);\n  const getTextareaProps = useMemo(() => () => ({\n    ...getControlProps(),\n    ...parts.textarea.attrs\n  }), [getControlProps]);\n  const getSelectProps = useMemo(() => () => ({\n    ...getControlProps(),\n    ...parts.select.attrs\n  }), [getControlProps]);\n  const getHelperTextProps = useMemo(() => () => ({\n    id: helperTextId,\n    ...parts.helperText.attrs,\n    \"data-disabled\": dataAttr(disabled)\n  }), [disabled, helperTextId]);\n  const getErrorTextProps = useMemo(() => () => ({\n    id: errorTextId,\n    ...parts.errorText.attrs,\n    \"aria-live\": \"polite\"\n  }), [errorTextId]);\n  const getRequiredIndicatorProps = useMemo(() => () => ({\n    \"aria-hidden\": true,\n    ...parts.requiredIndicator.attrs\n  }), []);\n  return {\n    ariaDescribedby: labelIds,\n    ids: {\n      root: rootId,\n      control: id,\n      label: labelId,\n      errorText: errorTextId,\n      helperText: helperTextId\n    },\n    refs: {\n      rootRef\n    },\n    disabled,\n    invalid,\n    readOnly,\n    required,\n    getLabelProps,\n    getRootProps,\n    getInputProps,\n    getTextareaProps,\n    getSelectProps,\n    getHelperTextProps,\n    getErrorTextProps,\n    getRequiredIndicatorProps\n  };\n};\nexport { useField };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
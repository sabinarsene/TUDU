{"ast":null,"code":"'use client';\n\nimport { isStyleProp, css } from '@chakra-ui/styled-system';\nimport { interopDefault, splitProps, runIfFn, assignAfter, compact } from '@chakra-ui/utils';\nimport createStyled from '@emotion/styled';\nimport { forwardRef, createElement } from 'react';\nimport { shouldForwardProp } from './should-forward-prop.mjs';\nimport { useColorMode } from '../color-mode/color-mode-context.mjs';\nconst emotion_styled = interopDefault(createStyled);\nconst toCSSObject = ({\n  baseStyle\n}) => props => {\n  const {\n    theme,\n    css: cssProp,\n    __css,\n    sx,\n    ...restProps\n  } = props;\n  const [styleProps] = splitProps(restProps, isStyleProp);\n  const finalBaseStyle = runIfFn(baseStyle, props);\n  const finalStyles = assignAfter({}, __css, finalBaseStyle, compact(styleProps), sx);\n  const computedCSS = css(finalStyles)(props.theme);\n  return cssProp ? [computedCSS, cssProp] : computedCSS;\n};\nfunction styled(component, options) {\n  const {\n    baseStyle,\n    ...styledOptions\n  } = options ?? {};\n  if (!styledOptions.shouldForwardProp) {\n    styledOptions.shouldForwardProp = shouldForwardProp;\n  }\n  const styleObject = toCSSObject({\n    baseStyle\n  });\n  const Component = emotion_styled(component, styledOptions)(styleObject);\n  const chakraComponent = forwardRef(function ChakraComponent2(props, ref) {\n    const {\n      children,\n      ...restProps\n    } = props;\n    const {\n      colorMode,\n      forced\n    } = useColorMode();\n    const dataTheme = forced ? colorMode : void 0;\n    return createElement(Component, {\n      ref,\n      \"data-theme\": dataTheme,\n      ...restProps\n    }, children);\n  });\n  return chakraComponent;\n}\nexport { styled, toCSSObject };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
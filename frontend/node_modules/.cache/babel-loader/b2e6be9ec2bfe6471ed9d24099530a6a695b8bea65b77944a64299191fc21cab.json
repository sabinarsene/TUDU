{"ast":null,"code":"import { mergeProps } from '@zag-js/core';\nimport { memo, forwardRef, createElement, Children, isValidElement, cloneElement } from 'react';\nimport { composeRefs } from '../utils/compose-refs.js';\nfunction getRef(element) {\n  let getter = Object.getOwnPropertyDescriptor(element.props, \"ref\")?.get;\n  let mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.ref;\n  }\n  getter = Object.getOwnPropertyDescriptor(element, \"ref\")?.get;\n  mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.props.ref;\n  }\n  return element.props.ref || element.ref;\n}\nconst withAsChild = Component => {\n  const Comp = memo(forwardRef((props, ref) => {\n    const {\n      asChild,\n      children,\n      ...restProps\n    } = props;\n    if (!asChild) {\n      return createElement(Component, {\n        ...restProps,\n        ref\n      }, children);\n    }\n    const onlyChild = Children.only(children);\n    if (!isValidElement(onlyChild)) {\n      return null;\n    }\n    const childRef = getRef(onlyChild);\n    return cloneElement(onlyChild, {\n      ...mergeProps(restProps, onlyChild.props),\n      ref: ref ? composeRefs(ref, childRef) : childRef\n    });\n  }));\n  Comp.displayName = Component.displayName || Component.name;\n  return Comp;\n};\nconst jsxFactory = () => {\n  const cache = /* @__PURE__ */new Map();\n  return new Proxy(withAsChild, {\n    apply(_target, _thisArg, argArray) {\n      return withAsChild(argArray[0]);\n    },\n    get(_, element) {\n      const asElement = element;\n      if (!cache.has(asElement)) {\n        cache.set(asElement, withAsChild(asElement));\n      }\n      return cache.get(asElement);\n    }\n  });\n};\nconst ark = jsxFactory();\nexport { ark, jsxFactory };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
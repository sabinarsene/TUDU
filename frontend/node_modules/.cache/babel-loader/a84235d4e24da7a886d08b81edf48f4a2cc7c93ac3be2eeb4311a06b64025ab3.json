{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sabin.arsene\\\\Desktop\\\\TUDU-app\\\\TUDU\\\\frontend\\\\src\\\\pages\\\\ChatPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport { getConversations, markAllMessagesRead } from '../services/messageApi';\nimport Chat from '../components/Chat';\nimport { Avatar, Badge, Box, HStack, VStack, Text, Input, InputGroup, InputLeftElement, Flex } from '@chakra-ui/react';\nimport { Search, ArrowLeft } from 'lucide-react';\nimport './ChatPage.css';\n\n// Array of colors for avatars\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst avatarColors = [\"red.500\", \"orange.500\", \"yellow.500\", \"green.500\", \"teal.500\", \"blue.500\", \"cyan.500\", \"purple.500\", \"pink.500\", \"linkedin.500\"];\n\n// Function to get a deterministic color based on user name\nconst getAvatarColor = name => {\n  if (!name) return \"gray.500\";\n\n  // Get a simple hash of the name\n  let hash = 0;\n  for (let i = 0; i < name.length; i++) {\n    hash = name.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  // Use the hash to pick a color\n  const index = Math.abs(hash % avatarColors.length);\n  return avatarColors[index];\n};\nconst ChatPage = () => {\n  _s();\n  var _conversations$find, _conversations$find2;\n  const {\n    userId\n  } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    user\n  } = useAuth();\n  const {\n    socket,\n    connected\n  } = useSocket();\n  const [conversations, setConversations] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [markingAsRead, setMarkingAsRead] = useState(false);\n\n  // Load conversations\n  useEffect(() => {\n    const fetchChats = async () => {\n      try {\n        var _location$state;\n        setLoading(true);\n        const data = await getConversations();\n\n        // Verificăm dacă avem date valide\n        if (!data || !Array.isArray(data)) {\n          setConversations([]);\n          setError('Nu s-au putut încărca conversațiile');\n          setLoading(false);\n          return;\n        }\n\n        // Nu mai filtrăm conversațiile, deoarece backend-ul ar trebui să returneze doar conversațiile utilizatorului curent\n        setConversations(data);\n        setError(null);\n\n        // Check if we have a receiverId in the location state (from profile page)\n        const receiverId = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.receiverId;\n\n        // If we have a receiverId in state, navigate to that chat\n        if (receiverId && !userId) {\n          navigate(`/chat/${receiverId}`);\n          return;\n        }\n      } catch (err) {\n        console.error('Error fetching chats:', err);\n        setError('Failed to load conversations');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchChats();\n  }, [userId, navigate, user.id, location.state]);\n\n  // Mark messages as read when a user opens a conversation\n  useEffect(() => {\n    const markMessagesAsRead = async () => {\n      if (!userId || markingAsRead) return;\n      try {\n        setMarkingAsRead(true);\n        // Mark all messages from this sender as read\n        await markAllMessagesRead(userId);\n\n        // Update the conversations list to reflect the read status\n        const updatedConversations = await getConversations();\n        setConversations(updatedConversations);\n      } catch (err) {\n        console.error('Error marking messages as read:', err);\n      } finally {\n        setMarkingAsRead(false);\n      }\n    };\n    markMessagesAsRead();\n  }, [userId]);\n\n  // Listen for new messages to update conversations list\n  useEffect(() => {\n    if (!socket || !connected) return;\n    const handleMessageReceived = async message => {\n      // If this message is relevant to the current user (sender or receiver)\n      if (message.sender_id === user.id || message.receiver_id === user.id) {\n        // If the message is from the current open conversation, mark it as read immediately\n        if (message.sender_id === parseInt(userId) && message.receiver_id === user.id) {\n          try {\n            await markAllMessagesRead(userId);\n          } catch (err) {\n            console.error('Error marking message as read:', err);\n          }\n        }\n\n        // Refresh the conversations list\n        try {\n          const data = await getConversations();\n          if (data && Array.isArray(data)) {\n            setConversations(data);\n          }\n        } catch (err) {\n          console.error('Error refreshing conversations after new message:', err);\n        }\n      }\n    };\n    socket.on('message_received', handleMessageReceived);\n    return () => {\n      socket.off('message_received', handleMessageReceived);\n    };\n  }, [socket, connected, user.id, userId]);\n\n  // Filter conversations by search query\n  const filteredConversations = useMemo(() => {\n    if (!searchQuery.trim()) return conversations;\n    return conversations.filter(conv => conv.user.name.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [conversations, searchQuery]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      className: \"chat-page-loading\",\n      children: \"Loading chats...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      className: \"chat-page-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    h: \"100vh\",\n    bg: \"gray.50\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      w: {\n        base: \"100%\",\n        md: userId ? \"320px\" : \"100%\"\n      },\n      borderRight: \"1px solid\",\n      borderColor: \"gray.200\",\n      bg: \"white\",\n      display: {\n        base: userId ? \"none\" : \"block\",\n        md: \"block\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        p: 4,\n        bg: \"white\",\n        borderBottomWidth: \"1px\",\n        borderColor: \"gray.200\",\n        position: \"sticky\",\n        top: 0,\n        zIndex: 1,\n        children: [/*#__PURE__*/_jsxDEV(HStack, {\n          mb: 4,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            as: \"button\",\n            onClick: () => navigate('/home'),\n            \"aria-label\": \"Back to homepage\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            borderRadius: \"full\",\n            p: 2,\n            _hover: {\n              bg: \"gray.100\"\n            },\n            children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"xl\",\n            fontWeight: \"bold\",\n            children: \"Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n          children: [/*#__PURE__*/_jsxDEV(InputLeftElement, {\n            pointerEvents: \"none\",\n            children: /*#__PURE__*/_jsxDEV(Search, {\n              size: 18,\n              color: \"gray.400\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Search conversations...\",\n            value: searchQuery,\n            onChange: e => setSearchQuery(e.target.value),\n            borderRadius: \"full\",\n            bg: \"gray.100\",\n            _focus: {\n              bg: \"white\",\n              borderColor: \"blue.500\",\n              boxShadow: \"0 0 0 1px blue.500\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(VStack, {\n        spacing: 0,\n        align: \"stretch\",\n        pb: 4,\n        overflowY: \"auto\",\n        h: \"calc(100% - 110px)\",\n        children: filteredConversations.length === 0 ? /*#__PURE__*/_jsxDEV(Box, {\n          p: 4,\n          textAlign: \"center\",\n          color: \"gray.500\",\n          children: searchQuery ? /*#__PURE__*/_jsxDEV(Text, {\n            children: [\"No conversations matching \\\"\", searchQuery, \"\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(VStack, {\n            spacing: 2,\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              children: \"No conversations yet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              fontSize: \"sm\",\n              opacity: 0.7,\n              children: \"Start a chat from a user's profile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this) : filteredConversations.map(conv => /*#__PURE__*/_jsxDEV(Box, {\n          p: 4,\n          bg: conv.user.id === parseInt(userId) ? \"blue.50\" : \"white\",\n          borderBottomWidth: \"1px\",\n          borderColor: \"gray.100\",\n          cursor: \"pointer\",\n          onClick: () => navigate(`/chat/${conv.user.id}`),\n          _hover: {\n            bg: conv.user.id === parseInt(userId) ? \"blue.50\" : \"gray.50\"\n          },\n          children: /*#__PURE__*/_jsxDEV(HStack, {\n            spacing: 4,\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              position: \"relative\",\n              children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                size: \"md\",\n                name: conv.user.name // Acest lucru va afișa inițialele când nu există imagine\n                ,\n                src: conv.user.image,\n                bg: getAvatarColor(conv.user.name) // Culoare determinată în funcție de nume\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 21\n              }, this), conv.user.isOnline && /*#__PURE__*/_jsxDEV(Badge, {\n                position: \"absolute\",\n                bottom: \"0\",\n                right: \"0\",\n                bg: \"green.400\",\n                borderRadius: \"full\",\n                transform: \"translate(20%, 20%)\",\n                boxSize: \"3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              flex: \"1\",\n              children: [/*#__PURE__*/_jsxDEV(HStack, {\n                justify: \"space-between\",\n                mb: 1,\n                children: [/*#__PURE__*/_jsxDEV(Text, {\n                  fontWeight: \"bold\",\n                  children: conv.user.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 257,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Text, {\n                  fontSize: \"sm\",\n                  color: \"gray.500\",\n                  children: formatTimestamp(conv.lastMessage.time)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 260,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(HStack, {\n                justify: \"space-between\",\n                children: [/*#__PURE__*/_jsxDEV(Text, {\n                  fontSize: \"sm\",\n                  color: \"gray.600\",\n                  noOfLines: 1,\n                  flex: \"1\",\n                  children: [conv.lastMessage.sender === 'you' && 'You: ', conv.lastMessage.text]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 23\n                }, this), conv.unreadCount > 0 && /*#__PURE__*/_jsxDEV(Badge, {\n                  colorScheme: \"blue\",\n                  borderRadius: \"full\",\n                  px: 2,\n                  children: conv.unreadCount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 17\n          }, this)\n        }, conv.user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), userId ? /*#__PURE__*/_jsxDEV(Box, {\n      flex: 1,\n      h: \"100%\",\n      display: {\n        base: \"block\",\n        md: \"block\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(HStack, {\n        p: 4,\n        bg: \"white\",\n        borderBottomWidth: \"1px\",\n        borderColor: \"gray.200\",\n        position: \"sticky\",\n        top: 0,\n        zIndex: 1,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          as: \"button\",\n          onClick: () => navigate('/chat'),\n          \"aria-label\": \"Back to chat list\",\n          display: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          borderRadius: \"full\",\n          p: 2,\n          _hover: {\n            bg: \"gray.100\"\n          },\n          children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontWeight: \"bold\",\n          children: ((_conversations$find = conversations.find(c => c.user.id === parseInt(userId))) === null || _conversations$find === void 0 ? void 0 : _conversations$find.user.name) || 'Chat'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        h: \"calc(100% - 60px)\",\n        children: /*#__PURE__*/_jsxDEV(Chat, {\n          otherUser: (_conversations$find2 = conversations.find(c => c.user.id === parseInt(userId))) === null || _conversations$find2 === void 0 ? void 0 : _conversations$find2.user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      flex: 1,\n      display: {\n        base: \"none\",\n        md: \"flex\"\n      },\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      flexDirection: \"column\",\n      bg: \"white\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        fontSize: \"48px\",\n        mb: 4,\n        children: \"\\uD83D\\uDCAC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"xl\",\n        fontWeight: \"bold\",\n        mb: 2,\n        children: \"Your messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: \"Select a conversation to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"sm\",\n        color: \"gray.500\",\n        mt: 1,\n        children: \"or find a user to chat with from their profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to format timestamp\n_s(ChatPage, \"cTanGh5zFnm58O9PFa2wwRJpto4=\", false, function () {\n  return [useParams, useNavigate, useLocation, useAuth, useSocket];\n});\n_c = ChatPage;\nconst formatTimestamp = timestamp => {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diff = now - date;\n\n  // If less than 24 hours, show only time\n  if (diff < 24 * 60 * 60 * 1000) {\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n\n  // If less than a week, show day name\n  if (diff < 7 * 24 * 60 * 60 * 1000) {\n    return date.toLocaleDateString([], {\n      weekday: 'short'\n    });\n  }\n\n  // Otherwise show date\n  return date.toLocaleDateString([], {\n    month: 'short',\n    day: 'numeric'\n  });\n};\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useParams","useNavigate","useLocation","useAuth","useSocket","getConversations","markAllMessagesRead","Chat","Avatar","Badge","Box","HStack","VStack","Text","Input","InputGroup","InputLeftElement","Flex","Search","ArrowLeft","jsxDEV","_jsxDEV","avatarColors","getAvatarColor","name","hash","i","length","charCodeAt","index","Math","abs","ChatPage","_s","_conversations$find","_conversations$find2","userId","navigate","location","user","socket","connected","conversations","setConversations","loading","setLoading","error","setError","searchQuery","setSearchQuery","markingAsRead","setMarkingAsRead","fetchChats","_location$state","data","Array","isArray","receiverId","state","err","console","id","markMessagesAsRead","updatedConversations","handleMessageReceived","message","sender_id","receiver_id","parseInt","on","off","filteredConversations","trim","filter","conv","toLowerCase","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","h","bg","w","base","md","borderRight","borderColor","display","p","borderBottomWidth","position","top","zIndex","mb","as","onClick","alignItems","justifyContent","borderRadius","_hover","size","fontSize","fontWeight","pointerEvents","color","placeholder","value","onChange","e","target","_focus","boxShadow","spacing","align","pb","overflowY","textAlign","opacity","map","cursor","src","image","isOnline","bottom","right","transform","boxSize","flex","justify","formatTimestamp","lastMessage","time","noOfLines","sender","text","unreadCount","colorScheme","px","find","c","otherUser","flexDirection","mt","_c","timestamp","date","Date","now","diff","toLocaleTimeString","hour","minute","toLocaleDateString","weekday","month","day","$RefreshReg$"],"sources":["C:/Users/sabin.arsene/Desktop/TUDU-app/TUDU/frontend/src/pages/ChatPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport { getConversations, markAllMessagesRead } from '../services/messageApi';\nimport Chat from '../components/Chat';\nimport { Avatar, Badge, Box, HStack, VStack, Text, Input, InputGroup, InputLeftElement, Flex } from '@chakra-ui/react';\nimport { Search, ArrowLeft } from 'lucide-react';\nimport './ChatPage.css';\n\n// Array of colors for avatars\nconst avatarColors = [\n  \"red.500\", \"orange.500\", \"yellow.500\", \"green.500\", \"teal.500\", \n  \"blue.500\", \"cyan.500\", \"purple.500\", \"pink.500\", \"linkedin.500\"\n];\n\n// Function to get a deterministic color based on user name\nconst getAvatarColor = (name) => {\n  if (!name) return \"gray.500\";\n  \n  // Get a simple hash of the name\n  let hash = 0;\n  for (let i = 0; i < name.length; i++) {\n    hash = name.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  \n  // Use the hash to pick a color\n  const index = Math.abs(hash % avatarColors.length);\n  return avatarColors[index];\n};\n\nconst ChatPage = () => {\n  const { userId } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { user } = useAuth();\n  const { socket, connected } = useSocket();\n  const [conversations, setConversations] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [markingAsRead, setMarkingAsRead] = useState(false);\n\n  // Load conversations\n  useEffect(() => {\n    const fetchChats = async () => {\n      try {\n        setLoading(true);\n        const data = await getConversations();\n        \n        // Verificăm dacă avem date valide\n        if (!data || !Array.isArray(data)) {\n          setConversations([]);\n          setError('Nu s-au putut încărca conversațiile');\n          setLoading(false);\n          return;\n        }\n        \n        // Nu mai filtrăm conversațiile, deoarece backend-ul ar trebui să returneze doar conversațiile utilizatorului curent\n        setConversations(data);\n        setError(null);\n\n        // Check if we have a receiverId in the location state (from profile page)\n        const receiverId = location.state?.receiverId;\n        \n        // If we have a receiverId in state, navigate to that chat\n        if (receiverId && !userId) {\n          navigate(`/chat/${receiverId}`);\n          return;\n        }\n      } catch (err) {\n        console.error('Error fetching chats:', err);\n        setError('Failed to load conversations');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchChats();\n  }, [userId, navigate, user.id, location.state]);\n\n  // Mark messages as read when a user opens a conversation\n  useEffect(() => {\n    const markMessagesAsRead = async () => {\n      if (!userId || markingAsRead) return;\n      \n      try {\n        setMarkingAsRead(true);\n        // Mark all messages from this sender as read\n        await markAllMessagesRead(userId);\n        \n        // Update the conversations list to reflect the read status\n        const updatedConversations = await getConversations();\n        setConversations(updatedConversations);\n      } catch (err) {\n        console.error('Error marking messages as read:', err);\n      } finally {\n        setMarkingAsRead(false);\n      }\n    };\n\n    markMessagesAsRead();\n  }, [userId]);\n\n  // Listen for new messages to update conversations list\n  useEffect(() => {\n    if (!socket || !connected) return;\n\n    const handleMessageReceived = async (message) => {\n      // If this message is relevant to the current user (sender or receiver)\n      if (message.sender_id === user.id || message.receiver_id === user.id) {\n        // If the message is from the current open conversation, mark it as read immediately\n        if (message.sender_id === parseInt(userId) && message.receiver_id === user.id) {\n          try {\n            await markAllMessagesRead(userId);\n          } catch (err) {\n            console.error('Error marking message as read:', err);\n          }\n        }\n        \n        // Refresh the conversations list\n        try {\n          const data = await getConversations();\n          if (data && Array.isArray(data)) {\n            setConversations(data);\n          }\n        } catch (err) {\n          console.error('Error refreshing conversations after new message:', err);\n        }\n      }\n    };\n\n    socket.on('message_received', handleMessageReceived);\n\n    return () => {\n      socket.off('message_received', handleMessageReceived);\n    };\n  }, [socket, connected, user.id, userId]);\n\n  // Filter conversations by search query\n  const filteredConversations = useMemo(() => {\n    if (!searchQuery.trim()) return conversations;\n    \n    return conversations.filter(conv => \n      conv.user.name.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n  }, [conversations, searchQuery]);\n\n  if (loading) {\n    return <Box className=\"chat-page-loading\">Loading chats...</Box>;\n  }\n\n  if (error) {\n    return <Box className=\"chat-page-error\">{error}</Box>;\n  }\n\n  return (\n    <Flex h=\"100vh\" bg=\"gray.50\">\n      {/* Conversații în stânga - mereu vizibile */}\n      <Box \n        w={{ base: \"100%\", md: userId ? \"320px\" : \"100%\" }} \n        borderRight=\"1px solid\" \n        borderColor=\"gray.200\"\n        bg=\"white\"\n        display={{ base: userId ? \"none\" : \"block\", md: \"block\" }}\n      >\n        <Box\n          p={4}\n          bg=\"white\"\n          borderBottomWidth=\"1px\"\n          borderColor=\"gray.200\"\n          position=\"sticky\"\n          top={0}\n          zIndex={1}\n        >\n          <HStack mb={4}>\n            <Box \n              as=\"button\"\n              onClick={() => navigate('/home')}\n              aria-label=\"Back to homepage\"\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              borderRadius=\"full\"\n              p={2}\n              _hover={{ bg: \"gray.100\" }}\n            >\n              <ArrowLeft size={24} />\n            </Box>\n            <Text fontSize=\"xl\" fontWeight=\"bold\">\n              Messages\n            </Text>\n          </HStack>\n\n          <InputGroup>\n            <InputLeftElement pointerEvents=\"none\">\n              <Search size={18} color=\"gray.400\" />\n            </InputLeftElement>\n            <Input\n              placeholder=\"Search conversations...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              borderRadius=\"full\"\n              bg=\"gray.100\"\n              _focus={{ bg: \"white\", borderColor: \"blue.500\", boxShadow: \"0 0 0 1px blue.500\" }}\n            />\n          </InputGroup>\n        </Box>\n\n        <VStack spacing={0} align=\"stretch\" pb={4} overflowY=\"auto\" h=\"calc(100% - 110px)\">\n          {filteredConversations.length === 0 ? (\n            <Box p={4} textAlign=\"center\" color=\"gray.500\">\n              {searchQuery ? (\n                <Text>No conversations matching \"{searchQuery}\"</Text>\n              ) : (\n                <VStack spacing={2}>\n                  <Text>No conversations yet</Text>\n                  <Text fontSize=\"sm\" opacity={0.7}>Start a chat from a user's profile</Text>\n                </VStack>\n              )}\n            </Box>\n          ) : (\n            filteredConversations.map((conv) => (\n              <Box\n                key={conv.user.id}\n                p={4}\n                bg={conv.user.id === parseInt(userId) ? \"blue.50\" : \"white\"}\n                borderBottomWidth=\"1px\"\n                borderColor=\"gray.100\"\n                cursor=\"pointer\"\n                onClick={() => navigate(`/chat/${conv.user.id}`)}\n                _hover={{ bg: conv.user.id === parseInt(userId) ? \"blue.50\" : \"gray.50\" }}\n              >\n                <HStack spacing={4}>\n                  <Box position=\"relative\">\n                    <Avatar\n                      size=\"md\"\n                      name={conv.user.name} // Acest lucru va afișa inițialele când nu există imagine\n                      src={conv.user.image}\n                      bg={getAvatarColor(conv.user.name)} // Culoare determinată în funcție de nume\n                    />\n                    {conv.user.isOnline && (\n                      <Badge\n                        position=\"absolute\"\n                        bottom=\"0\"\n                        right=\"0\"\n                        bg=\"green.400\"\n                        borderRadius=\"full\"\n                        transform=\"translate(20%, 20%)\"\n                        boxSize=\"3\"\n                      />\n                    )}\n                  </Box>\n\n                  <Box flex=\"1\">\n                    <HStack justify=\"space-between\" mb={1}>\n                      <Text fontWeight=\"bold\">\n                        {conv.user.name}\n                      </Text>\n                      <Text fontSize=\"sm\" color=\"gray.500\">\n                        {formatTimestamp(conv.lastMessage.time)}\n                      </Text>\n                    </HStack>\n\n                    <HStack justify=\"space-between\">\n                      <Text\n                        fontSize=\"sm\"\n                        color=\"gray.600\"\n                        noOfLines={1}\n                        flex=\"1\"\n                      >\n                        {conv.lastMessage.sender === 'you' && 'You: '}\n                        {conv.lastMessage.text}\n                      </Text>\n\n                      {conv.unreadCount > 0 && (\n                        <Badge\n                          colorScheme=\"blue\"\n                          borderRadius=\"full\"\n                          px={2}\n                        >\n                          {conv.unreadCount}\n                        </Badge>\n                      )}\n                    </HStack>\n                  </Box>\n                </HStack>\n              </Box>\n            ))\n          )}\n        </VStack>\n      </Box>\n\n      {/* Zona de chat în dreapta - vizibilă doar când userId există */}\n      {userId ? (\n        <Box \n          flex={1} \n          h=\"100%\" \n          display={{ base: \"block\", md: \"block\" }}\n        >\n          <HStack\n            p={4}\n            bg=\"white\"\n            borderBottomWidth=\"1px\"\n            borderColor=\"gray.200\"\n            position=\"sticky\"\n            top={0}\n            zIndex={1}\n          >\n            <Box \n              as=\"button\"\n              onClick={() => navigate('/chat')}\n              aria-label=\"Back to chat list\"\n              display={{ base: \"flex\", md: \"none\" }}\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              borderRadius=\"full\"\n              p={2}\n              _hover={{ bg: \"gray.100\" }}\n            >\n              <ArrowLeft size={24} />\n            </Box>\n            <Text fontWeight=\"bold\">\n              {conversations.find(c => c.user.id === parseInt(userId))?.user.name || 'Chat'}\n            </Text>\n          </HStack>\n\n          <Box h=\"calc(100% - 60px)\">\n            <Chat \n              otherUser={conversations.find(c => c.user.id === parseInt(userId))?.user}\n            />\n          </Box>\n        </Box>\n      ) : (\n        <Box \n          flex={1} \n          display={{ base: \"none\", md: \"flex\" }}\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          flexDirection=\"column\"\n          bg=\"white\"\n        >\n          <Box fontSize=\"48px\" mb={4}>💬</Box>\n          <Text fontSize=\"xl\" fontWeight=\"bold\" mb={2}>Your messages</Text>\n          <Text>Select a conversation to start chatting</Text>\n          <Text fontSize=\"sm\" color=\"gray.500\" mt={1}>or find a user to chat with from their profile</Text>\n        </Box>\n      )}\n    </Flex>\n  );\n};\n\n// Helper function to format timestamp\nconst formatTimestamp = (timestamp) => {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diff = now - date;\n  \n  // If less than 24 hours, show only time\n  if (diff < 24 * 60 * 60 * 1000) {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  }\n  \n  // If less than a week, show day name\n  if (diff < 7 * 24 * 60 * 60 * 1000) {\n    return date.toLocaleDateString([], { weekday: 'short' });\n  }\n  \n  // Otherwise show date\n  return date.toLocaleDateString([], { month: 'short', day: 'numeric' });\n};\n\nexport default ChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope, raf, getComputedStyle } from '@zag-js/dom-query';\nimport { ariaHidden } from '@zag-js/aria-hidden';\nimport { createMachine } from '@zag-js/core';\nimport { trackDismissableElement } from '@zag-js/dismissable';\nimport { trapFocus } from '@zag-js/focus-trap';\nimport { preventBodyScroll } from '@zag-js/remove-scroll';\nimport { createSplitProps, compact } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/dialog.anatomy.ts\nvar anatomy = createAnatomy(\"dialog\").parts(\"trigger\", \"backdrop\", \"positioner\", \"content\", \"title\", \"description\", \"closeTrigger\");\nvar parts = anatomy.build();\nvar dom = createScope({\n  getPositionerId: ctx => ctx.ids?.positioner ?? `dialog:${ctx.id}:positioner`,\n  getBackdropId: ctx => ctx.ids?.backdrop ?? `dialog:${ctx.id}:backdrop`,\n  getContentId: ctx => ctx.ids?.content ?? `dialog:${ctx.id}:content`,\n  getTriggerId: ctx => ctx.ids?.trigger ?? `dialog:${ctx.id}:trigger`,\n  getTitleId: ctx => ctx.ids?.title ?? `dialog:${ctx.id}:title`,\n  getDescriptionId: ctx => ctx.ids?.description ?? `dialog:${ctx.id}:description`,\n  getCloseTriggerId: ctx => ctx.ids?.closeTrigger ?? `dialog:${ctx.id}:close`,\n  getContentEl: ctx => dom.getById(ctx, dom.getContentId(ctx)),\n  getPositionerEl: ctx => dom.getById(ctx, dom.getPositionerId(ctx)),\n  getBackdropEl: ctx => dom.getById(ctx, dom.getBackdropId(ctx)),\n  getTriggerEl: ctx => dom.getById(ctx, dom.getTriggerId(ctx)),\n  getTitleEl: ctx => dom.getById(ctx, dom.getTitleId(ctx)),\n  getDescriptionEl: ctx => dom.getById(ctx, dom.getDescriptionId(ctx)),\n  getCloseTriggerEl: ctx => dom.getById(ctx, dom.getCloseTriggerId(ctx))\n});\n\n// src/dialog.connect.ts\nfunction connect(state, send, normalize) {\n  const ariaLabel = state.context[\"aria-label\"];\n  const open = state.matches(\"open\");\n  const rendered = state.context.renderedElements;\n  return {\n    open,\n    setOpen(nextOpen) {\n      if (nextOpen === open) return;\n      send(nextOpen ? \"OPEN\" : \"CLOSE\");\n    },\n    getTriggerProps() {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        dir: state.context.dir,\n        id: dom.getTriggerId(state.context),\n        \"aria-haspopup\": \"dialog\",\n        type: \"button\",\n        \"aria-expanded\": open,\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"aria-controls\": dom.getContentId(state.context),\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          send(\"TOGGLE\");\n        }\n      });\n    },\n    getBackdropProps() {\n      return normalize.element({\n        ...parts.backdrop.attrs,\n        dir: state.context.dir,\n        hidden: !open,\n        id: dom.getBackdropId(state.context),\n        \"data-state\": open ? \"open\" : \"closed\"\n      });\n    },\n    getPositionerProps() {\n      return normalize.element({\n        ...parts.positioner.attrs,\n        dir: state.context.dir,\n        id: dom.getPositionerId(state.context),\n        style: {\n          pointerEvents: open ? void 0 : \"none\"\n        }\n      });\n    },\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        dir: state.context.dir,\n        role: state.context.role,\n        hidden: !open,\n        id: dom.getContentId(state.context),\n        tabIndex: -1,\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"aria-modal\": true,\n        \"aria-label\": ariaLabel || void 0,\n        \"aria-labelledby\": ariaLabel || !rendered.title ? void 0 : dom.getTitleId(state.context),\n        \"aria-describedby\": rendered.description ? dom.getDescriptionId(state.context) : void 0\n      });\n    },\n    getTitleProps() {\n      return normalize.element({\n        ...parts.title.attrs,\n        dir: state.context.dir,\n        id: dom.getTitleId(state.context)\n      });\n    },\n    getDescriptionProps() {\n      return normalize.element({\n        ...parts.description.attrs,\n        dir: state.context.dir,\n        id: dom.getDescriptionId(state.context)\n      });\n    },\n    getCloseTriggerProps() {\n      return normalize.button({\n        ...parts.closeTrigger.attrs,\n        dir: state.context.dir,\n        id: dom.getCloseTriggerId(state.context),\n        type: \"button\",\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          event.stopPropagation();\n          send(\"CLOSE\");\n        }\n      });\n    }\n  };\n}\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"dialog\",\n    initial: ctx.open ? \"open\" : \"closed\",\n    context: {\n      role: \"dialog\",\n      renderedElements: {\n        title: true,\n        description: true\n      },\n      modal: true,\n      trapFocus: true,\n      preventScroll: true,\n      closeOnInteractOutside: true,\n      closeOnEscape: true,\n      restoreFocus: true,\n      ...ctx\n    },\n    created: [\"setAlertDialogProps\"],\n    watch: {\n      open: [\"toggleVisibility\"]\n    },\n    states: {\n      open: {\n        entry: [\"checkRenderedElements\", \"syncZIndex\"],\n        activities: [\"trackDismissableElement\", \"trapFocus\", \"preventScroll\", \"hideContentBelow\"],\n        on: {\n          \"CONTROLLED.CLOSE\": {\n            target: \"closed\"\n          },\n          CLOSE: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          }, {\n            target: \"closed\",\n            actions: [\"invokeOnClose\"]\n          }],\n          TOGGLE: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          }, {\n            target: \"closed\",\n            actions: [\"invokeOnClose\"]\n          }]\n        }\n      },\n      closed: {\n        on: {\n          \"CONTROLLED.OPEN\": {\n            target: \"open\"\n          },\n          OPEN: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          }, {\n            target: \"open\",\n            actions: [\"invokeOnOpen\"]\n          }],\n          TOGGLE: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          }, {\n            target: \"open\",\n            actions: [\"invokeOnOpen\"]\n          }]\n        }\n      }\n    }\n  }, {\n    guards: {\n      isOpenControlled: ctx2 => !!ctx2[\"open.controlled\"]\n    },\n    activities: {\n      trackDismissableElement(ctx2, _evt, {\n        send\n      }) {\n        const getContentEl = () => dom.getContentEl(ctx2);\n        return trackDismissableElement(getContentEl, {\n          defer: true,\n          pointerBlocking: ctx2.modal,\n          exclude: [dom.getTriggerEl(ctx2)],\n          onInteractOutside(event) {\n            ctx2.onInteractOutside?.(event);\n            if (!ctx2.closeOnInteractOutside) {\n              event.preventDefault();\n            }\n          },\n          persistentElements: ctx2.persistentElements,\n          onFocusOutside: ctx2.onFocusOutside,\n          onPointerDownOutside: ctx2.onPointerDownOutside,\n          onEscapeKeyDown(event) {\n            ctx2.onEscapeKeyDown?.(event);\n            if (!ctx2.closeOnEscape) {\n              event.preventDefault();\n            }\n          },\n          onDismiss() {\n            send({\n              type: \"CLOSE\",\n              src: \"interact-outside\"\n            });\n          }\n        });\n      },\n      preventScroll(ctx2) {\n        if (!ctx2.preventScroll) return;\n        return preventBodyScroll(dom.getDoc(ctx2));\n      },\n      trapFocus(ctx2) {\n        if (!ctx2.trapFocus || !ctx2.modal) return;\n        const contentEl = () => dom.getContentEl(ctx2);\n        return trapFocus(contentEl, {\n          preventScroll: true,\n          returnFocusOnDeactivate: !!ctx2.restoreFocus,\n          initialFocus: ctx2.initialFocusEl,\n          setReturnFocus: el => ctx2.finalFocusEl?.() ?? el\n        });\n      },\n      hideContentBelow(ctx2) {\n        if (!ctx2.modal) return;\n        const getElements = () => [dom.getContentEl(ctx2)];\n        return ariaHidden(getElements, {\n          defer: true\n        });\n      }\n    },\n    actions: {\n      setAlertDialogProps(ctx2) {\n        if (ctx2.role !== \"alertdialog\") return;\n        ctx2.initialFocusEl || (ctx2.initialFocusEl = () => dom.getCloseTriggerEl(ctx2));\n        ctx2.closeOnInteractOutside = false;\n      },\n      checkRenderedElements(ctx2) {\n        raf(() => {\n          ctx2.renderedElements.title = !!dom.getTitleEl(ctx2);\n          ctx2.renderedElements.description = !!dom.getDescriptionEl(ctx2);\n        });\n      },\n      syncZIndex(ctx2) {\n        raf(() => {\n          const contentEl = dom.getContentEl(ctx2);\n          if (!contentEl) return;\n          const styles = getComputedStyle(contentEl);\n          const elems = [dom.getPositionerEl(ctx2), dom.getBackdropEl(ctx2)];\n          elems.forEach(node => {\n            node?.style.setProperty(\"--z-index\", styles.zIndex);\n          });\n        });\n      },\n      invokeOnClose(ctx2) {\n        ctx2.onOpenChange?.({\n          open: false\n        });\n      },\n      invokeOnOpen(ctx2) {\n        ctx2.onOpenChange?.({\n          open: true\n        });\n      },\n      toggleVisibility(ctx2, evt, {\n        send\n      }) {\n        send({\n          type: ctx2.open ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\",\n          previousEvent: evt\n        });\n      }\n    }\n  });\n}\nvar props = createProps()([\"aria-label\", \"closeOnEscape\", \"closeOnInteractOutside\", \"dir\", \"finalFocusEl\", \"getRootNode\", \"getRootNode\", \"id\", \"id\", \"ids\", \"initialFocusEl\", \"modal\", \"onEscapeKeyDown\", \"onFocusOutside\", \"onInteractOutside\", \"onOpenChange\", \"onPointerDownOutside\", \"open.controlled\", \"open\", \"persistentElements\", \"preventScroll\", \"restoreFocus\", \"role\", \"trapFocus\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
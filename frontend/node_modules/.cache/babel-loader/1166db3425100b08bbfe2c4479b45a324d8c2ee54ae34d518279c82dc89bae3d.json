{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { SegmentGroup } from '@ark-ui/react/segment-group';\nimport { useMemo } from 'react';\nimport { createSlotRecipeContext } from '../../styled-system/create-slot-recipe-context.js';\nimport { For } from '../for/for.js';\nconst {\n  withProvider,\n  withContext,\n  useStyles: useSegmentGroupStyles,\n  PropsProvider\n} = createSlotRecipeContext({\n  key: \"segmentGroup\"\n});\nconst SegmentGroupRootProvider = withProvider(SegmentGroup.RootProvider, \"root\", {\n  forwardAsChild: true\n});\nconst SegmentGroupRoot = withProvider(SegmentGroup.Root, \"root\", {\n  forwardAsChild: true\n});\nconst SegmentGroupPropsProvider = PropsProvider;\nconst SegmentGroupItem = withContext(SegmentGroup.Item, \"item\", {\n  forwardAsChild: true\n});\nconst SegmentGroupItemText = withContext(SegmentGroup.ItemText, \"itemText\", {\n  forwardAsChild: true\n});\nconst SegmentGroupIndicator = withContext(SegmentGroup.Indicator, \"indicator\", {\n  forwardAsChild: true\n});\nfunction normalize(items) {\n  return items.map(item => {\n    if (typeof item === \"string\") return {\n      value: item,\n      label: item\n    };\n    return item;\n  });\n}\nconst SegmentGroupItems = props => {\n  const {\n    items,\n    ...rest\n  } = props;\n  const data = useMemo(() => normalize(items), [items]);\n  return /* @__PURE__ */jsx(For, {\n    each: data,\n    children: item => /* @__PURE__ */jsxs(SegmentGroupItem, {\n      value: item.value,\n      ...rest,\n      children: [/* @__PURE__ */jsx(SegmentGroupItemText, {\n        children: item.label\n      }), /* @__PURE__ */jsx(SegmentGroupItemHiddenInput, {})]\n    }, item.value)\n  });\n};\nconst SegmentGroupItemHiddenInput = SegmentGroup.ItemHiddenInput;\nconst SegmentGroupContext = SegmentGroup.Context;\nconst SegmentGroupItemContext = SegmentGroup.ItemContext;\nexport { SegmentGroupContext, SegmentGroupIndicator, SegmentGroupItem, SegmentGroupItemContext, SegmentGroupItemHiddenInput, SegmentGroupItemText, SegmentGroupItems, SegmentGroupPropsProvider, SegmentGroupRoot, SegmentGroupRootProvider, useSegmentGroupStyles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
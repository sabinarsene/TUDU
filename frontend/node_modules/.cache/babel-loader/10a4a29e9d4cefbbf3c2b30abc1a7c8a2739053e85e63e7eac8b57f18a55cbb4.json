{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope, queryAll, nextById, prevById, dataAttr, isSelfTarget, isSafari, getEventKey, raf } from '@zag-js/dom-query';\nimport { first, last, createSplitProps, compact, remove, add, isEqual } from '@zag-js/utils';\nimport { createMachine, guards } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\n\n// src/toggle-group.anatomy.ts\nvar anatomy = createAnatomy(\"toggle-group\").parts(\"root\", \"item\");\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `toggle-group:${ctx.id}`,\n  getItemId: (ctx, value) => ctx.ids?.item?.(value) ?? `toggle-group:${ctx.id}:${value}`,\n  getRootEl: ctx => dom.getById(ctx, dom.getRootId(ctx)),\n  getElements: ctx => {\n    const ownerId = CSS.escape(dom.getRootId(ctx));\n    const selector = `[data-ownedby='${ownerId}']:not([data-disabled])`;\n    return queryAll(dom.getRootEl(ctx), selector);\n  },\n  getFirstEl: ctx => first(dom.getElements(ctx)),\n  getLastEl: ctx => last(dom.getElements(ctx)),\n  getNextEl: (ctx, id) => nextById(dom.getElements(ctx), id, ctx.currentLoopFocus),\n  getPrevEl: (ctx, id) => prevById(dom.getElements(ctx), id, ctx.currentLoopFocus)\n});\n\n// src/toggle-group.connect.ts\nfunction connect(state, send, normalize) {\n  const value = state.context.value;\n  const disabled = state.context.disabled;\n  const isSingle = !state.context.multiple;\n  const rovingFocus = state.context.rovingFocus;\n  const isHorizontal = state.context.orientation === \"horizontal\";\n  function getItemState(props2) {\n    const id = dom.getItemId(state.context, props2.value);\n    return {\n      id,\n      disabled: Boolean(props2.disabled || disabled),\n      pressed: !!value.includes(props2.value),\n      focused: state.context.focusedId === id\n    };\n  }\n  return {\n    value,\n    setValue(value2) {\n      send({\n        type: \"VALUE.SET\",\n        value: value2\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: dom.getRootId(state.context),\n        dir: state.context.dir,\n        role: isSingle ? \"radiogroup\" : \"group\",\n        tabIndex: state.context.isTabbingBackward ? -1 : 0,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-orientation\": state.context.orientation,\n        \"data-focus\": dataAttr(state.context.focusedId != null),\n        style: {\n          outline: \"none\"\n        },\n        onMouseDown() {\n          if (disabled) return;\n          send(\"ROOT.MOUSE_DOWN\");\n        },\n        onFocus(event) {\n          if (disabled) return;\n          const evt = event.nativeEvent || event;\n          if (!isSelfTarget(evt) || !!state.context.isClickFocus || state.context.isTabbingBackward) return;\n          send(\"ROOT.FOCUS\");\n        },\n        onBlur() {\n          if (disabled) return;\n          send(\"ROOT.BLUR\");\n        }\n      });\n    },\n    getItemState,\n    getItemProps(props2) {\n      const itemState = getItemState(props2);\n      const rovingTabIndex = itemState.focused ? 0 : -1;\n      return normalize.button({\n        ...parts.item.attrs,\n        id: itemState.id,\n        type: \"button\",\n        \"data-ownedby\": dom.getRootId(state.context),\n        \"data-focus\": dataAttr(itemState.focused),\n        disabled: itemState.disabled,\n        tabIndex: rovingFocus ? rovingTabIndex : void 0,\n        // radio\n        role: isSingle ? \"radio\" : void 0,\n        \"aria-checked\": isSingle ? itemState.pressed : void 0,\n        \"aria-pressed\": isSingle ? void 0 : itemState.pressed,\n        //\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-orientation\": state.context.orientation,\n        dir: state.context.dir,\n        \"data-state\": itemState.pressed ? \"on\" : \"off\",\n        onFocus() {\n          if (itemState.disabled) return;\n          send({\n            type: \"TOGGLE.FOCUS\",\n            id: itemState.id\n          });\n        },\n        onClick(event) {\n          if (itemState.disabled) return;\n          send({\n            type: \"TOGGLE.CLICK\",\n            id: itemState.id,\n            value: props2.value\n          });\n          if (isSafari()) {\n            event.currentTarget.focus({\n              preventScroll: true\n            });\n          }\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!isSelfTarget(event)) return;\n          if (itemState.disabled) return;\n          const keyMap = {\n            Tab(event2) {\n              const isShiftTab = event2.shiftKey;\n              send({\n                type: \"TOGGLE.SHIFT_TAB\",\n                isShiftTab\n              });\n            },\n            ArrowLeft() {\n              if (!rovingFocus || !isHorizontal) return;\n              send(\"TOGGLE.FOCUS_PREV\");\n            },\n            ArrowRight() {\n              if (!rovingFocus || !isHorizontal) return;\n              send(\"TOGGLE.FOCUS_NEXT\");\n            },\n            ArrowUp() {\n              if (!rovingFocus || isHorizontal) return;\n              send(\"TOGGLE.FOCUS_PREV\");\n            },\n            ArrowDown() {\n              if (!rovingFocus || isHorizontal) return;\n              send(\"TOGGLE.FOCUS_NEXT\");\n            },\n            Home() {\n              if (!rovingFocus) return;\n              send(\"TOGGLE.FOCUS_FIRST\");\n            },\n            End() {\n              if (!rovingFocus) return;\n              send(\"TOGGLE.FOCUS_LAST\");\n            }\n          };\n          const exec = keyMap[getEventKey(event)];\n          if (exec) {\n            exec(event);\n            if (event.key !== \"Tab\") event.preventDefault();\n          }\n        }\n      });\n    }\n  };\n}\nvar {\n  not,\n  and\n} = guards;\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"toggle-group\",\n    initial: \"idle\",\n    context: {\n      value: [],\n      disabled: false,\n      orientation: \"horizontal\",\n      rovingFocus: true,\n      loopFocus: true,\n      ...ctx,\n      focusedId: null,\n      isTabbingBackward: false,\n      isClickFocus: false,\n      isWithinToolbar: false\n    },\n    computed: {\n      currentLoopFocus: ctx2 => ctx2.loopFocus && !ctx2.isWithinToolbar\n    },\n    entry: [\"checkIfWithinToolbar\"],\n    on: {\n      \"VALUE.SET\": {\n        actions: [\"setValue\"]\n      },\n      \"TOGGLE.CLICK\": {\n        actions: [\"setValue\"]\n      },\n      \"ROOT.MOUSE_DOWN\": {\n        actions: [\"setClickFocus\"]\n      }\n    },\n    states: {\n      idle: {\n        on: {\n          \"ROOT.FOCUS\": {\n            target: \"focused\",\n            guard: not(and(\"isClickFocus\", \"isTabbingBackward\")),\n            actions: [\"focusFirstToggle\", \"clearClickFocus\"]\n          },\n          \"TOGGLE.FOCUS\": {\n            target: \"focused\",\n            actions: [\"setFocusedId\"]\n          }\n        }\n      },\n      focused: {\n        on: {\n          \"ROOT.BLUR\": {\n            target: \"idle\",\n            actions: [\"clearIsTabbingBackward\"]\n          },\n          \"TOGGLE.FOCUS\": {\n            actions: [\"setFocusedId\"]\n          },\n          \"TOGGLE.FOCUS_NEXT\": {\n            actions: [\"focusNextToggle\"]\n          },\n          \"TOGGLE.FOCUS_PREV\": {\n            actions: [\"focusPrevToggle\"]\n          },\n          \"TOGGLE.FOCUS_FIRST\": {\n            actions: [\"focusFirstToggle\"]\n          },\n          \"TOGGLE.FOCUS_LAST\": {\n            actions: [\"focusLastToggle\"]\n          },\n          \"TOGGLE.SHIFT_TAB\": {\n            target: \"idle\",\n            actions: [\"setIsTabbingBackward\"]\n          }\n        }\n      }\n    }\n  }, {\n    guards: {\n      isClickFocus: ctx2 => ctx2.isClickFocus,\n      isTabbingBackward: ctx2 => ctx2.isTabbingBackward\n    },\n    actions: {\n      setIsTabbingBackward(ctx2) {\n        ctx2.isTabbingBackward = true;\n      },\n      clearIsTabbingBackward(ctx2) {\n        ctx2.isTabbingBackward = false;\n      },\n      setClickFocus(ctx2) {\n        ctx2.isClickFocus = true;\n      },\n      clearClickFocus(ctx2) {\n        ctx2.isClickFocus = false;\n      },\n      checkIfWithinToolbar(ctx2) {\n        const closestToolbar = dom.getRootEl(ctx2)?.closest(\"[role=toolbar]\");\n        ctx2.isWithinToolbar = !!closestToolbar;\n      },\n      setFocusedId(ctx2, evt) {\n        ctx2.focusedId = evt.id;\n      },\n      clearFocusedId(ctx2) {\n        ctx2.focusedId = null;\n      },\n      setValue(ctx2, evt) {\n        if (!evt.value) return;\n        let next = Array.from(ctx2.value);\n        if (ctx2.multiple) {\n          next = next.includes(evt.value) ? remove(next, evt.value) : add(next, evt.value);\n        } else {\n          next = isEqual(ctx2.value, [evt.value]) ? [] : [evt.value];\n        }\n        set.value(ctx2, next);\n      },\n      focusNextToggle(ctx2) {\n        raf(() => {\n          if (!ctx2.focusedId) return;\n          dom.getNextEl(ctx2, ctx2.focusedId)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      focusPrevToggle(ctx2) {\n        raf(() => {\n          if (!ctx2.focusedId) return;\n          dom.getPrevEl(ctx2, ctx2.focusedId)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      focusFirstToggle(ctx2) {\n        raf(() => {\n          dom.getFirstEl(ctx2)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      focusLastToggle(ctx2) {\n        raf(() => {\n          dom.getLastEl(ctx2)?.focus({\n            preventScroll: true\n          });\n        });\n      }\n    }\n  });\n}\nvar invoke = {\n  change(ctx) {\n    ctx.onValueChange?.({\n      value: Array.from(ctx.value)\n    });\n  }\n};\nvar set = {\n  value(ctx, value) {\n    if (isEqual(ctx.value, value)) return;\n    ctx.value = value;\n    invoke.change(ctx);\n  }\n};\nvar props = createProps()([\"dir\", \"disabled\", \"getRootNode\", \"id\", \"ids\", \"loopFocus\", \"multiple\", \"onValueChange\", \"orientation\", \"rovingFocus\", \"value\"]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"value\", \"disabled\"]);\nvar splitItemProps = createSplitProps(itemProps);\nexport { anatomy, connect, itemProps, machine, props, splitItemProps, splitProps };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
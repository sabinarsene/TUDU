{"ast":null,"code":"'use client';\n\nimport { useControllableState } from '../../utils/use-controllable-state.js';\nimport { useEvent } from '../../utils/use-event.js';\nfunction useCheckboxGroup(props = {}) {\n  const {\n    defaultValue,\n    value: controlledValue,\n    onValueChange,\n    disabled,\n    readOnly,\n    name,\n    invalid\n  } = props;\n  const interactive = !(disabled || readOnly);\n  const onChangeProp = useEvent(onValueChange, {\n    sync: true\n  });\n  const [value, setValue] = useControllableState({\n    value: controlledValue,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp\n  });\n  const isChecked = val => {\n    return value.some(v => String(v) === String(val));\n  };\n  const toggleValue = val => {\n    isChecked(val) ? removeValue(val) : addValue(val);\n  };\n  const addValue = val => {\n    if (!interactive) return;\n    if (isChecked(val)) return;\n    setValue(value.concat(val));\n  };\n  const removeValue = val => {\n    if (!interactive) return;\n    setValue(value.filter(v => String(v) !== String(val)));\n  };\n  const getItemProps = props2 => {\n    return {\n      checked: props2.value != null ? isChecked(props2.value) : void 0,\n      onCheckedChange() {\n        if (props2.value != null) {\n          toggleValue(props2.value);\n        }\n      },\n      name,\n      disabled,\n      readOnly,\n      invalid\n    };\n  };\n  return {\n    isChecked,\n    value,\n    name,\n    disabled: !!disabled,\n    readOnly: !!readOnly,\n    invalid: !!invalid,\n    setValue,\n    addValue,\n    toggleValue,\n    getItemProps\n  };\n}\nexport { useCheckboxGroup };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
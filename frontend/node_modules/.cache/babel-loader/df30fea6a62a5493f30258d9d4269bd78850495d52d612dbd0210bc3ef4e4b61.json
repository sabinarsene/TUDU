{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { defineStyle } from '@chakra-ui/styled-system';\nimport { callAll, cx } from '@chakra-ui/utils';\nimport { usePopoverContext, usePopoverStyles } from './popover-context.mjs';\nimport { PopoverTransition } from './popover-transition.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\nconst PopoverContent = forwardRef(function PopoverContent2(props, ref) {\n  const {\n    rootProps,\n    motionProps,\n    ...contentProps\n  } = props;\n  const {\n    getPopoverProps,\n    getPopoverPositionerProps,\n    onAnimationComplete\n  } = usePopoverContext();\n  const styles = usePopoverStyles();\n  const contentStyles = defineStyle({\n    position: \"relative\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    ...styles.content\n  });\n  return /* @__PURE__ */jsx(chakra.div, {\n    ...getPopoverPositionerProps(rootProps),\n    __css: styles.popper,\n    className: \"chakra-popover__popper\",\n    children: /* @__PURE__ */jsx(PopoverTransition, {\n      ...motionProps,\n      ...getPopoverProps(contentProps, ref),\n      onAnimationComplete: callAll(onAnimationComplete, contentProps.onAnimationComplete),\n      className: cx(\"chakra-popover__content\", props.className),\n      __css: contentStyles\n    })\n  });\n});\nPopoverContent.displayName = \"PopoverContent\";\nexport { PopoverContent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
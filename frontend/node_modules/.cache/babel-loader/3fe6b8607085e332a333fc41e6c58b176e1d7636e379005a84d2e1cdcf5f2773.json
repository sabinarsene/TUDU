{"ast":null,"code":"import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\nlet shouldForward = key => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n  if (!isValidProp) return;\n  // Explicitly filter our events\n  shouldForward = key => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\r\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\r\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\r\n * of these should be passed to the underlying DOM node.\r\n *\r\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\r\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\r\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\r\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\r\n *\r\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\r\n * actually required.\r\n */\ntry {\n  /**\r\n   * We attempt to import this package but require won't be defined in esm environments, in that case\r\n   * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\r\n   * in favour of explicit injection.\r\n   */\n  loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n} catch (_a) {\n  // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n  const filteredProps = {};\n  for (const key in props) {\n    /**\r\n     * values is considered a valid prop by Emotion, so if it's present\r\n     * this will be rendered out to the DOM unless explicitly filtered.\r\n     *\r\n     * We check the type as it could be used with the `feColorMatrix`\r\n     * element, which we support.\r\n     */\n    if (key === \"values\" && typeof props.values === \"object\") continue;\n    if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) ||\n    // If trying to use native HTML drag events, forward drag listeners\n    props[\"draggable\"] && key.startsWith(\"onDrag\")) {\n      filteredProps[key] = props[key];\n    }\n  }\n  return filteredProps;\n}\nexport { filterProps, loadExternalIsValidProp };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
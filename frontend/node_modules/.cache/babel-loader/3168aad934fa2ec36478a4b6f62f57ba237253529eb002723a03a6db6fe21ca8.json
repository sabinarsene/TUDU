{"ast":null,"code":"import { API_BASE_URL } from '../config/api';\n\n// Use consistent API URL format\nconst API_ENDPOINT = `${API_BASE_URL}/api/requests`;\n\n// Get all requests\nexport const getRequests = async (filters = {}) => {\n  try {\n    const queryParams = new URLSearchParams(filters).toString();\n    const fullUrl = `${API_ENDPOINT}${queryParams ? `?${queryParams}` : ''}`;\n    const response = await fetch(fullUrl);\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching requests:', error);\n    throw error;\n  }\n};\n\n// Get request by ID\nexport const getRequestById = async id => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/${id}`);\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching request:', error);\n    throw error;\n  }\n};\n\n// Create new request\nexport const createRequest = async requestData => {\n  try {\n    const formattedData = {\n      title: requestData.get('title'),\n      category: requestData.get('category'),\n      description: requestData.get('description'),\n      budget: parseFloat(requestData.get('budget')),\n      currency: requestData.get('currency'),\n      location: requestData.get('location'),\n      deadline: requestData.get('deadline'),\n      contactPreference: requestData.get('contactPreference')\n    };\n    console.log('Creating request with formatted data:', formattedData);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Nu ești autentificat');\n    }\n    const response = await fetch(API_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(formattedData)\n    });\n    if (!response.ok) {\n      let errorMessage = 'Failed to create request';\n      try {\n        const errorData = await response.json();\n        console.error('Server error response:', errorData);\n        errorMessage = errorData.message || errorMessage;\n      } catch (e) {\n        console.error('Error parsing error response:', e);\n      }\n      throw new Error(errorMessage);\n    }\n    const data = await response.json();\n    console.log('Request created successfully:', data);\n    return data;\n  } catch (error) {\n    console.error('Error creating request:', error);\n    throw error;\n  }\n};\n\n// Update request\nexport const updateRequest = async (id, requestData) => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify(requestData)\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating request:', error);\n    throw error;\n  }\n};\n\n// Delete request\nexport const deleteRequest = async id => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error deleting request:', error);\n    throw error;\n  }\n};\n\n// Get user requests\nexport const getUserRequests = async userId => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/user/${userId}`);\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching user requests:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Fetch all requests from the API\r\n * @returns {Promise<Array>} Array of requests\r\n */\nexport const fetchRequests = async () => {\n  try {\n    const fullUrl = `${API_ENDPOINT}`;\n    console.log('Fetching requests from:', fullUrl);\n    const response = await fetch(fullUrl);\n\n    // Încearcă să obții răspunsul JSON, chiar dacă statusul nu este ok\n    let responseData;\n    try {\n      responseData = await response.json();\n    } catch (jsonError) {\n      console.error('Error parsing JSON response:', jsonError);\n      return [];\n    }\n    if (!response.ok) {\n      console.error('Server returned error:', responseData);\n      return [];\n    }\n\n    // Ne asigurăm că returnăm întotdeauna un array\n    if (Array.isArray(responseData)) {\n      return responseData;\n    } else if (responseData && responseData.requests) {\n      return responseData.requests;\n    } else {\n      console.error('Unexpected response format:', responseData);\n      return [];\n    }\n  } catch (error) {\n    console.error('Error fetching requests:', error);\n    return [];\n  }\n};\n\n/**\r\n * Fetch requests for a specific user\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Array>} Array of requests\r\n */\nexport const fetchUserRequests = async userId => {\n  try {\n    // Încercăm să facem apelul API\n    try {\n      const response = await fetch(`${API_ENDPOINT}/user/${userId}`);\n      if (!response.ok) {\n        // Dacă primim 404, returnăm date mock\n        if (response.status === 404) {\n          console.log(`Endpoint /requests/user/${userId} nu este disponibil, returnăm date mock`);\n          return getMockUserRequests(userId);\n        }\n        throw new Error(`Error fetching user requests: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      // Dacă primim orice eroare, returnăm date mock\n      console.error(`Error fetching requests for user ${userId}:`, error);\n      return getMockUserRequests(userId);\n    }\n  } catch (error) {\n    console.error(`Error fetching requests for user ${userId}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Generează date mock pentru cererile unui utilizator\r\n * @param {string} userId - ID-ul utilizatorului\r\n * @returns {Array} Array de cereri mock\r\n */\nconst getMockUserRequests = userId => {\n  // Generăm un număr aleatoriu de cereri între 0 și 3\n  const numRequests = Math.floor(Math.random() * 4);\n  const requests = [];\n  const categories = ['Instalații', 'Curățenie', 'Transport', 'Reparații', 'IT', 'Design', 'Educație'];\n  const locations = ['București', 'Cluj-Napoca', 'Timișoara', 'Iași', 'Brașov', 'Constanța'];\n  const deadlines = ['Urgent', '1-3 zile', 'O săptămână', '2 săptămâni', 'O lună'];\n\n  // Generăm cereri aleatorii\n  for (let i = 0; i < numRequests; i++) {\n    const request = {\n      id: `mock-request-${i}`,\n      title: `Cerere Mock ${i + 1}`,\n      description: `Aceasta este o descriere mock pentru cererea ${i + 1} a utilizatorului cu ID-ul ${userId}.`,\n      category: categories[Math.floor(Math.random() * categories.length)],\n      location: locations[Math.floor(Math.random() * locations.length)],\n      budget: Math.floor(Math.random() * 1000) + 100,\n      currency: 'RON',\n      deadline: deadlines[Math.floor(Math.random() * deadlines.length)],\n      images: [],\n      user: {\n        id: userId,\n        name: `Utilizator ${userId}`,\n        image: null\n      }\n    };\n    requests.push(request);\n  }\n  return requests;\n};","map":{"version":3,"names":["API_BASE_URL","API_ENDPOINT","getRequests","filters","queryParams","URLSearchParams","toString","fullUrl","response","fetch","json","error","console","getRequestById","id","createRequest","requestData","formattedData","title","get","category","description","budget","parseFloat","currency","location","deadline","contactPreference","log","token","localStorage","getItem","Error","method","headers","body","JSON","stringify","ok","errorMessage","errorData","message","e","data","updateRequest","deleteRequest","getUserRequests","userId","fetchRequests","responseData","jsonError","Array","isArray","requests","fetchUserRequests","status","getMockUserRequests","statusText","numRequests","Math","floor","random","categories","locations","deadlines","i","request","length","images","user","name","image","push"],"sources":["C:/Users/sabin.arsene/Desktop/Tudu-app/TUDU/frontend/src/services/requestApi.js"],"sourcesContent":["import { API_BASE_URL } from '../config/api';\r\n\r\n// Use consistent API URL format\r\nconst API_ENDPOINT = `${API_BASE_URL}/api/requests`;\r\n\r\n// Get all requests\r\nexport const getRequests = async (filters = {}) => {\r\n  try {\r\n    const queryParams = new URLSearchParams(filters).toString();\r\n    const fullUrl = `${API_ENDPOINT}${queryParams ? `?${queryParams}` : ''}`;\r\n    const response = await fetch(fullUrl);\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching requests:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get request by ID\r\nexport const getRequestById = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_ENDPOINT}/${id}`);\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching request:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create new request\r\nexport const createRequest = async (requestData) => {\r\n  try {\r\n    const formattedData = {\r\n      title: requestData.get('title'),\r\n      category: requestData.get('category'),\r\n      description: requestData.get('description'),\r\n      budget: parseFloat(requestData.get('budget')),\r\n      currency: requestData.get('currency'),\r\n      location: requestData.get('location'),\r\n      deadline: requestData.get('deadline'),\r\n      contactPreference: requestData.get('contactPreference')\r\n    };\r\n\r\n    console.log('Creating request with formatted data:', formattedData);\r\n\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Nu ești autentificat');\r\n    }\r\n\r\n    const response = await fetch(API_ENDPOINT, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(formattedData)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      let errorMessage = 'Failed to create request';\r\n      try {\r\n        const errorData = await response.json();\r\n        console.error('Server error response:', errorData);\r\n        errorMessage = errorData.message || errorMessage;\r\n      } catch (e) {\r\n        console.error('Error parsing error response:', e);\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Request created successfully:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error creating request:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update request\r\nexport const updateRequest = async (id, requestData) => {\r\n  try {\r\n    const response = await fetch(`${API_ENDPOINT}/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n      },\r\n      body: JSON.stringify(requestData)\r\n    });\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error updating request:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete request\r\nexport const deleteRequest = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_ENDPOINT}/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n      }\r\n    });\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error deleting request:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get user requests\r\nexport const getUserRequests = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${API_ENDPOINT}/user/${userId}`);\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching user requests:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch all requests from the API\r\n * @returns {Promise<Array>} Array of requests\r\n */\r\nexport const fetchRequests = async () => {\r\n  try {\r\n    const fullUrl = `${API_ENDPOINT}`;\r\n    console.log('Fetching requests from:', fullUrl);\r\n    \r\n    const response = await fetch(fullUrl);\r\n    \r\n    // Încearcă să obții răspunsul JSON, chiar dacă statusul nu este ok\r\n    let responseData;\r\n    try {\r\n      responseData = await response.json();\r\n    } catch (jsonError) {\r\n      console.error('Error parsing JSON response:', jsonError);\r\n      return [];\r\n    }\r\n    \r\n    if (!response.ok) {\r\n      console.error('Server returned error:', responseData);\r\n      return [];\r\n    }\r\n    \r\n    // Ne asigurăm că returnăm întotdeauna un array\r\n    if (Array.isArray(responseData)) {\r\n      return responseData;\r\n    } else if (responseData && responseData.requests) {\r\n      return responseData.requests;\r\n    } else {\r\n      console.error('Unexpected response format:', responseData);\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching requests:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch requests for a specific user\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Array>} Array of requests\r\n */\r\nexport const fetchUserRequests = async (userId) => {\r\n  try {\r\n    // Încercăm să facem apelul API\r\n    try {\r\n      const response = await fetch(`${API_ENDPOINT}/user/${userId}`);\r\n      \r\n      if (!response.ok) {\r\n        // Dacă primim 404, returnăm date mock\r\n        if (response.status === 404) {\r\n          console.log(`Endpoint /requests/user/${userId} nu este disponibil, returnăm date mock`);\r\n          return getMockUserRequests(userId);\r\n        }\r\n        throw new Error(`Error fetching user requests: ${response.statusText}`);\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      // Dacă primim orice eroare, returnăm date mock\r\n      console.error(`Error fetching requests for user ${userId}:`, error);\r\n      return getMockUserRequests(userId);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching requests for user ${userId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Generează date mock pentru cererile unui utilizator\r\n * @param {string} userId - ID-ul utilizatorului\r\n * @returns {Array} Array de cereri mock\r\n */\r\nconst getMockUserRequests = (userId) => {\r\n  // Generăm un număr aleatoriu de cereri între 0 și 3\r\n  const numRequests = Math.floor(Math.random() * 4);\r\n  const requests = [];\r\n  \r\n  const categories = ['Instalații', 'Curățenie', 'Transport', 'Reparații', 'IT', 'Design', 'Educație'];\r\n  const locations = ['București', 'Cluj-Napoca', 'Timișoara', 'Iași', 'Brașov', 'Constanța'];\r\n  const deadlines = ['Urgent', '1-3 zile', 'O săptămână', '2 săptămâni', 'O lună'];\r\n  \r\n  // Generăm cereri aleatorii\r\n  for (let i = 0; i < numRequests; i++) {\r\n    const request = {\r\n      id: `mock-request-${i}`,\r\n      title: `Cerere Mock ${i + 1}`,\r\n      description: `Aceasta este o descriere mock pentru cererea ${i + 1} a utilizatorului cu ID-ul ${userId}.`,\r\n      category: categories[Math.floor(Math.random() * categories.length)],\r\n      location: locations[Math.floor(Math.random() * locations.length)],\r\n      budget: Math.floor(Math.random() * 1000) + 100,\r\n      currency: 'RON',\r\n      deadline: deadlines[Math.floor(Math.random() * deadlines.length)],\r\n      images: [],\r\n      user: {\r\n        id: userId,\r\n        name: `Utilizator ${userId}`,\r\n        image: null\r\n      }\r\n    };\r\n    requests.push(request);\r\n  }\r\n  \r\n  return requests;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
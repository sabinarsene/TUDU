{"ast":null,"code":"'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport copy from 'copy-to-clipboard';\nfunction useClipboard(value, optionsOrTimeout = {}) {\n  const [hasCopied, setHasCopied] = useState(false);\n  const [valueState, setValueState] = useState(value);\n  useEffect(() => setValueState(value), [value]);\n  const {\n    timeout = 1500,\n    ...copyOptions\n  } = typeof optionsOrTimeout === \"number\" ? {\n    timeout: optionsOrTimeout\n  } : optionsOrTimeout;\n  const onCopy = useCallback(valueToCopy => {\n    const value2 = typeof valueToCopy === \"string\" ? valueToCopy : valueState;\n    if (\"clipboard\" in navigator) {\n      navigator.clipboard.writeText(value2).then(() => setHasCopied(true)).catch(() => setHasCopied(copy(value2, copyOptions)));\n    } else {\n      setHasCopied(copy(value2, copyOptions));\n    }\n  }, [valueState, copyOptions]);\n  useEffect(() => {\n    let timeoutId = null;\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false);\n      }, timeout);\n    }\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [timeout, hasCopied]);\n  return {\n    value: valueState,\n    setValue: setValueState,\n    onCopy,\n    hasCopied\n  };\n}\nexport { useClipboard };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
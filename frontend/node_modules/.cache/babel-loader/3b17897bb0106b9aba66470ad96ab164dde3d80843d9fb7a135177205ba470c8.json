{"ast":null,"code":"// src/index.ts\nvar rafId;\nvar observedElements = /* @__PURE__ */new Map();\nvar getRectFn = el => el.getBoundingClientRect();\nfunction trackElementRect(el, options) {\n  const {\n    scope = \"rect\",\n    getRect = getRectFn,\n    onChange\n  } = options;\n  const loop = getLoopFn({\n    scope,\n    getRect\n  });\n  const data = observedElements.get(el);\n  if (!data) {\n    observedElements.set(el, {\n      rect: {},\n      callbacks: [onChange]\n    });\n    if (observedElements.size === 1) {\n      rafId = requestAnimationFrame(loop);\n    }\n  } else {\n    data.callbacks.push(onChange);\n    onChange(getRect(el));\n  }\n  return function unobserve() {\n    const data2 = observedElements.get(el);\n    if (!data2) return;\n    const index = data2.callbacks.indexOf(onChange);\n    if (index > -1) {\n      data2.callbacks.splice(index, 1);\n    }\n    if (data2.callbacks.length === 0) {\n      observedElements.delete(el);\n      if (observedElements.size === 0) {\n        cancelAnimationFrame(rafId);\n      }\n    }\n  };\n}\nfunction getLoopFn(options) {\n  const {\n    scope,\n    getRect\n  } = options;\n  const isEqual = getEqualityFn(scope);\n  return function loop() {\n    const changedRectsData = [];\n    observedElements.forEach((data, element) => {\n      const newRect = getRect(element);\n      if (!isEqual(data.rect, newRect)) {\n        data.rect = newRect;\n        changedRectsData.push(data);\n      }\n    });\n    changedRectsData.forEach(data => {\n      data.callbacks.forEach(callback => callback(data.rect));\n    });\n    rafId = requestAnimationFrame(loop);\n  };\n}\nvar isEqualSize = (a, b) => a.width === b.width && a.height === b.height;\nvar isEqualPosition = (a, b) => a.top === b.top && a.left === b.left;\nvar isEqualRect = (a, b) => isEqualSize(a, b) && isEqualPosition(a, b);\nfunction getEqualityFn(scope) {\n  if (scope === \"size\") return isEqualSize;\n  if (scope === \"position\") return isEqualPosition;\n  return isEqualRect;\n}\nexport { trackElementRect };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
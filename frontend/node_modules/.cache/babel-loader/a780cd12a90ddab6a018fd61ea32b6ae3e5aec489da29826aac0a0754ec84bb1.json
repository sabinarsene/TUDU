{"ast":null,"code":"'use client';\n\nimport * as presence from '@zag-js/presence';\nimport { useMachine, normalizeProps } from '@zag-js/react';\nimport { useRef } from 'react';\nimport { useEvent } from '../../utils/use-event.js';\nconst usePresence = props => {\n  const {\n    lazyMount,\n    unmountOnExit,\n    present,\n    ...rest\n  } = props;\n  const wasEverPresent = useRef(false);\n  const context = {\n    ...rest,\n    present,\n    onExitComplete: useEvent(props.onExitComplete)\n  };\n  const [state, send] = useMachine(presence.machine(context), {\n    context\n  });\n  const api = presence.connect(state, send, normalizeProps);\n  if (api.present) {\n    wasEverPresent.current = true;\n  }\n  const unmounted = !api.present && !wasEverPresent.current && lazyMount || unmountOnExit && !api.present && wasEverPresent.current;\n  const getPresenceProps = () => ({\n    \"data-state\": present ? \"open\" : \"closed\",\n    hidden: !api.present\n  });\n  return {\n    ref: api.setNode,\n    getPresenceProps,\n    present: api.present,\n    unmounted\n  };\n};\nexport { usePresence };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { Steps } from '@ark-ui/react/steps';\nimport { forwardRef } from 'react';\nimport { createSlotRecipeContext } from '../../styled-system/create-slot-recipe-context.js';\nimport { chakra } from '../../styled-system/factory.js';\nimport { CheckIcon } from '../icons.js';\nconst {\n  withProvider,\n  withContext,\n  useStyles: useStepsStyles,\n  PropsProvider\n} = createSlotRecipeContext({\n  key: \"steps\"\n});\nconst StepsRootProvider = withProvider(Steps.RootProvider, \"root\", {\n  forwardAsChild: true\n});\nconst StepsRoot = withProvider(Steps.Root, \"root\", {\n  forwardAsChild: true\n});\nconst StepsPropsProvider = PropsProvider;\nconst StepsList = withContext(Steps.List, \"list\", {\n  forwardAsChild: true\n});\nconst StepsItem = withContext(Steps.Item, \"item\", {\n  forwardAsChild: true\n});\nconst StepsTrigger = withContext(Steps.Trigger, \"trigger\", {\n  forwardAsChild: true\n});\nconst StepsContent = withContext(Steps.Content, \"content\", {\n  forwardAsChild: true\n});\nconst StepsCompletedContent = withContext(Steps.CompletedContent, \"content\");\nconst StepsNumber = forwardRef(function StepsNumber2(props, ref) {\n  return /* @__PURE__ */jsx(Steps.ItemContext, {\n    children: api => /* @__PURE__ */jsx(chakra.div, {\n      ref,\n      ...props,\n      children: api.index + 1\n    })\n  });\n});\nconst StepsTitle = withContext(\"div\", \"title\");\nconst StepsDescription = withContext(\"div\", \"description\");\nconst StepsSeparator = withContext(Steps.Separator, \"separator\", {\n  forwardAsChild: true\n});\nconst StepsStatus = props => {\n  return /* @__PURE__ */jsx(Steps.ItemContext, {\n    children: api => {\n      if (api.current) return /* @__PURE__ */jsx(Fragment, {\n        children: props.current ?? props.incomplete\n      });\n      if (api.completed) return /* @__PURE__ */jsx(Fragment, {\n        children: props.complete\n      });\n      return /* @__PURE__ */jsx(Fragment, {\n        children: props.incomplete ?? props.current\n      });\n    }\n  });\n};\nconst StepsIndicator = withContext(Steps.Indicator, \"indicator\", {\n  forwardAsChild: true,\n  defaultProps: {\n    children: /* @__PURE__ */jsx(StepsStatus, {\n      complete: /* @__PURE__ */jsx(CheckIcon, {}),\n      incomplete: /* @__PURE__ */jsx(StepsNumber, {})\n    })\n  }\n});\nconst StepsNextTrigger = withContext(Steps.NextTrigger, \"nextTrigger\", {\n  forwardAsChild: true\n});\nconst StepsPrevTrigger = withContext(Steps.PrevTrigger, \"prevTrigger\", {\n  forwardAsChild: true\n});\nconst StepsContext = Steps.Context;\nconst StepsItemContext = Steps.ItemContext;\nexport { StepsCompletedContent, StepsContent, StepsContext, StepsDescription, StepsIndicator, StepsItem, StepsItemContext, StepsList, StepsNextTrigger, StepsNumber, StepsPrevTrigger, StepsPropsProvider, StepsRoot, StepsRootProvider, StepsSeparator, StepsStatus, StepsTitle, StepsTrigger, useStepsStyles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
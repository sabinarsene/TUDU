{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope, dataAttr } from '@zag-js/dom-query';\nimport { createSplitProps, fromLength, compact, isEqual, isValueWithinRange } from '@zag-js/utils';\nimport { createMachine } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\n\n// src/steps.anatomy.ts\nvar anatomy = createAnatomy(\"steps\").parts(\"root\", \"list\", \"item\", \"trigger\", \"indicator\", \"separator\", \"content\", \"nextTrigger\", \"prevTrigger\", \"progress\");\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `steps:${ctx.id}`,\n  getListId: ctx => ctx.ids?.list ?? `steps:${ctx.id}:list`,\n  getTriggerId: (ctx, index) => ctx.ids?.triggerId?.(index) ?? `steps:${ctx.id}:trigger:${index}`,\n  getContentId: (ctx, index) => ctx.ids?.contentId?.(index) ?? `steps:${ctx.id}:content:${index}`\n});\n\n// src/steps.connect.ts\nfunction connect(state, send, normalize) {\n  const step = state.context.step;\n  const count = state.context.count;\n  const percent = state.context.percent;\n  const hasNextStep = state.context.hasNextStep;\n  const hasPrevStep = state.context.hasPrevStep;\n  const getItemState = props2 => ({\n    triggerId: dom.getTriggerId(state.context, props2.index),\n    contentId: dom.getContentId(state.context, props2.index),\n    current: props2.index === step,\n    completed: props2.index < step,\n    incomplete: props2.index > step,\n    index: props2.index,\n    first: props2.index === 0,\n    last: props2.index === count - 1\n  });\n  const goToNextStep = () => {\n    send({\n      type: \"STEP.NEXT\",\n      src: \"next.trigger.click\"\n    });\n  };\n  const goToPrevStep = () => {\n    send({\n      type: \"STEP.PREV\",\n      src: \"prev.trigger.click\"\n    });\n  };\n  const resetStep = () => {\n    send({\n      type: \"STEP.RESET\",\n      src: \"reset.trigger.click\"\n    });\n  };\n  const setStep = value => {\n    send({\n      type: \"STEP.SET\",\n      value,\n      src: \"api.setValue\"\n    });\n  };\n  return {\n    value: step,\n    count,\n    percent,\n    hasNextStep,\n    hasPrevStep,\n    isCompleted: state.context.completed,\n    goToNextStep,\n    goToPrevStep,\n    resetStep,\n    getItemState,\n    setStep,\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: dom.getRootId(state.context),\n        dir: state.context.dir,\n        \"data-orientation\": state.context.orientation,\n        style: {\n          \"--percent\": `${percent}%`\n        }\n      });\n    },\n    getListProps() {\n      const arr = fromLength(state.context.count);\n      const triggerIds = arr.map((_, index) => dom.getTriggerId(state.context, index));\n      return normalize.element({\n        ...parts.list.attrs,\n        dir: state.context.dir,\n        id: dom.getListId(state.context),\n        role: \"tablist\",\n        \"aria-owns\": triggerIds.join(\" \"),\n        \"aria-orientation\": state.context.orientation,\n        \"data-orientation\": state.context.orientation\n      });\n    },\n    getItemProps(props2) {\n      const itemState = getItemState(props2);\n      return normalize.element({\n        ...parts.item.attrs,\n        dir: state.context.dir,\n        \"aria-current\": itemState.current ? \"step\" : void 0,\n        \"data-orientation\": state.context.orientation\n      });\n    },\n    getTriggerProps(props2) {\n      const itemState = getItemState(props2);\n      return normalize.button({\n        ...parts.trigger.attrs,\n        id: itemState.triggerId,\n        role: \"tab\",\n        dir: state.context.dir,\n        tabIndex: !state.context.linear || itemState.current ? 0 : -1,\n        \"aria-selected\": itemState.current,\n        \"aria-controls\": itemState.contentId,\n        \"data-state\": itemState.current ? \"open\" : \"closed\",\n        \"data-orientation\": state.context.orientation,\n        \"data-complete\": dataAttr(itemState.completed),\n        \"data-current\": dataAttr(itemState.current),\n        \"data-incomplete\": dataAttr(itemState.incomplete),\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (state.context.linear) return;\n          send({\n            type: \"STEP.SET\",\n            value: props2.index,\n            src: \"trigger.click\"\n          });\n        }\n      });\n    },\n    getContentProps(props2) {\n      const itemState = getItemState(props2);\n      return normalize.element({\n        ...parts.content.attrs,\n        dir: state.context.dir,\n        id: itemState.contentId,\n        role: \"tabpanel\",\n        tabIndex: 0,\n        hidden: !itemState.current,\n        \"data-state\": itemState.current ? \"open\" : \"closed\",\n        \"data-orientation\": state.context.orientation,\n        \"aria-labelledby\": itemState.triggerId\n      });\n    },\n    getIndicatorProps(props2) {\n      const itemState = getItemState(props2);\n      return normalize.element({\n        ...parts.indicator.attrs,\n        dir: state.context.dir,\n        \"aria-hidden\": true,\n        \"data-complete\": dataAttr(itemState.completed),\n        \"data-current\": dataAttr(itemState.current),\n        \"data-incomplete\": dataAttr(itemState.incomplete)\n      });\n    },\n    getSeparatorProps(props2) {\n      const itemState = getItemState(props2);\n      return normalize.element({\n        ...parts.separator.attrs,\n        dir: state.context.dir,\n        \"data-orientation\": state.context.orientation,\n        \"data-complete\": dataAttr(itemState.completed),\n        \"data-current\": dataAttr(itemState.current),\n        \"data-incomplete\": dataAttr(itemState.incomplete)\n      });\n    },\n    getNextTriggerProps() {\n      return normalize.button({\n        ...parts.nextTrigger.attrs,\n        dir: state.context.dir,\n        type: \"button\",\n        disabled: !hasNextStep,\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          goToNextStep();\n        }\n      });\n    },\n    getPrevTriggerProps() {\n      return normalize.button({\n        dir: state.context.dir,\n        ...parts.prevTrigger.attrs,\n        type: \"button\",\n        disabled: !hasPrevStep,\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          goToPrevStep();\n        }\n      });\n    },\n    getProgressProps() {\n      return normalize.element({\n        dir: state.context.dir,\n        ...parts.progress.attrs,\n        role: \"progressbar\",\n        \"aria-valuenow\": percent,\n        \"aria-valuemin\": 0,\n        \"aria-valuemax\": 100,\n        \"aria-valuetext\": `${percent}% complete`,\n        \"data-complete\": dataAttr(percent === 100)\n      });\n    }\n  };\n}\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"steps\",\n    initial: \"idle\",\n    context: {\n      step: 0,\n      count: 1,\n      linear: false,\n      orientation: \"horizontal\",\n      ...ctx\n    },\n    computed: {\n      percent: ctx2 => ctx2.step / ctx2.count * 100,\n      hasNextStep: ctx2 => ctx2.step < ctx2.count,\n      hasPrevStep: ctx2 => ctx2.step > 0,\n      completed: ctx2 => ctx2.step === ctx2.count\n    },\n    states: {\n      idle: {\n        on: {\n          \"STEP.SET\": {\n            actions: \"setStep\"\n          },\n          \"STEP.NEXT\": {\n            actions: \"goToNextStep\"\n          },\n          \"STEP.PREV\": {\n            actions: \"goToPrevStep\"\n          },\n          \"STEP.RESET\": {\n            actions: \"resetStep\"\n          }\n        }\n      }\n    }\n  }, {\n    actions: {\n      goToNextStep(ctx2) {\n        const value = Math.min(ctx2.step + 1, ctx2.count);\n        set.value(ctx2, value);\n      },\n      goToPrevStep(ctx2) {\n        const value = Math.max(ctx2.step - 1, 0);\n        set.value(ctx2, value);\n      },\n      resetStep(ctx2) {\n        set.value(ctx2, 0);\n      },\n      setStep(ctx2, evt) {\n        set.value(ctx2, evt.value);\n      }\n    }\n  });\n}\nvar validateStep = (ctx, step) => {\n  if (!isValueWithinRange(step, 0, ctx.count)) {\n    throw new RangeError(`[zag-js/steps] step index ${step} is out of bounds`);\n  }\n};\nvar set = {\n  value(ctx, step) {\n    if (isEqual(ctx.step, step)) return;\n    validateStep(ctx, step);\n    ctx.step = step;\n    ctx.onStepChange?.({\n      step\n    });\n    if (ctx.completed) {\n      ctx.onStepComplete?.();\n    }\n  }\n};\nvar props = createProps()([\"count\", \"dir\", \"getRootNode\", \"id\", \"ids\", \"linear\", \"onStepChange\", \"onStepComplete\", \"orientation\", \"step\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
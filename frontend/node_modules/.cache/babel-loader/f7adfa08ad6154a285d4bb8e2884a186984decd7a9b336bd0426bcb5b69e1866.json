{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { useCallbackRef } from './use-callback-ref.js';\nfunction listen(query, callback) {\n  try {\n    query.addEventListener(\"change\", callback);\n    return () => query.removeEventListener(\"change\", callback);\n  } catch (e) {\n    query.addListener(callback);\n    return () => query.removeListener(callback);\n  }\n}\nfunction useMediaQuery(query, options) {\n  const {\n    fallback: _fallback,\n    ssr = true,\n    getWindow\n  } = options;\n  const getWin = useCallbackRef(getWindow);\n  const queries = Array.isArray(query) ? query : [query];\n  const fallback = _fallback?.filter(v => v != null);\n  const [value, setValue] = useState(() => {\n    return queries.map((query2, index) => {\n      if (!ssr) {\n        const {\n          media,\n          matches\n        } = (getWindow?.() ?? window).matchMedia(query2);\n        return {\n          media,\n          matches\n        };\n      }\n      return {\n        media: query2,\n        matches: !!fallback[index]\n      };\n    });\n  });\n  useEffect(() => {\n    const win = getWin() ?? window;\n    setValue(prev => {\n      const current = queries.map(query2 => {\n        const {\n          media,\n          matches\n        } = win.matchMedia(query2);\n        return {\n          media,\n          matches\n        };\n      });\n      return prev.every((v, i) => v.matches === current[i].matches && v.media === current[i].media) ? prev : current;\n    });\n    const mql = queries.map(query2 => win.matchMedia(query2));\n    const handler = evt => {\n      setValue(prev => {\n        return prev.slice().map(item => {\n          if (item.media === evt.media) return {\n            ...item,\n            matches: evt.matches\n          };\n          return item;\n        });\n      });\n    };\n    const cleanups = mql.map(v => listen(v, handler));\n    return () => cleanups.forEach(fn => fn());\n  }, [getWin]);\n  return value.map(item => item.matches);\n}\nexport { useMediaQuery };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sabin.arsene\\\\Desktop\\\\Tudu-app\\\\TUDU\\\\frontend\\\\src\\\\pages\\\\ChatPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Flex } from '@chakra-ui/react';\nimport { Chat } from '../components/Chat/Chat';\nimport { ChatList } from '../components/Chat/ChatList';\nimport { useSocket } from '../contexts/SocketContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport axios from 'axios';\nimport './ChatPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ChatPage() {\n  _s();\n  const [selectedChat, setSelectedChat] = useState(null);\n  const [chats, setChats] = useState([]);\n  const {\n    socket\n  } = useSocket();\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    // Încarcă lista de conversații\n    const fetchChats = async () => {\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/chats`);\n        setChats(response.data);\n      } catch (error) {\n        console.error('Error fetching chats:', error);\n      }\n    };\n    fetchChats();\n  }, []);\n  useEffect(() => {\n    if (socket) {\n      socket.on('new_message', message => {\n        // Actualizează lista de chat-uri când primești un mesaj nou\n        setChats(prevChats => {\n          const chatIndex = prevChats.findIndex(chat => chat.userId === message.sender_id || chat.userId === message.receiver_id);\n          if (chatIndex === -1) {\n            // Adaugă un nou chat dacă nu există\n            return [{\n              userId: message.sender_id === user.id ? message.receiver_id : message.sender_id,\n              lastMessage: message.content,\n              timestamp: message.created_at,\n              unreadCount: message.sender_id !== user.id ? 1 : 0\n            }, ...prevChats];\n          }\n\n          // Actualizează chat-ul existent\n          const updatedChats = [...prevChats];\n          updatedChats[chatIndex] = {\n            ...updatedChats[chatIndex],\n            lastMessage: message.content,\n            timestamp: message.created_at,\n            unreadCount: message.sender_id !== user.id ? (updatedChats[chatIndex].unreadCount || 0) + 1 : updatedChats[chatIndex].unreadCount\n          };\n          return updatedChats;\n        });\n      });\n      return () => {\n        socket.off('new_message');\n      };\n    }\n  }, [socket, user]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-sidebar\",\n      children: /*#__PURE__*/_jsxDEV(ChatList, {\n        chats: chats,\n        selectedChat: selectedChat,\n        onSelectChat: setSelectedChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-main\",\n      children: selectedChat ? /*#__PURE__*/_jsxDEV(Chat, {\n        receiverId: selectedChat.userId,\n        receiverName: selectedChat.userName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Flex, {\n        justify: \"center\",\n        align: \"center\",\n        h: \"100%\",\n        color: \"gray.500\",\n        children: \"Select a chat to start messaging\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatPage, \"y7VjVexHdKnRVAx4016zYeTU7Dc=\", false, function () {\n  return [useSocket, useAuth];\n});\n_c = ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","Flex","Chat","ChatList","useSocket","useAuth","axios","jsxDEV","_jsxDEV","ChatPage","_s","selectedChat","setSelectedChat","chats","setChats","socket","user","fetchChats","response","get","process","env","REACT_APP_API_URL","data","error","console","on","message","prevChats","chatIndex","findIndex","chat","userId","sender_id","receiver_id","id","lastMessage","content","timestamp","created_at","unreadCount","updatedChats","off","className","children","onSelectChat","fileName","_jsxFileName","lineNumber","columnNumber","receiverId","receiverName","userName","justify","align","h","color","_c","$RefreshReg$"],"sources":["C:/Users/sabin.arsene/Desktop/Tudu-app/TUDU/frontend/src/pages/ChatPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Flex } from '@chakra-ui/react';\r\nimport { Chat } from '../components/Chat/Chat';\r\nimport { ChatList } from '../components/Chat/ChatList';\r\nimport { useSocket } from '../contexts/SocketContext';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport axios from 'axios';\r\nimport './ChatPage.css';\r\n\r\nexport function ChatPage() {\r\n  const [selectedChat, setSelectedChat] = useState(null);\r\n  const [chats, setChats] = useState([]);\r\n  const { socket } = useSocket();\r\n  const { user } = useAuth();\r\n\r\n  useEffect(() => {\r\n    // Încarcă lista de conversații\r\n    const fetchChats = async () => {\r\n      try {\r\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/chats`);\r\n        setChats(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching chats:', error);\r\n      }\r\n    };\r\n\r\n    fetchChats();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.on('new_message', (message) => {\r\n        // Actualizează lista de chat-uri când primești un mesaj nou\r\n        setChats(prevChats => {\r\n          const chatIndex = prevChats.findIndex(\r\n            chat => chat.userId === message.sender_id || chat.userId === message.receiver_id\r\n          );\r\n\r\n          if (chatIndex === -1) {\r\n            // Adaugă un nou chat dacă nu există\r\n            return [{\r\n              userId: message.sender_id === user.id ? message.receiver_id : message.sender_id,\r\n              lastMessage: message.content,\r\n              timestamp: message.created_at,\r\n              unreadCount: message.sender_id !== user.id ? 1 : 0\r\n            }, ...prevChats];\r\n          }\r\n\r\n          // Actualizează chat-ul existent\r\n          const updatedChats = [...prevChats];\r\n          updatedChats[chatIndex] = {\r\n            ...updatedChats[chatIndex],\r\n            lastMessage: message.content,\r\n            timestamp: message.created_at,\r\n            unreadCount: message.sender_id !== user.id ? \r\n              (updatedChats[chatIndex].unreadCount || 0) + 1 : \r\n              updatedChats[chatIndex].unreadCount\r\n          };\r\n\r\n          return updatedChats;\r\n        });\r\n      });\r\n\r\n      return () => {\r\n        socket.off('new_message');\r\n      };\r\n    }\r\n  }, [socket, user]);\r\n\r\n  return (\r\n    <div className=\"chat-page\">\r\n      <div className=\"chat-sidebar\">\r\n        <ChatList\r\n          chats={chats}\r\n          selectedChat={selectedChat}\r\n          onSelectChat={setSelectedChat}\r\n        />\r\n      </div>\r\n      <div className=\"chat-main\">\r\n        {selectedChat ? (\r\n          <Chat\r\n            receiverId={selectedChat.userId}\r\n            receiverName={selectedChat.userName}\r\n          />\r\n        ) : (\r\n          <Flex\r\n            justify=\"center\"\r\n            align=\"center\"\r\n            h=\"100%\"\r\n            color=\"gray.500\"\r\n          >\r\n            Select a chat to start messaging\r\n          </Flex>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
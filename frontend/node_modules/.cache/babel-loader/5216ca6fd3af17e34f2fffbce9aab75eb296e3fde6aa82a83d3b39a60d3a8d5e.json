{"ast":null,"code":"import { Polling } from \"./polling.js\";\n/**\r\n * HTTP long-polling based on the built-in `fetch()` method.\r\n *\r\n * Usage: browser, Node.js (since v18), Deno, Bun\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/fetch\r\n * @see https://caniuse.com/fetch\r\n * @see https://nodejs.org/api/globals.html#fetch\r\n */\nexport class Fetch extends Polling {\n  doPoll() {\n    this._fetch().then(res => {\n      if (!res.ok) {\n        return this.onError(\"fetch read error\", res.status, res);\n      }\n      res.text().then(data => this.onData(data));\n    }).catch(err => {\n      this.onError(\"fetch read error\", err);\n    });\n  }\n  doWrite(data, callback) {\n    this._fetch(data).then(res => {\n      if (!res.ok) {\n        return this.onError(\"fetch write error\", res.status, res);\n      }\n      callback();\n    }).catch(err => {\n      this.onError(\"fetch write error\", err);\n    });\n  }\n  _fetch(data) {\n    var _a;\n    const isPost = data !== undefined;\n    const headers = new Headers(this.opts.extraHeaders);\n    if (isPost) {\n      headers.set(\"content-type\", \"text/plain;charset=UTF-8\");\n    }\n    (_a = this.socket._cookieJar) === null || _a === void 0 ? void 0 : _a.appendCookies(headers);\n    return fetch(this.uri(), {\n      method: isPost ? \"POST\" : \"GET\",\n      body: isPost ? data : null,\n      headers,\n      credentials: this.opts.withCredentials ? \"include\" : \"omit\"\n    }).then(res => {\n      var _a;\n      // @ts-ignore getSetCookie() was added in Node.js v19.7.0\n      (_a = this.socket._cookieJar) === null || _a === void 0 ? void 0 : _a.parseCookies(res.headers.getSetCookie());\n      return res;\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
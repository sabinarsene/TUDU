{"ast":null,"code":"\"use strict\";\n\nimport { isObject } from './is.js';\nconst isNotNullish = element => element != null;\nfunction walkObject(target, predicate, options = {}) {\n  const {\n    stop,\n    getKey\n  } = options;\n  function inner(value, path = []) {\n    if (isObject(value) || Array.isArray(value)) {\n      const result = {};\n      for (const [prop, child] of Object.entries(value)) {\n        const key = getKey?.(prop, child) ?? prop;\n        const childPath = [...path, key];\n        if (stop?.(value, childPath)) {\n          return predicate(value, path);\n        }\n        const next = inner(child, childPath);\n        if (isNotNullish(next)) {\n          result[key] = next;\n        }\n      }\n      return result;\n    }\n    return predicate(value, path);\n  }\n  return inner(target);\n}\nfunction mapObject(obj, fn) {\n  if (Array.isArray(obj)) return obj.map(value => fn(value));\n  if (!isObject(obj)) {\n    if (obj !== null && obj !== void 0) return fn(obj);else return obj;\n  }\n  return walkObject(obj, value => fn(value));\n}\nexport { mapObject, walkObject };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
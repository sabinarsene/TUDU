{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx } from 'react/jsx-runtime';\nimport { Checkbox, useCheckboxContext } from '@ark-ui/react/checkbox';\nimport { forwardRef } from 'react';\nimport { createSlotRecipeContext } from '../../styled-system/create-slot-recipe-context.js';\nimport { chakra } from '../../styled-system/factory.js';\nimport { Checkmark } from '../checkmark/checkmark.js';\nconst {\n  withProvider,\n  withContext,\n  useStyles: useCheckboxStyles,\n  PropsProvider\n} = createSlotRecipeContext({\n  key: \"checkbox\"\n});\nconst CheckboxRootProvider = withProvider(Checkbox.RootProvider, \"root\", {\n  forwardAsChild: true\n});\nconst CheckboxRoot = withProvider(Checkbox.Root, \"root\", {\n  forwardAsChild: true\n});\nconst CheckboxPropsProvider = PropsProvider;\nconst CheckboxLabel = withContext(Checkbox.Label, \"label\", {\n  forwardAsChild: true\n});\nconst CheckboxIndicator = forwardRef(function CheckboxIndicator2(props, ref) {\n  const {\n    checked,\n    indeterminate,\n    ...rest\n  } = props;\n  const api = useCheckboxContext();\n  const styles = useCheckboxStyles();\n  if (checked && api.checked) {\n    return /* @__PURE__ */jsx(chakra.svg, {\n      ref,\n      asChild: true,\n      ...rest,\n      css: [styles.indicator, props.css],\n      children: checked\n    });\n  }\n  if (indeterminate && api.indeterminate) {\n    return /* @__PURE__ */jsx(chakra.svg, {\n      ref,\n      asChild: true,\n      ...rest,\n      css: [styles.indicator, props.css],\n      children: indeterminate\n    });\n  }\n  return /* @__PURE__ */jsx(Checkmark, {\n    ref,\n    checked: api.checked,\n    indeterminate: api.indeterminate,\n    disabled: api.disabled,\n    unstyled: true,\n    ...rest,\n    css: [styles.indicator, props.css]\n  });\n});\nconst CheckboxControl = withContext(Checkbox.Control, \"control\", {\n  forwardAsChild: true,\n  defaultProps: {\n    children: /* @__PURE__ */jsx(CheckboxIndicator, {})\n  }\n});\nconst CheckboxGroup = chakra(Checkbox.Group, {\n  base: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: \"1.5\"\n  }\n}, {\n  forwardAsChild: true\n});\nconst CheckboxContext = Checkbox.Context;\nconst CheckboxHiddenInput = Checkbox.HiddenInput;\nexport { CheckboxContext, CheckboxControl, CheckboxGroup, CheckboxHiddenInput, CheckboxIndicator, CheckboxLabel, CheckboxPropsProvider, CheckboxRoot, CheckboxRootProvider, useCheckboxStyles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
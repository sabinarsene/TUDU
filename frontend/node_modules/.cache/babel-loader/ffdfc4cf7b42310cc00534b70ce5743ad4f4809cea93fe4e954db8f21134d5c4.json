{"ast":null,"code":"import { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\r\n * Creates a `MotionValue` to track the state and velocity of a value.\r\n *\r\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\r\n *\r\n * ```jsx\r\n * export const MyComponent = () => {\r\n *   const scale = useMotionValue(1)\r\n *\r\n *   return <motion.div style={{ scale }} />\r\n * }\r\n * ```\r\n *\r\n * @param initial - The initial state.\r\n *\r\n * @public\r\n */\nfunction useMotionValue(initial) {\n  const value = useConstant(() => motionValue(initial));\n  /**\r\n   * If this motion value is being used in static mode, like on\r\n   * the Framer canvas, force components to rerender when the motion\r\n   * value is updated.\r\n   */\n  const {\n    isStatic\n  } = useContext(MotionConfigContext);\n  if (isStatic) {\n    const [, setLatest] = useState(initial);\n    useEffect(() => value.on(\"change\", setLatest), []);\n  }\n  return value;\n}\nexport { useMotionValue };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
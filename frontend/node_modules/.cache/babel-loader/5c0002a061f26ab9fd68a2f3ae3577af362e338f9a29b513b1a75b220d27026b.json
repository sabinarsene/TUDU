{"ast":null,"code":"/**\r\n * Unmemoized version of {@link useRefToCallback}\r\n * @see {@link useRefToCallback}\r\n * @param ref\r\n */\nexport function refToCallback(ref) {\n  return function (newValue) {\n    if (typeof ref === 'function') {\n      ref(newValue);\n    } else if (ref) {\n      ref.current = newValue;\n    }\n  };\n}\nvar nullCallback = function () {\n  return null;\n};\n// lets maintain a weak ref to, well, ref :)\n// not using `kashe` to keep this package small\nvar weakMem = new WeakMap();\nvar weakMemoize = function (ref) {\n  var usedRef = ref || nullCallback;\n  var storedRef = weakMem.get(usedRef);\n  if (storedRef) {\n    return storedRef;\n  }\n  var cb = refToCallback(usedRef);\n  weakMem.set(usedRef, cb);\n  return cb;\n};\n/**\r\n * Transforms a given `ref` into `callback`.\r\n *\r\n * To transform `callback` into ref use {@link useCallbackRef|useCallbackRef(undefined, callback)}\r\n *\r\n * @param {ReactRef} ref\r\n * @returns {Function}\r\n *\r\n * @see https://github.com/theKashey/use-callback-ref#reftocallback\r\n *\r\n * @example\r\n * const ref = useRef(0);\r\n * const setRef = useRefToCallback(ref);\r\n * ðŸ‘‰ setRef(10);\r\n * âœ… ref.current === 10\r\n */\nexport function useRefToCallback(ref) {\n  return weakMemoize(ref);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nimport { isString, isFunction } from '../utils/is.js';\nimport { memo } from '../utils/memo.js';\nimport { colorMix } from './color-mix.js';\nimport { mapToJson } from './map-to-json.js';\nfunction normalize(config) {\n  return config;\n}\nfunction normalizeConfig(config) {\n  return Object.fromEntries(Object.entries(config).map(([property, propertyConfig]) => {\n    return [property, normalize(propertyConfig)];\n  }));\n}\nfunction createUtility(options) {\n  const configs = normalizeConfig(options.config);\n  const tokens = options.tokens;\n  const shorthands = /* @__PURE__ */new Map();\n  const propValues = /* @__PURE__ */new Map();\n  function register(property, config) {\n    configs[property] = normalize(config);\n    assignProperty(property, config);\n  }\n  const assignProperty = (property, config) => {\n    const values = getPropertyValues(config);\n    if (!values) return;\n    propValues.set(property, values);\n    assignPropertyType(property, config);\n  };\n  const assignProperties = () => {\n    for (const [prop, config] of Object.entries(configs)) {\n      if (!config) continue;\n      assignProperty(prop, config);\n    }\n  };\n  const assignShorthands = () => {\n    for (const [property, config] of Object.entries(configs)) {\n      const {\n        shorthand\n      } = config ?? {};\n      if (!shorthand) continue;\n      const values = Array.isArray(shorthand) ? shorthand : [shorthand];\n      values.forEach(name => shorthands.set(name, property));\n    }\n  };\n  const assignColorPaletteProperty = () => {\n    const values = mapToJson(tokens.colorPaletteMap);\n    register(\"colorPalette\", {\n      values: Object.keys(values),\n      transform: memo(value => values[value])\n    });\n  };\n  const propTypes = /* @__PURE__ */new Map();\n  const assignPropertyType = (property, config) => {\n    if (!config) return;\n    const values = getPropertyValues(config, key => `type:Tokens[\"${key}\"]`);\n    if (typeof values === \"object\" && values.type) {\n      propTypes.set(property, /* @__PURE__ */new Set([`type:${values.type}`]));\n      return;\n    }\n    if (values) {\n      const keys2 = new Set(Object.keys(values));\n      propTypes.set(property, keys2);\n    }\n    const set = propTypes.get(property) ?? /* @__PURE__ */new Set();\n    if (config.property) {\n      propTypes.set(property, set.add(`CssProperties[\"${config.property}\"]`));\n    }\n  };\n  const assignPropertyTypes = () => {\n    for (const [property, propertyConfig] of Object.entries(configs)) {\n      if (!propertyConfig) continue;\n      assignPropertyType(property, propertyConfig);\n    }\n  };\n  const addPropertyType = (property, type) => {\n    const set = propTypes.get(property) ?? /* @__PURE__ */new Set();\n    propTypes.set(property, /* @__PURE__ */new Set([...set, ...type]));\n  };\n  const getTypes = () => {\n    const map = /* @__PURE__ */new Map();\n    for (const [prop, values] of propTypes.entries()) {\n      if (values.size === 0) {\n        map.set(prop, [\"string\"]);\n        continue;\n      }\n      const typeValues = Array.from(values).map(key => {\n        if (key.startsWith(\"CssProperties\")) return key;\n        if (key.startsWith(\"type:\")) return key.replace(\"type:\", \"\");\n        return JSON.stringify(key);\n      });\n      map.set(prop, typeValues);\n    }\n    return map;\n  };\n  const getPropertyValues = (config, resolveFn) => {\n    const {\n      values\n    } = config;\n    const fn = key => {\n      const value = resolveFn?.(key);\n      return value ? {\n        [value]: value\n      } : void 0;\n    };\n    if (isString(values)) {\n      return fn?.(values) ?? tokens.getCategoryValues(values) ?? {};\n    }\n    if (Array.isArray(values)) {\n      return values.reduce((result, value) => {\n        result[value] = value;\n        return result;\n      }, {});\n    }\n    if (isFunction(values)) {\n      return values(resolveFn ? fn : tokens.getCategoryValues);\n    }\n    return values;\n  };\n  const defaultTransform = memo((prop, value) => {\n    return {\n      [prop]: prop.startsWith(\"--\") ? tokens.getVar(value, value) : value\n    };\n  });\n  const tokenFn = Object.assign(tokens.getVar, {\n    raw: path => tokens.getByName(path)\n  });\n  const transform = memo((prop, raw) => {\n    const key = resolveShorthand(prop);\n    if (isString(raw) && !raw.includes(\"_EMO_\")) {\n      raw = tokens.expandReferenceInValue(raw);\n    }\n    const config = configs[key];\n    if (!config) {\n      return defaultTransform(key, raw);\n    }\n    const value = propValues.get(key)?.[raw];\n    if (!config.transform) {\n      return defaultTransform(prop, value ?? raw);\n    }\n    const _colorMix = value2 => colorMix(value2, tokenFn);\n    return config.transform(value ?? raw, {\n      raw,\n      token: tokenFn,\n      utils: {\n        colorMix: _colorMix\n      }\n    });\n  });\n  function build() {\n    assignShorthands();\n    assignColorPaletteProperty();\n    assignProperties();\n    assignPropertyTypes();\n  }\n  build();\n  const hasShorthand = shorthands.size > 0;\n  const resolveShorthand = memo(prop => {\n    return shorthands.get(prop) ?? prop;\n  });\n  const keys = () => {\n    return [...Array.from(shorthands.keys()), ...Object.keys(configs)];\n  };\n  const instance = {\n    keys,\n    hasShorthand,\n    transform,\n    shorthands,\n    resolveShorthand,\n    register,\n    getTypes,\n    addPropertyType\n  };\n  return instance;\n}\nexport { createUtility };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
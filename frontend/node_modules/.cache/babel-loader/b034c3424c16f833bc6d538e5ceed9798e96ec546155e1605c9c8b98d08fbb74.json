{"ast":null,"code":"import { CalendarDate as $35ea8db9cb2ccb90$export$99faa760c7908e4f } from \"./CalendarDate.mjs\";\nimport { mod as $2b4dce13dd5a17fa$export$842a2cf37af977e1 } from \"./utils.mjs\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nconst $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948320;\n// Number of days from the start of the year to the start of each month.\nconst $f3ed2e4472ae7e25$var$MONTH_START = [0, 31, 62, 93, 124, 155, 186, 216, 246, 276, 306, 336 // Esfand\n];\nclass $f3ed2e4472ae7e25$export$37fccdbfd14c5939 {\n  fromJulianDay(jd) {\n    let daysSinceEpoch = jd - $f3ed2e4472ae7e25$var$PERSIAN_EPOCH;\n    let year = 1 + Math.floor((33 * daysSinceEpoch + 3) / 12053);\n    let farvardin1 = 365 * (year - 1) + Math.floor((8 * year + 21) / 33);\n    let dayOfYear = daysSinceEpoch - farvardin1;\n    let month = dayOfYear < 216 ? Math.floor(dayOfYear / 31) : Math.floor((dayOfYear - 6) / 30);\n    let day = dayOfYear - $f3ed2e4472ae7e25$var$MONTH_START[month] + 1;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month + 1, day);\n  }\n  toJulianDay(date) {\n    let jd = $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 365 * (date.year - 1) + Math.floor((8 * date.year + 21) / 33);\n    jd += $f3ed2e4472ae7e25$var$MONTH_START[date.month - 1];\n    jd += date.day;\n    return jd;\n  }\n  getMonthsInYear() {\n    return 12;\n  }\n  getDaysInMonth(date) {\n    if (date.month <= 6) return 31;\n    if (date.month <= 11) return 30;\n    let isLeapYear = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(25 * date.year + 11, 33) < 8;\n    return isLeapYear ? 30 : 29;\n  }\n  getEras() {\n    return ['AP'];\n  }\n  getYearsInEra() {\n    // 9378-10-10 persian is 9999-12-31 gregorian.\n    // Round down to 9377 to set the maximum full year.\n    return 9377;\n  }\n  constructor() {\n    this.identifier = 'persian';\n  }\n}\nexport { $f3ed2e4472ae7e25$export$37fccdbfd14c5939 as PersianCalendar };\n//# sourceMappingURL=PersianCalendar.module.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
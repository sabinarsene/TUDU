{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx, Fragment } from 'react/jsx-runtime';\nimport { useMergeRefs } from '@chakra-ui/hooks';\nimport { omitThemingProps } from '@chakra-ui/styled-system';\nimport { dataAttr, cx } from '@chakra-ui/utils';\nimport { useMemo } from 'react';\nimport { useButtonGroup } from './button-context.mjs';\nimport { ButtonIcon } from './button-icon.mjs';\nimport { ButtonSpinner } from './button-spinner.mjs';\nimport { useButtonType } from './use-button-type.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { useStyleConfig } from '../system/use-style-config.mjs';\nimport { chakra } from '../system/factory.mjs';\nconst Button = forwardRef((props, ref) => {\n  const group = useButtonGroup();\n  const styles = useStyleConfig(\"Button\", {\n    ...group,\n    ...props\n  });\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    shouldWrapChildren,\n    ...rest\n  } = omitThemingProps(props);\n  const buttonStyles = useMemo(() => {\n    const _focus = {\n      ...styles?.[\"_focus\"],\n      zIndex: 1\n    };\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && {\n        _focus\n      })\n    };\n  }, [styles, group]);\n  const {\n    ref: _ref,\n    type: defaultType\n  } = useButtonType(as);\n  const contentProps = {\n    rightIcon,\n    leftIcon,\n    iconSpacing,\n    children,\n    shouldWrapChildren\n  };\n  return /* @__PURE__ */jsxs(chakra.button, {\n    disabled: isDisabled || isLoading,\n    ref: useMergeRefs(ref, _ref),\n    as,\n    type: type ?? defaultType,\n    \"data-active\": dataAttr(isActive),\n    \"data-loading\": dataAttr(isLoading),\n    __css: buttonStyles,\n    className: cx(\"chakra-button\", className),\n    ...rest,\n    children: [isLoading && spinnerPlacement === \"start\" && /* @__PURE__ */jsx(ButtonSpinner, {\n      className: \"chakra-button__spinner--start\",\n      label: loadingText,\n      placement: \"start\",\n      spacing: iconSpacing,\n      children: spinner\n    }), isLoading ? loadingText || /* @__PURE__ */jsx(chakra.span, {\n      opacity: 0,\n      children: /* @__PURE__ */jsx(ButtonContent, {\n        ...contentProps\n      })\n    }) : /* @__PURE__ */jsx(ButtonContent, {\n      ...contentProps\n    }), isLoading && spinnerPlacement === \"end\" && /* @__PURE__ */jsx(ButtonSpinner, {\n      className: \"chakra-button__spinner--end\",\n      label: loadingText,\n      placement: \"end\",\n      spacing: iconSpacing,\n      children: spinner\n    })]\n  });\n});\nButton.displayName = \"Button\";\nfunction ButtonContent(props) {\n  const {\n    leftIcon,\n    rightIcon,\n    children,\n    iconSpacing,\n    shouldWrapChildren\n  } = props;\n  if (!shouldWrapChildren) {\n    return /* @__PURE__ */jsxs(Fragment, {\n      children: [leftIcon && /* @__PURE__ */jsx(ButtonIcon, {\n        marginEnd: iconSpacing,\n        children: leftIcon\n      }), children, rightIcon && /* @__PURE__ */jsx(ButtonIcon, {\n        marginStart: iconSpacing,\n        children: rightIcon\n      })]\n    });\n  }\n  return /* @__PURE__ */jsxs(\"span\", {\n    style: {\n      display: \"contents\"\n    },\n    children: [leftIcon && /* @__PURE__ */jsx(ButtonIcon, {\n      marginEnd: iconSpacing,\n      children: leftIcon\n    }), children, rightIcon && /* @__PURE__ */jsx(ButtonIcon, {\n      marginStart: iconSpacing,\n      children: rightIcon\n    })]\n  });\n}\nexport { Button };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope, getDataUrl } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport { createSplitProps, compact, isEqual } from '@zag-js/utils';\nimport { memoize } from 'proxy-memoize';\nimport { encode } from 'uqr';\nimport { createProps } from '@zag-js/types';\n\n// src/qr-code.anatomy.ts\nvar anatomy = createAnatomy(\"qr-code\").parts(\"root\", \"frame\", \"pattern\", \"overlay\", \"downloadTrigger\");\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `qrcode:${ctx.id}:root`,\n  getFrameId: ctx => ctx.ids?.frame ?? `qrcode:${ctx.id}:frame`,\n  getFrameEl: ctx => dom.getById(ctx, dom.getFrameId(ctx))\n});\n\n// src/qr-code.connect.ts\nfunction connect(state, send, normalize) {\n  const encoded = state.context.encoded;\n  const pixelSize = state.context.pixelSize;\n  const height = encoded.size * pixelSize;\n  const width = encoded.size * pixelSize;\n  const paths = [];\n  for (let row = 0; row < encoded.size; row++) {\n    for (let col = 0; col < encoded.size; col++) {\n      const x = col * pixelSize;\n      const y = row * pixelSize;\n      if (encoded.data[row][col]) {\n        paths.push(`M${x},${y}h${pixelSize}v${pixelSize}h-${pixelSize}z`);\n      }\n    }\n  }\n  return {\n    value: state.context.value,\n    setValue(value) {\n      send({\n        type: \"VALUE.SET\",\n        value\n      });\n    },\n    getDataUrl(type, quality) {\n      const svgEl = dom.getFrameEl(state.context);\n      return getDataUrl(svgEl, {\n        type,\n        quality\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        id: dom.getRootId(state.context),\n        ...parts.root.attrs,\n        style: {\n          \"--qrcode-pixel-size\": `${pixelSize}px`,\n          \"--qrcode-width\": `${width}px`,\n          \"--qrcode-height\": `${height}px`,\n          position: \"relative\"\n        }\n      });\n    },\n    getFrameProps() {\n      return normalize.svg({\n        id: dom.getFrameId(state.context),\n        ...parts.frame.attrs,\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: `0 0 ${width} ${height}`\n      });\n    },\n    getPatternProps() {\n      return normalize.path({\n        d: paths.join(\"\"),\n        ...parts.pattern.attrs\n      });\n    },\n    getOverlayProps() {\n      return normalize.element({\n        ...parts.overlay.attrs,\n        style: {\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          translate: \"-50% -50%\"\n        }\n      });\n    },\n    getDownloadTriggerProps(props2) {\n      return normalize.button({\n        type: \"button\",\n        ...parts.downloadTrigger.attrs,\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          send({\n            type: \"DOWNLOAD_TRIGGER.CLICK\",\n            ...props2\n          });\n        }\n      });\n    }\n  };\n}\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"qr-code\",\n    initial: \"idle\",\n    context: {\n      value: \"\",\n      ...ctx,\n      pixelSize: 10\n    },\n    computed: {\n      encoded: memoize(ctx2 => encode(ctx2.value, ctx2.encoding))\n    },\n    on: {\n      \"VALUE.SET\": {\n        actions: [\"setValue\"]\n      },\n      \"DOWNLOAD_TRIGGER.CLICK\": {\n        actions: [\"downloadQrCode\"]\n      }\n    }\n  }, {\n    actions: {\n      setValue(ctx2, evt) {\n        set.value(ctx2, evt.value);\n      },\n      downloadQrCode(ctx2, evt) {\n        const {\n          mimeType,\n          quality,\n          fileName\n        } = evt;\n        const svgEl = dom.getFrameEl(ctx2);\n        const doc = dom.getDoc(ctx2);\n        getDataUrl(svgEl, {\n          type: mimeType,\n          quality\n        }).then(dataUri => {\n          const a = doc.createElement(\"a\");\n          a.href = dataUri;\n          a.rel = \"noopener\";\n          a.download = fileName;\n          a.click();\n          setTimeout(() => {\n            a.remove();\n          }, 0);\n        });\n      }\n    }\n  });\n}\nvar set = {\n  value(ctx, value) {\n    if (isEqual(ctx.value, value)) return;\n    ctx.value = value;\n    ctx.onValueChange?.({\n      value\n    });\n  }\n};\nvar props = createProps()([\"ids\", \"value\", \"id\", \"encoding\", \"dir\", \"getRootNode\", \"onValueChange\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
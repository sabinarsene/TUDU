{"ast":null,"code":"import { assignRef } from './assignRef';\nimport { createCallbackRef } from './createRef';\n/**\r\n * Merges two or more refs together providing a single interface to set their value\r\n * @param {RefObject|Ref} refs\r\n * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}\r\n *\r\n * @see {@link useMergeRefs} to be used in ReactComponents\r\n * @example\r\n * const Component = React.forwardRef((props, ref) => {\r\n *   const ownRef = useRef();\r\n *   const domRef = mergeRefs([ref, ownRef]); // ðŸ‘ˆ merge together\r\n *   return <div ref={domRef}>...</div>\r\n * }\r\n */\nexport function mergeRefs(refs) {\n  return createCallbackRef(function (newValue) {\n    return refs.forEach(function (ref) {\n      return assignRef(ref, newValue);\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
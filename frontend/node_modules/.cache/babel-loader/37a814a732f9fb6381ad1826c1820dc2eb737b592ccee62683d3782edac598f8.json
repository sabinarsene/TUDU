{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx } from 'react/jsx-runtime';\nimport { memo, forwardRef, useMemo, Children, isValidElement, cloneElement } from 'react';\nimport { dataAttr } from '../../utils/attr.js';\nimport { cx } from '../../utils/cx.js';\nimport { chakra } from '../../styled-system/factory.js';\nconst StyledGroup = chakra(\"div\", {\n  base: {\n    display: \"inline-flex\",\n    gap: \"0.5rem\",\n    isolation: \"isolate\",\n    position: \"relative\",\n    \"& [data-group-item]\": {\n      _focusVisible: {\n        zIndex: 1\n      }\n    }\n  },\n  variants: {\n    orientation: {\n      horizontal: {\n        flexDirection: \"row\"\n      },\n      vertical: {\n        flexDirection: \"column\"\n      }\n    },\n    attached: {\n      true: {\n        gap: \"0!\"\n      }\n    },\n    grow: {\n      true: {\n        display: \"flex\",\n        \"& > *\": {\n          flex: 1\n        }\n      }\n    },\n    stacking: {\n      \"first-on-top\": {\n        \"& > [data-group-item]\": {\n          zIndex: \"calc(var(--group-count) - var(--group-index))\"\n        }\n      },\n      \"last-on-top\": {\n        \"& > [data-group-item]\": {\n          zIndex: \"var(--group-index)\"\n        }\n      }\n    }\n  },\n  compoundVariants: [{\n    orientation: \"horizontal\",\n    attached: true,\n    css: {\n      \"& > *[data-first]\": {\n        borderEndRadius: \"0!\",\n        marginEnd: \"-1px\"\n      },\n      \"& > *[data-between]\": {\n        borderRadius: \"0!\",\n        marginEnd: \"-1px\"\n      },\n      \"& > *[data-last]\": {\n        borderStartRadius: \"0!\"\n      }\n    }\n  }, {\n    orientation: \"vertical\",\n    attached: true,\n    css: {\n      \"& > *[data-first]\": {\n        borderBottomRadius: \"0!\",\n        marginBottom: \"-1px\"\n      },\n      \"& > *[data-between]\": {\n        borderRadius: \"0!\",\n        marginBottom: \"-1px\"\n      },\n      \"& > *[data-last]\": {\n        borderTopRadius: \"0!\"\n      }\n    }\n  }],\n  defaultVariants: {\n    orientation: \"horizontal\"\n  }\n});\nconst Group = memo(forwardRef(function Group2(props, ref) {\n  const {\n    align = \"center\",\n    justify = \"flex-start\",\n    children,\n    wrap,\n    ...rest\n  } = props;\n  const _children = useMemo(() => {\n    const childArray = Children.toArray(children).filter(isValidElement);\n    const count = childArray.length;\n    return childArray.map((child, index) => {\n      const childProps = child.props;\n      return cloneElement(child, {\n        ...childProps,\n        \"data-group-item\": \"\",\n        \"data-first\": dataAttr(index === 0),\n        \"data-last\": dataAttr(index === count - 1),\n        \"data-between\": dataAttr(index > 0 && index < count - 1),\n        style: {\n          \"--group-count\": count,\n          \"--group-index\": index,\n          ...(childProps?.style ?? {})\n        }\n      });\n    });\n  }, [children]);\n  return /* @__PURE__ */jsx(StyledGroup, {\n    ref,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    ...rest,\n    className: cx(\"chakra-group\", props.className),\n    children: _children\n  });\n}));\nexport { Group };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
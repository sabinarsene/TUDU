{"ast":null,"code":"import { API_BASE_URL } from '../config/api';\nimport defaultProfileImage from '../assets/default-profile.jpg';\n\n/**\r\n * Get the full URL for an image path\r\n * @param {string} path - The relative path to the image\r\n * @returns {string} The full URL to the image\r\n */\nexport const getImageUrl = path => {\n  console.log(\"getImageUrl called with:\", path);\n  if (!path) {\n    console.log(\"No path provided, returning default\");\n    return defaultProfileImage;\n  }\n  if (path.startsWith('blob:')) {\n    console.log(\"Blob URL detected:\", path);\n    return path;\n  }\n  if (path.startsWith('http')) {\n    console.log(\"Full HTTP URL detected:\", path);\n    return path;\n  }\n\n  // For profile images that come directly from the backend\n  // they already have the full URL\n  if (path.includes('/uploads/profile-images/')) {\n    console.log(\"Backend profile image path detected:\", path);\n    return path;\n  }\n  const fullUrl = `${API_BASE_URL}${path.startsWith('/') ? path : `/${path}`}`;\n  console.log(\"Generated URL:\", fullUrl);\n  return fullUrl;\n};\n\n/**\r\n * Get the full URL for a profile image\r\n * @param {string|Object} pathOrUser - The relative path to the profile image or user object\r\n * @returns {string|null} The full URL to the profile image or null if no image exists\r\n */\nexport const getProfileImageUrl = pathOrUser => {\n  // If it's a user object, extract the profile image path\n  if (pathOrUser && typeof pathOrUser === 'object') {\n    // Check all possible property names for profile images\n    // Backend uses profile_image, but frontend might transform it to profileImage\n    const imagePath = pathOrUser.profile_image || pathOrUser.profileImage || pathOrUser.image;\n    console.log(\"getProfileImageUrl input:\", pathOrUser);\n    console.log(\"getProfileImageUrl extracted path:\", imagePath);\n\n    // Return null if no image exists, so components can display initials instead\n    if (!imagePath) return null;\n    return getImageUrl(imagePath);\n  }\n\n  // If it's a string path but empty, return null\n  if (!pathOrUser) return null;\n\n  // If it's a string path\n  return getImageUrl(pathOrUser);\n};\n\n/**\r\n * Handle image loading errors by setting a default avatar\r\n * @param {Event} e - The error event\r\n */\nexport const handleImageError = e => {\n  e.target.src = defaultProfileImage;\n};","map":{"version":3,"names":["API_BASE_URL","defaultProfileImage","getImageUrl","path","console","log","startsWith","includes","fullUrl","getProfileImageUrl","pathOrUser","imagePath","profile_image","profileImage","image","handleImageError","e","target","src"],"sources":["C:/Users/sabin.arsene/Desktop/TUDU-app/TUDU/frontend/src/utils/imageUtils.js"],"sourcesContent":["import { API_BASE_URL } from '../config/api';\r\nimport defaultProfileImage from '../assets/default-profile.jpg';\r\n\r\n/**\r\n * Get the full URL for an image path\r\n * @param {string} path - The relative path to the image\r\n * @returns {string} The full URL to the image\r\n */\r\nexport const getImageUrl = (path) => {\r\n  console.log(\"getImageUrl called with:\", path);\r\n  \r\n  if (!path) {\r\n    console.log(\"No path provided, returning default\");\r\n    return defaultProfileImage;\r\n  }\r\n  \r\n  if (path.startsWith('blob:')) {\r\n    console.log(\"Blob URL detected:\", path);\r\n    return path;\r\n  }\r\n  \r\n  if (path.startsWith('http')) {\r\n    console.log(\"Full HTTP URL detected:\", path);\r\n    return path;\r\n  }\r\n  \r\n  // For profile images that come directly from the backend\r\n  // they already have the full URL\r\n  if (path.includes('/uploads/profile-images/')) {\r\n    console.log(\"Backend profile image path detected:\", path);\r\n    return path;\r\n  }\r\n  \r\n  const fullUrl = `${API_BASE_URL}${path.startsWith('/') ? path : `/${path}`}`;\r\n  console.log(\"Generated URL:\", fullUrl);\r\n  return fullUrl;\r\n};\r\n\r\n/**\r\n * Get the full URL for a profile image\r\n * @param {string|Object} pathOrUser - The relative path to the profile image or user object\r\n * @returns {string|null} The full URL to the profile image or null if no image exists\r\n */\r\nexport const getProfileImageUrl = (pathOrUser) => {\r\n  // If it's a user object, extract the profile image path\r\n  if (pathOrUser && typeof pathOrUser === 'object') {\r\n    // Check all possible property names for profile images\r\n    // Backend uses profile_image, but frontend might transform it to profileImage\r\n    const imagePath = \r\n      pathOrUser.profile_image || \r\n      pathOrUser.profileImage || \r\n      pathOrUser.image;\r\n    \r\n    console.log(\"getProfileImageUrl input:\", pathOrUser);\r\n    console.log(\"getProfileImageUrl extracted path:\", imagePath);\r\n    \r\n    // Return null if no image exists, so components can display initials instead\r\n    if (!imagePath) return null;\r\n    \r\n    return getImageUrl(imagePath);\r\n  }\r\n  \r\n  // If it's a string path but empty, return null\r\n  if (!pathOrUser) return null;\r\n  \r\n  // If it's a string path\r\n  return getImageUrl(pathOrUser);\r\n};\r\n\r\n/**\r\n * Handle image loading errors by setting a default avatar\r\n * @param {Event} e - The error event\r\n */\r\nexport const handleImageError = (e) => {\r\n  e.target.src = defaultProfileImage;\r\n}; "],"mappings":"AAAA,SAASA,YAAY,QAAQ,eAAe;AAC5C,OAAOC,mBAAmB,MAAM,+BAA+B;;AAE/D;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIC,IAAI,IAAK;EACnCC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,IAAI,CAAC;EAE7C,IAAI,CAACA,IAAI,EAAE;IACTC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IAClD,OAAOJ,mBAAmB;EAC5B;EAEA,IAAIE,IAAI,CAACG,UAAU,CAAC,OAAO,CAAC,EAAE;IAC5BF,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,IAAI,CAAC;IACvC,OAAOA,IAAI;EACb;EAEA,IAAIA,IAAI,CAACG,UAAU,CAAC,MAAM,CAAC,EAAE;IAC3BF,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,IAAI,CAAC;IAC5C,OAAOA,IAAI;EACb;;EAEA;EACA;EACA,IAAIA,IAAI,CAACI,QAAQ,CAAC,0BAA0B,CAAC,EAAE;IAC7CH,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEF,IAAI,CAAC;IACzD,OAAOA,IAAI;EACb;EAEA,MAAMK,OAAO,GAAG,GAAGR,YAAY,GAAGG,IAAI,CAACG,UAAU,CAAC,GAAG,CAAC,GAAGH,IAAI,GAAG,IAAIA,IAAI,EAAE,EAAE;EAC5EC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEG,OAAO,CAAC;EACtC,OAAOA,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAIC,UAAU,IAAK;EAChD;EACA,IAAIA,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAChD;IACA;IACA,MAAMC,SAAS,GACbD,UAAU,CAACE,aAAa,IACxBF,UAAU,CAACG,YAAY,IACvBH,UAAU,CAACI,KAAK;IAElBV,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEK,UAAU,CAAC;IACpDN,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEM,SAAS,CAAC;;IAE5D;IACA,IAAI,CAACA,SAAS,EAAE,OAAO,IAAI;IAE3B,OAAOT,WAAW,CAACS,SAAS,CAAC;EAC/B;;EAEA;EACA,IAAI,CAACD,UAAU,EAAE,OAAO,IAAI;;EAE5B;EACA,OAAOR,WAAW,CAACQ,UAAU,CAAC;AAChC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMK,gBAAgB,GAAIC,CAAC,IAAK;EACrCA,CAAC,CAACC,MAAM,CAACC,GAAG,GAAGjB,mBAAmB;AACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
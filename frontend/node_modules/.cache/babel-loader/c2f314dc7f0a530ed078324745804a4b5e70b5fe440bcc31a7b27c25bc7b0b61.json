{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { mapResponsive } from '@chakra-ui/utils';\nimport { useMemo } from 'react';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\nconst Indicator = forwardRef(function Indicator2(props, ref) {\n  const {\n    offsetX,\n    offsetY,\n    offset = \"0\",\n    placement = \"top-end\",\n    ...rest\n  } = props;\n  const styles = useMemo(() => ({\n    display: \"inline-flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"absolute\",\n    insetBlockStart: mapResponsive(placement, v => {\n      const [side] = v.split(\"-\");\n      const map = {\n        top: offsetY ?? offset,\n        middle: \"50%\",\n        bottom: \"auto\"\n      };\n      return map[side];\n    }),\n    insetBlockEnd: mapResponsive(placement, v => {\n      const [side] = v.split(\"-\");\n      const map = {\n        top: \"auto\",\n        middle: \"50%\",\n        bottom: offsetY ?? offset\n      };\n      return map[side];\n    }),\n    insetStart: mapResponsive(placement, v => {\n      const [, align] = v.split(\"-\");\n      const map = {\n        start: offsetX ?? offset,\n        center: \"50%\",\n        end: \"auto\"\n      };\n      return map[align];\n    }),\n    insetEnd: mapResponsive(placement, v => {\n      const [, align] = v.split(\"-\");\n      const map = {\n        start: \"auto\",\n        center: \"50%\",\n        end: offsetX ?? offset\n      };\n      return map[align];\n    }),\n    translate: mapResponsive(placement, v => {\n      const [side, align] = v.split(\"-\");\n      const mapX = {\n        start: \"-50%\",\n        center: \"-50%\",\n        end: \"50%\"\n      };\n      const mapY = {\n        top: \"-50%\",\n        middle: \"-50%\",\n        bottom: \"50%\"\n      };\n      return `${mapX[align]} ${mapY[side]}`;\n    })\n  }), [offset, offsetX, offsetY, placement]);\n  return /* @__PURE__ */jsx(chakra.div, {\n    ref,\n    __css: styles,\n    ...rest\n  });\n});\nexport { Indicator };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
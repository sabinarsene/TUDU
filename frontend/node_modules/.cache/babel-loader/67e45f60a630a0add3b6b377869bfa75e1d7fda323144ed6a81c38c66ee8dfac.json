{"ast":null,"code":"import { API_BASE_URL } from '../config/api';\nconst API_ENDPOINT = `${API_BASE_URL}/api/offers`;\n\n/**\r\n * Submit an offer for a request\r\n * @param {Object} offerData - The offer data\r\n * @param {number} offerData.requestId - The ID of the request\r\n * @param {number} offerData.price - The proposed price\r\n * @param {string} offerData.description - The offer description\r\n * @param {string} offerData.negotiationStatus - The negotiation status (accept/negotiate)\r\n * @returns {Promise<Object>} - The created offer\r\n */\nexport const submitOffer = async offerData => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Nu ești autentificat');\n    }\n    const response = await fetch(API_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(offerData)\n    });\n    if (!response.ok) {\n      let errorMessage = 'Failed to submit offer';\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.message || errorMessage;\n      } catch (e) {\n        console.error('Error parsing error response:', e);\n      }\n      throw new Error(errorMessage);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error submitting offer:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get offers for a request\r\n * @param {number} requestId - The ID of the request\r\n * @returns {Promise<Array>} - The list of offers for the request\r\n */\nexport const getRequestOffers = async requestId => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Nu ești autentificat');\n    }\n    const response = await fetch(`${API_ENDPOINT}/request/${requestId}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch offers');\n    }\n    const data = await response.json();\n    return data.offers;\n  } catch (error) {\n    console.error('Error fetching offers:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get offers submitted by current user\r\n * @returns {Promise<Array>} - The list of offers submitted by the current user\r\n */\nexport const getUserOffers = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Nu ești autentificat');\n    }\n    const response = await fetch(`${API_ENDPOINT}/user`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch user offers');\n    }\n    const data = await response.json();\n    return data.offers;\n  } catch (error) {\n    console.error('Error fetching user offers:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Accept or reject an offer\r\n * @param {number} offerId - The ID of the offer\r\n * @param {string} action - The action to perform (accept/reject)\r\n * @returns {Promise<Object>} - The updated offer\r\n */\nexport const updateOfferStatus = async (offerId, action) => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Nu ești autentificat');\n    }\n    const response = await fetch(`${API_ENDPOINT}/${offerId}/status`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        status: action\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to ${action} offer`);\n    }\n    const data = await response.json();\n    return data.offer;\n  } catch (error) {\n    console.error(`Error ${action}ing offer:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","API_ENDPOINT","submitOffer","offerData","token","localStorage","getItem","Error","response","fetch","method","headers","body","JSON","stringify","ok","errorMessage","errorData","json","message","e","console","error","data","getRequestOffers","requestId","offers","getUserOffers","updateOfferStatus","offerId","action","status","offer"],"sources":["C:/Users/sabin.arsene/Desktop/TUDU-app/TUDU/frontend/src/services/offerApi.js"],"sourcesContent":["import { API_BASE_URL } from '../config/api';\r\n\r\nconst API_ENDPOINT = `${API_BASE_URL}/api/offers`;\r\n\r\n/**\r\n * Submit an offer for a request\r\n * @param {Object} offerData - The offer data\r\n * @param {number} offerData.requestId - The ID of the request\r\n * @param {number} offerData.price - The proposed price\r\n * @param {string} offerData.description - The offer description\r\n * @param {string} offerData.negotiationStatus - The negotiation status (accept/negotiate)\r\n * @returns {Promise<Object>} - The created offer\r\n */\r\nexport const submitOffer = async (offerData) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Nu ești autentificat');\r\n    }\r\n\r\n    const response = await fetch(API_ENDPOINT, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(offerData)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      let errorMessage = 'Failed to submit offer';\r\n      try {\r\n        const errorData = await response.json();\r\n        errorMessage = errorData.message || errorMessage;\r\n      } catch (e) {\r\n        console.error('Error parsing error response:', e);\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error submitting offer:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get offers for a request\r\n * @param {number} requestId - The ID of the request\r\n * @returns {Promise<Array>} - The list of offers for the request\r\n */\r\nexport const getRequestOffers = async (requestId) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Nu ești autentificat');\r\n    }\r\n\r\n    const response = await fetch(`${API_ENDPOINT}/request/${requestId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch offers');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.offers;\r\n  } catch (error) {\r\n    console.error('Error fetching offers:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get offers submitted by current user\r\n * @returns {Promise<Array>} - The list of offers submitted by the current user\r\n */\r\nexport const getUserOffers = async () => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Nu ești autentificat');\r\n    }\r\n\r\n    const response = await fetch(`${API_ENDPOINT}/user`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch user offers');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.offers;\r\n  } catch (error) {\r\n    console.error('Error fetching user offers:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Accept or reject an offer\r\n * @param {number} offerId - The ID of the offer\r\n * @param {string} action - The action to perform (accept/reject)\r\n * @returns {Promise<Object>} - The updated offer\r\n */\r\nexport const updateOfferStatus = async (offerId, action) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Nu ești autentificat');\r\n    }\r\n\r\n    const response = await fetch(`${API_ENDPOINT}/${offerId}/status`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify({ status: action })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to ${action} offer`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.offer;\r\n  } catch (error) {\r\n    console.error(`Error ${action}ing offer:`, error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope, query, getDataUrl, dataAttr, isLeftClick, isModifierKey, getEventTarget, getRelativePoint, trackPointerMove } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport { createSplitProps, compact } from '@zag-js/utils';\nimport getStroke from 'perfect-freehand';\nimport { createProps } from '@zag-js/types';\n\n// src/signature-pad.anatomy.ts\nvar anatomy = createAnatomy(\"signature-pad\").parts(\"root\", \"control\", \"segment\", \"segmentPath\", \"guide\", \"clearTrigger\", \"label\");\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `signature-${ctx.id}`,\n  getControlId: ctx => ctx.ids?.control ?? `signature-control-${ctx.id}`,\n  getLabelId: ctx => ctx.ids?.label ?? `signature-label-${ctx.id}`,\n  getHiddenInputId: ctx => ctx.ids?.hiddenInput ?? `signature-input-${ctx.id}`,\n  getControlEl: ctx => dom.getById(ctx, dom.getControlId(ctx)),\n  getSegmentEl: ctx => query(dom.getControlEl(ctx), \"[data-part=segment]\"),\n  getHiddenInputEl: ctx => dom.getById(ctx, dom.getHiddenInputId(ctx)),\n  getDataUrl: (ctx, options) => {\n    if (ctx.isEmpty) return Promise.resolve(\"\");\n    return getDataUrl(dom.getSegmentEl(ctx), options);\n  }\n});\n\n// src/signature-pad.connect.ts\nvar defaultTranslations = {\n  control: \"signature pad\",\n  clearTrigger: \"clear signature\"\n};\nfunction connect(state, send, normalize) {\n  const drawing = state.matches(\"drawing\");\n  const empty = state.context.isEmpty;\n  const interactive = state.context.isInteractive;\n  const disabled = !!state.context.disabled;\n  const translations = state.context.translations || defaultTranslations;\n  return {\n    empty,\n    drawing,\n    currentPath: state.context.currentPath,\n    paths: state.context.paths,\n    clear() {\n      send({\n        type: \"CLEAR\"\n      });\n    },\n    getDataUrl(type, quality) {\n      return dom.getDataUrl(state.context, {\n        type,\n        quality\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        id: dom.getLabelId(state.context),\n        \"data-disabled\": dataAttr(disabled),\n        htmlFor: dom.getHiddenInputId(state.context),\n        onClick(event) {\n          if (!interactive) return;\n          if (event.defaultPrevented) return;\n          const controlEl = dom.getControlEl(state.context);\n          controlEl?.focus({\n            preventScroll: true\n          });\n        }\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        \"data-disabled\": dataAttr(disabled),\n        id: dom.getRootId(state.context)\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        tabIndex: disabled ? void 0 : 0,\n        id: dom.getControlId(state.context),\n        role: \"application\",\n        \"aria-roledescription\": \"signature pad\",\n        \"aria-label\": translations.control,\n        \"aria-disabled\": disabled,\n        \"data-disabled\": dataAttr(disabled),\n        onPointerDown(event) {\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          if (!interactive) return;\n          const target = getEventTarget(event);\n          if (target?.closest(\"[data-part=clear-trigger]\")) return;\n          event.currentTarget.setPointerCapture(event.pointerId);\n          const point = {\n            x: event.clientX,\n            y: event.clientY\n          };\n          const {\n            offset\n          } = getRelativePoint(point, dom.getControlEl(state.context));\n          send({\n            type: \"POINTER_DOWN\",\n            point: offset,\n            pressure: event.pressure\n          });\n        },\n        onPointerUp(event) {\n          if (!interactive) return;\n          if (event.currentTarget.hasPointerCapture(event.pointerId)) {\n            event.currentTarget.releasePointerCapture(event.pointerId);\n          }\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\"\n        }\n      });\n    },\n    getSegmentProps() {\n      return normalize.svg({\n        ...parts.segment.attrs,\n        style: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\",\n          pointerEvents: \"none\",\n          fill: state.context.drawing.fill\n        }\n      });\n    },\n    getSegmentPathProps(props2) {\n      return normalize.path({\n        ...parts.segmentPath.attrs,\n        d: props2.path\n      });\n    },\n    getGuideProps() {\n      return normalize.element({\n        ...parts.guide.attrs,\n        \"data-disabled\": dataAttr(disabled)\n      });\n    },\n    getClearTriggerProps() {\n      return normalize.button({\n        ...parts.clearTrigger.attrs,\n        type: \"button\",\n        \"aria-label\": translations.clearTrigger,\n        hidden: !state.context.paths.length || drawing,\n        disabled,\n        onClick() {\n          send({\n            type: \"CLEAR\"\n          });\n        }\n      });\n    },\n    getHiddenInputProps(props2) {\n      return normalize.input({\n        id: dom.getHiddenInputId(state.context),\n        type: \"text\",\n        hidden: true,\n        disabled,\n        required: state.context.required,\n        readOnly: state.context.readOnly,\n        name: state.context.name,\n        value: props2.value\n      });\n    }\n  };\n}\n\n// src/get-svg-path.ts\nvar average = (a, b) => (a + b) / 2;\nfunction getSvgPathFromStroke(points, closed = true) {\n  const len = points.length;\n  if (len < 4) {\n    return \"\";\n  }\n  let a = points[0];\n  let b = points[1];\n  const c = points[2];\n  let result = `M${a[0].toFixed(2)},${a[1].toFixed(2)} Q${b[0].toFixed(2)},${b[1].toFixed(2)} ${average(b[0], c[0]).toFixed(2)},${average(b[1], c[1]).toFixed(2)} T`;\n  for (let i = 2, max = len - 1; i < max; i++) {\n    a = points[i];\n    b = points[i + 1];\n    result += `${average(a[0], b[0]).toFixed(2)},${average(a[1], b[1]).toFixed(2)} `;\n  }\n  if (closed) {\n    result += \"Z\";\n  }\n  return result;\n}\n\n// src/signature-pad.machine.ts\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"signature-pad\",\n    initial: \"idle\",\n    context: {\n      readOnly: false,\n      disabled: false,\n      ...ctx,\n      paths: [],\n      currentPoints: [],\n      currentPath: null,\n      drawing: {\n        size: 2,\n        simulatePressure: false,\n        thinning: 0.7,\n        smoothing: 0.4,\n        streamline: 0.6,\n        ...ctx.drawing\n      }\n    },\n    computed: {\n      isInteractive: ctx2 => !(ctx2.disabled || ctx2.readOnly),\n      isEmpty: ctx2 => ctx2.paths.length === 0\n    },\n    on: {\n      CLEAR: {\n        actions: [\"clearPoints\", \"invokeOnDrawEnd\", \"focusCanvasEl\"]\n      }\n    },\n    states: {\n      idle: {\n        on: {\n          POINTER_DOWN: {\n            target: \"drawing\",\n            actions: [\"addPoint\"]\n          }\n        }\n      },\n      drawing: {\n        activities: [\"trackPointerMove\"],\n        on: {\n          POINTER_MOVE: {\n            actions: [\"addPoint\", \"invokeOnDraw\"]\n          },\n          POINTER_UP: {\n            target: \"idle\",\n            actions: [\"endStroke\", \"invokeOnDrawEnd\"]\n          }\n        }\n      }\n    }\n  }, {\n    activities: {\n      trackPointerMove(ctx2, _evt, {\n        send\n      }) {\n        const doc = dom.getDoc(ctx2);\n        return trackPointerMove(doc, {\n          onPointerMove({\n            event,\n            point\n          }) {\n            const {\n              offset\n            } = getRelativePoint(point, dom.getControlEl(ctx2));\n            send({\n              type: \"POINTER_MOVE\",\n              point: offset,\n              pressure: event.pressure\n            });\n          },\n          onPointerUp() {\n            send({\n              type: \"POINTER_UP\"\n            });\n          }\n        });\n      }\n    },\n    actions: {\n      addPoint(ctx2, evt) {\n        ctx2.currentPoints.push(evt.point);\n        const stroke = getStroke(ctx2.currentPoints, ctx2.drawing);\n        ctx2.currentPath = getSvgPathFromStroke(stroke);\n      },\n      endStroke(ctx2) {\n        ctx2.paths.push(ctx2.currentPath);\n        ctx2.currentPoints = [];\n        ctx2.currentPath = null;\n      },\n      clearPoints(ctx2) {\n        ctx2.currentPoints = [];\n        ctx2.paths = [];\n      },\n      focusCanvasEl(ctx2) {\n        queueMicrotask(() => {\n          dom.getControlEl(ctx2)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      invokeOnDraw(ctx2) {\n        ctx2.onDraw?.({\n          paths: [...ctx2.paths, ctx2.currentPath]\n        });\n      },\n      invokeOnDrawEnd(ctx2) {\n        ctx2.onDrawEnd?.({\n          paths: [...ctx2.paths],\n          getDataUrl(type, quality = 0.92) {\n            return dom.getDataUrl(ctx2, {\n              type,\n              quality\n            });\n          }\n        });\n      }\n    }\n  });\n}\nvar props = createProps()([\"dir\", \"disabled\", \"drawing\", \"getRootNode\", \"id\", \"ids\", \"name\", \"onDraw\", \"onDrawEnd\", \"readOnly\", \"required\", \"translations\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
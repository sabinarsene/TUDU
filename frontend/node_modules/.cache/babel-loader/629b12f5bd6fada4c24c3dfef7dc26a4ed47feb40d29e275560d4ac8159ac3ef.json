{"ast":null,"code":"import { modalAnatomy } from '@chakra-ui/anatomy';\nimport { createMultiStyleConfigHelpers, cssVar, defineStyle } from '@chakra-ui/styled-system';\nimport { runIfFn } from '../utils/run-if-fn.mjs';\nconst {\n  defineMultiStyleConfig,\n  definePartsStyle\n} = createMultiStyleConfigHelpers(modalAnatomy.keys);\nconst $bg = cssVar(\"modal-bg\");\nconst $shadow = cssVar(\"modal-shadow\");\nconst baseStyleOverlay = defineStyle({\n  bg: \"blackAlpha.600\",\n  zIndex: \"modal\"\n});\nconst baseStyleDialogContainer = defineStyle(props => {\n  const {\n    isCentered,\n    scrollBehavior\n  } = props;\n  return {\n    display: \"flex\",\n    zIndex: \"modal\",\n    justifyContent: \"center\",\n    alignItems: isCentered ? \"center\" : \"flex-start\",\n    overflow: scrollBehavior === \"inside\" ? \"hidden\" : \"auto\",\n    overscrollBehaviorY: \"none\"\n  };\n});\nconst baseStyleDialog = defineStyle(props => {\n  const {\n    isCentered,\n    scrollBehavior\n  } = props;\n  return {\n    borderRadius: \"md\",\n    color: \"inherit\",\n    my: isCentered ? \"auto\" : \"16\",\n    mx: isCentered ? \"auto\" : void 0,\n    zIndex: \"modal\",\n    maxH: scrollBehavior === \"inside\" ? \"calc(100% - 7.5rem)\" : void 0,\n    [$bg.variable]: \"colors.white\",\n    [$shadow.variable]: \"shadows.lg\",\n    _dark: {\n      [$bg.variable]: \"colors.gray.700\",\n      [$shadow.variable]: \"shadows.dark-lg\"\n    },\n    bg: $bg.reference,\n    boxShadow: $shadow.reference\n  };\n});\nconst baseStyleHeader = defineStyle({\n  px: \"6\",\n  py: \"4\",\n  fontSize: \"xl\",\n  fontWeight: \"semibold\"\n});\nconst baseStyleCloseButton = defineStyle({\n  position: \"absolute\",\n  top: \"2\",\n  insetEnd: \"3\"\n});\nconst baseStyleBody = defineStyle(props => {\n  const {\n    scrollBehavior\n  } = props;\n  return {\n    px: \"6\",\n    py: \"2\",\n    flex: \"1\",\n    overflow: scrollBehavior === \"inside\" ? \"auto\" : void 0\n  };\n});\nconst baseStyleFooter = defineStyle({\n  px: \"6\",\n  py: \"4\"\n});\nconst baseStyle = definePartsStyle(props => ({\n  overlay: baseStyleOverlay,\n  dialogContainer: runIfFn(baseStyleDialogContainer, props),\n  dialog: runIfFn(baseStyleDialog, props),\n  header: baseStyleHeader,\n  closeButton: baseStyleCloseButton,\n  body: runIfFn(baseStyleBody, props),\n  footer: baseStyleFooter\n}));\nfunction getSize(value) {\n  if (value === \"full\") {\n    return definePartsStyle({\n      dialog: {\n        maxW: \"100vw\",\n        minH: \"$100vh\",\n        my: \"0\",\n        borderRadius: \"0\"\n      }\n    });\n  }\n  return definePartsStyle({\n    dialog: {\n      maxW: value\n    }\n  });\n}\nconst sizes = {\n  xs: getSize(\"xs\"),\n  sm: getSize(\"sm\"),\n  md: getSize(\"md\"),\n  lg: getSize(\"lg\"),\n  xl: getSize(\"xl\"),\n  \"2xl\": getSize(\"2xl\"),\n  \"3xl\": getSize(\"3xl\"),\n  \"4xl\": getSize(\"4xl\"),\n  \"5xl\": getSize(\"5xl\"),\n  \"6xl\": getSize(\"6xl\"),\n  full: getSize(\"full\")\n};\nconst modalTheme = defineMultiStyleConfig({\n  baseStyle,\n  sizes,\n  defaultProps: {\n    size: \"md\"\n  }\n});\nexport { modalTheme };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
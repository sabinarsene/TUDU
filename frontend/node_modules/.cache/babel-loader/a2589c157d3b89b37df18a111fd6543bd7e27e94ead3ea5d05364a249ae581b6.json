{"ast":null,"code":"'use client';\n\nimport { isChakraTheme, theme, baseTheme } from '@chakra-ui/theme';\nimport { mergeWith, isObject, isArray } from '@chakra-ui/utils';\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\nfunction pipe(...fns) {\n  return v => fns.reduce((a, b) => b(a), v);\n}\nconst createExtendTheme = theme2 => {\n  return function extendTheme2(...extensions) {\n    let overrides = [...extensions];\n    let activeTheme = extensions[extensions.length - 1];\n    if (isChakraTheme(activeTheme) &&\n    // this ensures backward compatibility\n    // previously only `extendTheme(override, activeTheme?)` was allowed\n    overrides.length > 1) {\n      overrides = overrides.slice(0, overrides.length - 1);\n    } else {\n      activeTheme = theme2;\n    }\n    return pipe(...overrides.map(extension => prevTheme => isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension)))(activeTheme);\n  };\n};\nconst extendTheme = createExtendTheme(theme);\nconst extendBaseTheme = createExtendTheme(baseTheme);\nfunction mergeThemeOverride(...overrides) {\n  return mergeWith({}, ...overrides, mergeThemeCustomizer);\n}\nfunction mergeThemeCustomizer(source, override, key, object) {\n  if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) {\n    return (...args) => {\n      const sourceValue = isFunction(source) ? source(...args) : source;\n      const overrideValue = isFunction(override) ? override(...args) : override;\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer);\n    };\n  }\n  if (isObject(source) && isArray(override)) {\n    return override;\n  }\n  if (isArray(source) && isObject(override)) {\n    return override;\n  }\n  return void 0;\n}\nexport { createExtendTheme, extendBaseTheme, extendTheme, mergeThemeOverride };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { isElement, sortNodes, getNextIndex, getPrevIndex } from './utils.mjs';\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nclass DescendantsManager {\n  constructor() {\n    __publicField(this, \"descendants\", /* @__PURE__ */new Map());\n    __publicField(this, \"register\", nodeOrOptions => {\n      if (nodeOrOptions == null) return;\n      if (isElement(nodeOrOptions)) {\n        return this.registerNode(nodeOrOptions);\n      }\n      return node => {\n        this.registerNode(node, nodeOrOptions);\n      };\n    });\n    __publicField(this, \"unregister\", node => {\n      this.descendants.delete(node);\n      const sorted = sortNodes(Array.from(this.descendants.keys()));\n      this.assignIndex(sorted);\n    });\n    __publicField(this, \"destroy\", () => {\n      this.descendants.clear();\n    });\n    __publicField(this, \"assignIndex\", descendants => {\n      this.descendants.forEach(descendant => {\n        const index = descendants.indexOf(descendant.node);\n        descendant.index = index;\n        descendant.node.dataset[\"index\"] = descendant.index.toString();\n      });\n    });\n    __publicField(this, \"count\", () => this.descendants.size);\n    __publicField(this, \"enabledCount\", () => this.enabledValues().length);\n    __publicField(this, \"values\", () => {\n      const values = Array.from(this.descendants.values());\n      return values.sort((a, b) => a.index - b.index);\n    });\n    __publicField(this, \"enabledValues\", () => {\n      return this.values().filter(descendant => !descendant.disabled);\n    });\n    __publicField(this, \"item\", index => {\n      if (this.count() === 0) return void 0;\n      return this.values()[index];\n    });\n    __publicField(this, \"enabledItem\", index => {\n      if (this.enabledCount() === 0) return void 0;\n      return this.enabledValues()[index];\n    });\n    __publicField(this, \"first\", () => this.item(0));\n    __publicField(this, \"firstEnabled\", () => this.enabledItem(0));\n    __publicField(this, \"last\", () => this.item(this.descendants.size - 1));\n    __publicField(this, \"lastEnabled\", () => {\n      const lastIndex = this.enabledValues().length - 1;\n      return this.enabledItem(lastIndex);\n    });\n    __publicField(this, \"indexOf\", node => {\n      if (!node) return -1;\n      return this.descendants.get(node)?.index ?? -1;\n    });\n    __publicField(this, \"enabledIndexOf\", node => {\n      if (node == null) return -1;\n      return this.enabledValues().findIndex(i => i.node.isSameNode(node));\n    });\n    __publicField(this, \"next\", (index, loop = true) => {\n      const next = getNextIndex(index, this.count(), loop);\n      return this.item(next);\n    });\n    __publicField(this, \"nextEnabled\", (index, loop = true) => {\n      const item = this.item(index);\n      if (!item) return;\n      const enabledIndex = this.enabledIndexOf(item.node);\n      const nextEnabledIndex = getNextIndex(enabledIndex, this.enabledCount(), loop);\n      return this.enabledItem(nextEnabledIndex);\n    });\n    __publicField(this, \"prev\", (index, loop = true) => {\n      const prev = getPrevIndex(index, this.count() - 1, loop);\n      return this.item(prev);\n    });\n    __publicField(this, \"prevEnabled\", (index, loop = true) => {\n      const item = this.item(index);\n      if (!item) return;\n      const enabledIndex = this.enabledIndexOf(item.node);\n      const prevEnabledIndex = getPrevIndex(enabledIndex, this.enabledCount() - 1, loop);\n      return this.enabledItem(prevEnabledIndex);\n    });\n    __publicField(this, \"registerNode\", (node, options) => {\n      if (!node || this.descendants.has(node)) return;\n      const keys = Array.from(this.descendants.keys()).concat(node);\n      const sorted = sortNodes(keys);\n      if (options?.disabled) {\n        options.disabled = !!options.disabled;\n      }\n      const descendant = {\n        node,\n        index: -1,\n        ...options\n      };\n      this.descendants.set(node, descendant);\n      this.assignIndex(sorted);\n    });\n  }\n}\nexport { DescendantsManager };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
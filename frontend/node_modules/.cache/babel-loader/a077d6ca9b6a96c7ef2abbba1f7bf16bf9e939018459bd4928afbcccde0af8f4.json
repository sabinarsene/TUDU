{"ast":null,"code":"\"use strict\";\n\nimport { compact } from '../utils/compact.js';\nimport { cx } from '../utils/cx.js';\nimport { mergeWith } from '../utils/merge.js';\nimport { omit } from '../utils/omit.js';\nimport { splitProps } from '../utils/split-props.js';\nimport { uniq } from '../utils/uniq.js';\nimport { createCssFn } from './css.js';\nconst defaults = conf => ({\n  base: {},\n  variants: {},\n  defaultVariants: {},\n  compoundVariants: [],\n  ...conf\n});\nfunction createRecipeFn(options) {\n  const {\n    css,\n    conditions,\n    normalize,\n    layers\n  } = options;\n  function cva(config = {}) {\n    const {\n      base,\n      variants,\n      defaultVariants,\n      compoundVariants\n    } = defaults(config);\n    const getVariantCss = createCssFn({\n      conditions,\n      normalize,\n      transform(prop, value) {\n        return variants[prop]?.[value];\n      }\n    });\n    const resolve = (props = {}) => {\n      const variantSelections = normalize({\n        ...defaultVariants,\n        ...compact(props)\n      });\n      let variantCss = {\n        ...base\n      };\n      mergeWith(variantCss, getVariantCss(variantSelections));\n      const compoundVariantCss = getCompoundVariantCss(compoundVariants, variantSelections);\n      return layers.wrap(\"recipes\", css(variantCss, compoundVariantCss));\n    };\n    const variantKeys = Object.keys(variants);\n    const splitVariantProps = props => {\n      const restProps = omit(props, [\"recipe\"]);\n      const [recipeProps, localProps] = splitProps(restProps, variantKeys);\n      if (!variantKeys.includes(\"colorPalette\")) {\n        recipeProps.colorPalette = props.colorPalette || defaultVariants.colorPalette;\n      }\n      if (variantKeys.includes(\"orientation\")) {\n        localProps.orientation = props.orientation;\n      }\n      return [recipeProps, localProps];\n    };\n    const variantMap = Object.fromEntries(Object.entries(variants).map(([key, value]) => [key, Object.keys(value)]));\n    const cvaFn = props => css(resolve(props));\n    return Object.assign(cvaFn, {\n      className: config.className,\n      __cva__: true,\n      variantMap,\n      variantKeys,\n      raw: resolve,\n      config,\n      splitVariantProps,\n      merge(other) {\n        return cva(mergeCva(options)(this, other));\n      }\n    });\n  }\n  function getCompoundVariantCss(cvs, vm) {\n    let result = {};\n    cvs.forEach(cv => {\n      const isMatching = Object.entries(cv).every(([key, value]) => {\n        if (key === \"css\") return true;\n        const values = Array.isArray(value) ? value : [value];\n        return values.some(value2 => vm[key] === value2);\n      });\n      if (isMatching) {\n        result = css(result, cv.css);\n      }\n    });\n    return result;\n  }\n  return cva;\n}\nfunction mergeCva(opts) {\n  const {\n    css\n  } = opts;\n  return function mergeCva2(cvaA, cvaB) {\n    const override = defaults(cvaB.config);\n    const variantKeys = uniq(cvaA.variantKeys, Object.keys(cvaB.variants));\n    const base = css(cvaA.base, override.base);\n    const variants = Object.fromEntries(variantKeys.map(key => [key, css(cvaA.config.variants[key], override.variants[key])]));\n    const defaultVariants = mergeWith(cvaA.config.defaultVariants, override.defaultVariants);\n    const compoundVariants = [...cvaA.compoundVariants, ...override.compoundVariants];\n    const className = cx(cvaA.className, cvaB.className);\n    return {\n      className,\n      base,\n      variants,\n      defaultVariants,\n      compoundVariants\n    };\n  };\n}\nexport { createRecipeFn };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { useFieldContext, Field } from '@ark-ui/react/field';\nimport { forwardRef } from 'react';\nimport { createContext } from '../../create-context.js';\nimport { dataAttr } from '../../utils/attr.js';\nimport { cx } from '../../utils/cx.js';\nimport { createSlotRecipeContext } from '../../styled-system/create-slot-recipe-context.js';\nimport { chakra } from '../../styled-system/factory.js';\nimport { ChevronDownIcon } from '../icons.js';\nconst [NativeSelectBasePropsProvider, useNativeSelectBaseProps] = createContext({\n  name: \"NativeSelectBasePropsContext\",\n  hookName: \"useNativeSelectBaseProps\",\n  providerName: \"<NativeSelectRoot />\",\n  strict: false\n});\nconst {\n  withProvider,\n  useClassNames,\n  useStyles: useNativeSelectStyles,\n  PropsProvider\n} = createSlotRecipeContext({\n  key: \"nativeSelect\"\n});\nconst NativeSelectRoot = withProvider(\"div\", \"root\", {\n  wrapElement(element, props) {\n    const field = useFieldContext();\n    const disabled = Boolean(field?.disabled ?? props.disabled);\n    const invalid = Boolean(field?.invalid ?? props.invalid);\n    return /* @__PURE__ */jsx(NativeSelectBasePropsProvider, {\n      value: {\n        disabled,\n        invalid\n      },\n      children: element\n    });\n  }\n});\nconst NativeSelectPropsProvider = PropsProvider;\nconst StyledSelect = chakra(Field.Select, {}, {\n  forwardAsChild: true\n});\nconst NativeSelectField = forwardRef(function NativeSelectField2(props, ref) {\n  const {\n    children,\n    placeholder,\n    ...restProps\n  } = props;\n  const {\n    disabled,\n    invalid\n  } = useNativeSelectBaseProps();\n  const styles = useNativeSelectStyles();\n  const classNames = useClassNames();\n  return /* @__PURE__ */jsxs(StyledSelect, {\n    disabled,\n    \"data-invalid\": dataAttr(invalid),\n    ...restProps,\n    ref,\n    className: cx(classNames.field, props.className),\n    css: [styles.field, props.css],\n    children: [placeholder && /* @__PURE__ */jsx(\"option\", {\n      value: \"\",\n      children: placeholder\n    }), children]\n  });\n});\nfunction NativeSelectIndicator(props) {\n  const styles = useNativeSelectStyles();\n  const {\n    disabled,\n    invalid\n  } = useNativeSelectBaseProps();\n  const classNames = useClassNames();\n  return /* @__PURE__ */jsx(chakra.div, {\n    ...props,\n    \"data-disabled\": dataAttr(disabled),\n    \"data-invalid\": dataAttr(invalid),\n    className: cx(classNames.indicator, props.className),\n    css: [styles.indicator, props.css],\n    children: props.children ?? /* @__PURE__ */jsx(ChevronDownIcon, {})\n  });\n}\nexport { NativeSelectField, NativeSelectIndicator, NativeSelectPropsProvider, NativeSelectRoot, useNativeSelectStyles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
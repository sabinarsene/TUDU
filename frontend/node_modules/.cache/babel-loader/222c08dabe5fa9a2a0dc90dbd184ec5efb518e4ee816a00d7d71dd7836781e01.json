{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { FileUpload, useFileUploadContext } from '@ark-ui/react/file-upload';\nimport { forwardRef, useMemo } from 'react';\nimport { createSlotRecipeContext } from '../../styled-system/create-slot-recipe-context.js';\nimport { CloseIcon, FileIcon } from '../icons.js';\nimport { Span } from '../box/span.js';\nimport { For } from '../for/for.js';\nconst {\n  withProvider,\n  withContext,\n  useStyles: useFileUploadStyles,\n  PropsProvider\n} = createSlotRecipeContext({\n  key: \"fileUpload\"\n});\nconst FileUploadRootProvider = withProvider(FileUpload.RootProvider, \"root\", {\n  forwardAsChild: true\n});\nconst FileUploadRoot = withProvider(FileUpload.Root, \"root\", {\n  forwardAsChild: true\n});\nconst FileUploadPropsProvider = PropsProvider;\nconst FileUploadClearTrigger = withContext(FileUpload.ClearTrigger, \"clearTrigger\", {\n  forwardAsChild: true\n});\nconst FileUploadDropzone = withContext(FileUpload.Dropzone, \"dropzone\", {\n  forwardAsChild: true\n});\nconst FileUploadDropzoneContent = withContext(\"div\", \"dropzoneContent\");\nconst FileUploadItem = withContext(FileUpload.Item, \"item\", {\n  forwardAsChild: true\n});\nconst FileUploadItemContent = withContext(\"div\", \"itemContent\");\nconst FileUploadItemDeleteTrigger = withContext(FileUpload.ItemDeleteTrigger, \"itemDeleteTrigger\", {\n  forwardAsChild: true,\n  defaultProps: {\n    children: /* @__PURE__ */jsx(CloseIcon, {})\n  }\n});\nconst FileUploadItemGroup = withContext(FileUpload.ItemGroup, \"itemGroup\", {\n  forwardAsChild: true\n});\nconst FileUploadItemName = withContext(FileUpload.ItemName, \"itemName\", {\n  forwardAsChild: true\n});\nconst FileUploadItemPreview = withContext(FileUpload.ItemPreview, \"itemPreview\", {\n  forwardAsChild: true,\n  defaultProps: {\n    children: /* @__PURE__ */jsx(FileIcon, {})\n  }\n});\nconst FileUploadItemPreviewImage = withContext(FileUpload.ItemPreviewImage, \"itemPreviewImage\", {\n  forwardAsChild: true\n});\nconst FileUploadItemSizeText = withContext(FileUpload.ItemSizeText, \"itemSizeText\", {\n  forwardAsChild: true\n});\nconst FileUploadLabel = withContext(FileUpload.Label, \"label\", {\n  forwardAsChild: true\n});\nconst FileUploadTrigger = withContext(FileUpload.Trigger, \"trigger\", {\n  forwardAsChild: true\n});\nconst FileUploadItems = props => {\n  const {\n    showSize,\n    clearable,\n    files,\n    ...rest\n  } = props;\n  const fileUpload = useFileUploadContext();\n  const acceptedFiles = files ?? fileUpload.acceptedFiles;\n  return /* @__PURE__ */jsx(For, {\n    each: acceptedFiles,\n    children: file => /* @__PURE__ */jsxs(FileUploadItem, {\n      file,\n      ...rest,\n      children: [/* @__PURE__ */jsx(FileUploadItemPreview, {}), showSize ? /* @__PURE__ */jsxs(FileUploadItemContent, {\n        children: [/* @__PURE__ */jsx(FileUploadItemName, {}), /* @__PURE__ */jsx(FileUploadItemSizeText, {})]\n      }) : /* @__PURE__ */jsx(FileUploadItemName, {\n        flex: \"1\"\n      }), clearable && /* @__PURE__ */jsx(FileUploadItemDeleteTrigger, {})]\n    }, file.name)\n  });\n};\nconst FileUploadList = forwardRef(function FileUploadList2(props, ref) {\n  const {\n    showSize,\n    clearable,\n    files,\n    ...rest\n  } = props;\n  return /* @__PURE__ */jsx(FileUploadItemGroup, {\n    ref,\n    ...rest,\n    children: /* @__PURE__ */jsx(FileUploadItems, {\n      showSize,\n      clearable,\n      files\n    })\n  });\n});\nconst FileUploadFileText = forwardRef(function FileUploadFileText2(props, ref) {\n  const {\n    fallback = \"Select file(s)\",\n    ...rest\n  } = props;\n  const fileUpload = useFileUploadContext();\n  const styles = useFileUploadStyles();\n  const acceptedFiles = fileUpload.acceptedFiles;\n  const fileText = useMemo(() => {\n    if (acceptedFiles.length === 1) {\n      return acceptedFiles[0].name;\n    }\n    if (acceptedFiles.length > 1) {\n      return `${acceptedFiles.length} files`;\n    }\n    return fallback;\n  }, [acceptedFiles, fallback]);\n  return /* @__PURE__ */jsx(Span, {\n    ref,\n    \"data-placeholder\": fileText === fallback ? \"\" : void 0,\n    ...rest,\n    css: [styles.fileText, props.css],\n    children: fileText\n  });\n});\nconst FileUploadContext = FileUpload.Context;\nconst FileUploadHiddenInput = FileUpload.HiddenInput;\nexport { FileUploadClearTrigger, FileUploadContext, FileUploadDropzone, FileUploadDropzoneContent, FileUploadFileText, FileUploadHiddenInput, FileUploadItem, FileUploadItemContent, FileUploadItemDeleteTrigger, FileUploadItemGroup, FileUploadItemName, FileUploadItemPreview, FileUploadItemPreviewImage, FileUploadItemSizeText, FileUploadItems, FileUploadLabel, FileUploadList, FileUploadPropsProvider, FileUploadRoot, FileUploadRootProvider, FileUploadTrigger, useFileUploadStyles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
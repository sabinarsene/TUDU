{"ast":null,"code":"import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\nconst RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\n/**\r\n * A Socket is the fundamental class for interacting with the server.\r\n *\r\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\r\n *\r\n * @example\r\n * const socket = io();\r\n *\r\n * socket.on(\"connect\", () => {\r\n *   console.log(\"connected\");\r\n * });\r\n *\r\n * // send an event to the server\r\n * socket.emit(\"foo\", \"bar\");\r\n *\r\n * socket.on(\"foobar\", () => {\r\n *   // an event was received from the server\r\n * });\r\n *\r\n * // upon disconnection\r\n * socket.on(\"disconnect\", (reason) => {\r\n *   console.log(`disconnected due to ${reason}`);\r\n * });\r\n */\nexport class Socket extends Emitter {\n  /**\r\n   * `Socket` constructor.\r\n   */\n  constructor(io, nsp, opts) {\n    super();\n    /**\r\n     * Whether the socket is currently connected to the server.\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * socket.on(\"connect\", () => {\r\n     *   console.log(socket.connected); // true\r\n     * });\r\n     *\r\n     * socket.on(\"disconnect\", () => {\r\n     *   console.log(socket.connected); // false\r\n     * });\r\n     */\n    this.connected = false;\n    /**\r\n     * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\r\n     * be transmitted by the server.\r\n     */\n    this.recovered = false;\n    /**\r\n     * Buffer for packets received before the CONNECT packet\r\n     */\n    this.receiveBuffer = [];\n    /**\r\n     * Buffer for packets that will be sent once the socket is connected\r\n     */\n    this.sendBuffer = [];\n    /**\r\n     * The queue of packets to be sent with retry in case of failure.\r\n     *\r\n     * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\r\n     * @private\r\n     */\n    this._queue = [];\n    /**\r\n     * A sequence to generate the ID of the {@link QueuedPacket}.\r\n     * @private\r\n     */\n    this._queueSeq = 0;\n    this.ids = 0;\n    /**\r\n     * A map containing acknowledgement handlers.\r\n     *\r\n     * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\r\n     *\r\n     * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\r\n     * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\r\n     * - `const value = await socket.emitWithAck(\"test\")`\r\n     *\r\n     * From those that don't:\r\n     *\r\n     * - `socket.emit(\"test\", (value) => { ... });`\r\n     *\r\n     * In the first case, the handlers will be called with an error when:\r\n     *\r\n     * - the timeout is reached\r\n     * - the socket gets disconnected\r\n     *\r\n     * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\r\n     * an acknowledgement from the server.\r\n     *\r\n     * @private\r\n     */\n    this.acks = {};\n    this.flags = {};\n    this.io = io;\n    this.nsp = nsp;\n    if (opts && opts.auth) {\n      this.auth = opts.auth;\n    }\n    this._opts = Object.assign({}, opts);\n    if (this.io._autoConnect) this.open();\n  }\n  /**\r\n   * Whether the socket is currently disconnected\r\n   *\r\n   * @example\r\n   * const socket = io();\r\n   *\r\n   * socket.on(\"connect\", () => {\r\n   *   console.log(socket.disconnected); // false\r\n   * });\r\n   *\r\n   * socket.on(\"disconnect\", () => {\r\n   *   console.log(socket.disconnected); // true\r\n   * });\r\n   */\n  get disconnected() {\n    return !this.connected;\n  }\n  /**\r\n   * Subscribe to open, close and packet events\r\n   *\r\n   * @private\r\n   */\n  subEvents() {\n    if (this.subs) return;\n    const io = this.io;\n    this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n  }\n  /**\r\n   * Whether the Socket will try to reconnect when its Manager connects or reconnects.\r\n   *\r\n   * @example\r\n   * const socket = io();\r\n   *\r\n   * console.log(socket.active); // true\r\n   *\r\n   * socket.on(\"disconnect\", (reason) => {\r\n   *   if (reason === \"io server disconnect\") {\r\n   *     // the disconnection was initiated by the server, you need to manually reconnect\r\n   *     console.log(socket.active); // false\r\n   *   }\r\n   *   // else the socket will automatically try to reconnect\r\n   *   console.log(socket.active); // true\r\n   * });\r\n   */\n  get active() {\n    return !!this.subs;\n  }\n  /**\r\n   * \"Opens\" the socket.\r\n   *\r\n   * @example\r\n   * const socket = io({\r\n   *   autoConnect: false\r\n   * });\r\n   *\r\n   * socket.connect();\r\n   */\n  connect() {\n    if (this.connected) return this;\n    this.subEvents();\n    if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n    if (\"open\" === this.io._readyState) this.onopen();\n    return this;\n  }\n  /**\r\n   * Alias for {@link connect()}.\r\n   */\n  open() {\n    return this.connect();\n  }\n  /**\r\n   * Sends a `message` event.\r\n   *\r\n   * This method mimics the WebSocket.send() method.\r\n   *\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\r\n   *\r\n   * @example\r\n   * socket.send(\"hello\");\r\n   *\r\n   * // this is equivalent to\r\n   * socket.emit(\"message\", \"hello\");\r\n   *\r\n   * @return self\r\n   */\n  send(...args) {\n    args.unshift(\"message\");\n    this.emit.apply(this, args);\n    return this;\n  }\n  /**\r\n   * Override `emit`.\r\n   * If the event is in `events`, it's emitted normally.\r\n   *\r\n   * @example\r\n   * socket.emit(\"hello\", \"world\");\r\n   *\r\n   * // all serializable datastructures are supported (no need to call JSON.stringify)\r\n   * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\r\n   *\r\n   * // with an acknowledgement from the server\r\n   * socket.emit(\"hello\", \"world\", (val) => {\r\n   *   // ...\r\n   * });\r\n   *\r\n   * @return self\r\n   */\n  emit(ev, ...args) {\n    var _a, _b, _c;\n    if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n      throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n    }\n    args.unshift(ev);\n    if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n      this._addToQueue(args);\n      return this;\n    }\n    const packet = {\n      type: PacketType.EVENT,\n      data: args\n    };\n    packet.options = {};\n    packet.options.compress = this.flags.compress !== false;\n    // event ack callback\n    if (\"function\" === typeof args[args.length - 1]) {\n      const id = this.ids++;\n      const ack = args.pop();\n      this._registerAckCallback(id, ack);\n      packet.id = id;\n    }\n    const isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;\n    const isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());\n    const discardPacket = this.flags.volatile && !isTransportWritable;\n    if (discardPacket) {} else if (isConnected) {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    } else {\n      this.sendBuffer.push(packet);\n    }\n    this.flags = {};\n    return this;\n  }\n  /**\r\n   * @private\r\n   */\n  _registerAckCallback(id, ack) {\n    var _a;\n    const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n    if (timeout === undefined) {\n      this.acks[id] = ack;\n      return;\n    }\n    // @ts-ignore\n    const timer = this.io.setTimeoutFn(() => {\n      delete this.acks[id];\n      for (let i = 0; i < this.sendBuffer.length; i++) {\n        if (this.sendBuffer[i].id === id) {\n          this.sendBuffer.splice(i, 1);\n        }\n      }\n      ack.call(this, new Error(\"operation has timed out\"));\n    }, timeout);\n    const fn = (...args) => {\n      // @ts-ignore\n      this.io.clearTimeoutFn(timer);\n      ack.apply(this, args);\n    };\n    fn.withError = true;\n    this.acks[id] = fn;\n  }\n  /**\r\n   * Emits an event and waits for an acknowledgement\r\n   *\r\n   * @example\r\n   * // without timeout\r\n   * const response = await socket.emitWithAck(\"hello\", \"world\");\r\n   *\r\n   * // with a specific timeout\r\n   * try {\r\n   *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\r\n   * } catch (err) {\r\n   *   // the server did not acknowledge the event in the given delay\r\n   * }\r\n   *\r\n   * @return a Promise that will be fulfilled when the server acknowledges the event\r\n   */\n  emitWithAck(ev, ...args) {\n    return new Promise((resolve, reject) => {\n      const fn = (arg1, arg2) => {\n        return arg1 ? reject(arg1) : resolve(arg2);\n      };\n      fn.withError = true;\n      args.push(fn);\n      this.emit(ev, ...args);\n    });\n  }\n  /**\r\n   * Add the packet to the queue.\r\n   * @param args\r\n   * @private\r\n   */\n  _addToQueue(args) {\n    let ack;\n    if (typeof args[args.length - 1] === \"function\") {\n      ack = args.pop();\n    }\n    const packet = {\n      id: this._queueSeq++,\n      tryCount: 0,\n      pending: false,\n      args,\n      flags: Object.assign({\n        fromQueue: true\n      }, this.flags)\n    };\n    args.push((err, ...responseArgs) => {\n      if (packet !== this._queue[0]) {\n        // the packet has already been acknowledged\n        return;\n      }\n      const hasError = err !== null;\n      if (hasError) {\n        if (packet.tryCount > this._opts.retries) {\n          this._queue.shift();\n          if (ack) {\n            ack(err);\n          }\n        }\n      } else {\n        this._queue.shift();\n        if (ack) {\n          ack(null, ...responseArgs);\n        }\n      }\n      packet.pending = false;\n      return this._drainQueue();\n    });\n    this._queue.push(packet);\n    this._drainQueue();\n  }\n  /**\r\n   * Send the first packet of the queue, and wait for an acknowledgement from the server.\r\n   * @param force - whether to resend a packet that has not been acknowledged yet\r\n   *\r\n   * @private\r\n   */\n  _drainQueue(force = false) {\n    if (!this.connected || this._queue.length === 0) {\n      return;\n    }\n    const packet = this._queue[0];\n    if (packet.pending && !force) {\n      return;\n    }\n    packet.pending = true;\n    packet.tryCount++;\n    this.flags = packet.flags;\n    this.emit.apply(this, packet.args);\n  }\n  /**\r\n   * Sends a packet.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n  packet(packet) {\n    packet.nsp = this.nsp;\n    this.io._packet(packet);\n  }\n  /**\r\n   * Called upon engine `open`.\r\n   *\r\n   * @private\r\n   */\n  onopen() {\n    if (typeof this.auth == \"function\") {\n      this.auth(data => {\n        this._sendConnectPacket(data);\n      });\n    } else {\n      this._sendConnectPacket(this.auth);\n    }\n  }\n  /**\r\n   * Sends a CONNECT packet to initiate the Socket.IO session.\r\n   *\r\n   * @param data\r\n   * @private\r\n   */\n  _sendConnectPacket(data) {\n    this.packet({\n      type: PacketType.CONNECT,\n      data: this._pid ? Object.assign({\n        pid: this._pid,\n        offset: this._lastOffset\n      }, data) : data\n    });\n  }\n  /**\r\n   * Called upon engine or manager `error`.\r\n   *\r\n   * @param err\r\n   * @private\r\n   */\n  onerror(err) {\n    if (!this.connected) {\n      this.emitReserved(\"connect_error\", err);\n    }\n  }\n  /**\r\n   * Called upon engine `close`.\r\n   *\r\n   * @param reason\r\n   * @param description\r\n   * @private\r\n   */\n  onclose(reason, description) {\n    this.connected = false;\n    delete this.id;\n    this.emitReserved(\"disconnect\", reason, description);\n    this._clearAcks();\n  }\n  /**\r\n   * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\r\n   * the server.\r\n   *\r\n   * @private\r\n   */\n  _clearAcks() {\n    Object.keys(this.acks).forEach(id => {\n      const isBuffered = this.sendBuffer.some(packet => String(packet.id) === id);\n      if (!isBuffered) {\n        // note: handlers that do not accept an error as first argument are ignored here\n        const ack = this.acks[id];\n        delete this.acks[id];\n        if (ack.withError) {\n          ack.call(this, new Error(\"socket has been disconnected\"));\n        }\n      }\n    });\n  }\n  /**\r\n   * Called with socket packet.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n  onpacket(packet) {\n    const sameNamespace = packet.nsp === this.nsp;\n    if (!sameNamespace) return;\n    switch (packet.type) {\n      case PacketType.CONNECT:\n        if (packet.data && packet.data.sid) {\n          this.onconnect(packet.data.sid, packet.data.pid);\n        } else {\n          this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n        }\n        break;\n      case PacketType.EVENT:\n      case PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n      case PacketType.ACK:\n      case PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n      case PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n      case PacketType.CONNECT_ERROR:\n        this.destroy();\n        const err = new Error(packet.data.message);\n        // @ts-ignore\n        err.data = packet.data.data;\n        this.emitReserved(\"connect_error\", err);\n        break;\n    }\n  }\n  /**\r\n   * Called upon a server event.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n  onevent(packet) {\n    const args = packet.data || [];\n    if (null != packet.id) {\n      args.push(this.ack(packet.id));\n    }\n    if (this.connected) {\n      this.emitEvent(args);\n    } else {\n      this.receiveBuffer.push(Object.freeze(args));\n    }\n  }\n  emitEvent(args) {\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n    super.emit.apply(this, args);\n    if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n      this._lastOffset = args[args.length - 1];\n    }\n  }\n  /**\r\n   * Produces an ack callback to emit with an event.\r\n   *\r\n   * @private\r\n   */\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function (...args) {\n      // prevent double callbacks\n      if (sent) return;\n      sent = true;\n      self.packet({\n        type: PacketType.ACK,\n        id: id,\n        data: args\n      });\n    };\n  }\n  /**\r\n   * Called upon a server acknowledgement.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n  onack(packet) {\n    const ack = this.acks[packet.id];\n    if (typeof ack !== \"function\") {\n      return;\n    }\n    delete this.acks[packet.id];\n    // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n    if (ack.withError) {\n      packet.data.unshift(null);\n    }\n    // @ts-ignore\n    ack.apply(this, packet.data);\n  }\n  /**\r\n   * Called upon server connect.\r\n   *\r\n   * @private\r\n   */\n  onconnect(id, pid) {\n    this.id = id;\n    this.recovered = pid && this._pid === pid;\n    this._pid = pid; // defined only if connection state recovery is enabled\n    this.connected = true;\n    this.emitBuffered();\n    this.emitReserved(\"connect\");\n    this._drainQueue(true);\n  }\n  /**\r\n   * Emit buffered events (received and emitted).\r\n   *\r\n   * @private\r\n   */\n  emitBuffered() {\n    this.receiveBuffer.forEach(args => this.emitEvent(args));\n    this.receiveBuffer = [];\n    this.sendBuffer.forEach(packet => {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    });\n    this.sendBuffer = [];\n  }\n  /**\r\n   * Called upon server disconnect.\r\n   *\r\n   * @private\r\n   */\n  ondisconnect() {\n    this.destroy();\n    this.onclose(\"io server disconnect\");\n  }\n  /**\r\n   * Called upon forced client/server side disconnections,\r\n   * this method ensures the manager stops tracking us and\r\n   * that reconnections don't get triggered for this.\r\n   *\r\n   * @private\r\n   */\n  destroy() {\n    if (this.subs) {\n      // clean subscriptions to avoid reconnections\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs = undefined;\n    }\n    this.io[\"_destroy\"](this);\n  }\n  /**\r\n   * Disconnects the socket manually. In that case, the socket will not try to reconnect.\r\n   *\r\n   * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\r\n   *\r\n   * @example\r\n   * const socket = io();\r\n   *\r\n   * socket.on(\"disconnect\", (reason) => {\r\n   *   // console.log(reason); prints \"io client disconnect\"\r\n   * });\r\n   *\r\n   * socket.disconnect();\r\n   *\r\n   * @return self\r\n   */\n  disconnect() {\n    if (this.connected) {\n      this.packet({\n        type: PacketType.DISCONNECT\n      });\n    }\n    // remove socket from pool\n    this.destroy();\n    if (this.connected) {\n      // fire events\n      this.onclose(\"io client disconnect\");\n    }\n    return this;\n  }\n  /**\r\n   * Alias for {@link disconnect()}.\r\n   *\r\n   * @return self\r\n   */\n  close() {\n    return this.disconnect();\n  }\n  /**\r\n   * Sets the compress flag.\r\n   *\r\n   * @example\r\n   * socket.compress(false).emit(\"hello\");\r\n   *\r\n   * @param compress - if `true`, compresses the sending data\r\n   * @return self\r\n   */\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  /**\r\n   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n   * ready to send messages.\r\n   *\r\n   * @example\r\n   * socket.volatile.emit(\"hello\"); // the server may or may not receive it\r\n   *\r\n   * @returns self\r\n   */\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  /**\r\n   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n   * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n   *\r\n   * @example\r\n   * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n   *   if (err) {\r\n   *     // the server did not acknowledge the event in the given delay\r\n   *   }\r\n   * });\r\n   *\r\n   * @returns self\r\n   */\n  timeout(timeout) {\n    this.flags.timeout = timeout;\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback.\r\n   *\r\n   * @example\r\n   * socket.onAny((event, ...args) => {\r\n   *   console.log(`got ${event}`);\r\n   * });\r\n   *\r\n   * @param listener\r\n   */\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.push(listener);\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback. The listener is added to the beginning of the listeners array.\r\n   *\r\n   * @example\r\n   * socket.prependAny((event, ...args) => {\r\n   *   console.log(`got event ${event}`);\r\n   * });\r\n   *\r\n   * @param listener\r\n   */\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.unshift(listener);\n    return this;\n  }\n  /**\r\n   * Removes the listener that will be fired when any event is emitted.\r\n   *\r\n   * @example\r\n   * const catchAllListener = (event, ...args) => {\r\n   *   console.log(`got event ${event}`);\r\n   * }\r\n   *\r\n   * socket.onAny(catchAllListener);\r\n   *\r\n   * // remove a specific listener\r\n   * socket.offAny(catchAllListener);\r\n   *\r\n   * // or remove all listeners\r\n   * socket.offAny();\r\n   *\r\n   * @param listener\r\n   */\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n    return this;\n  }\n  /**\r\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n   * e.g. to remove listeners.\r\n   */\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback.\r\n   *\r\n   * Note: acknowledgements sent to the server are not included.\r\n   *\r\n   * @example\r\n   * socket.onAnyOutgoing((event, ...args) => {\r\n   *   console.log(`sent event ${event}`);\r\n   * });\r\n   *\r\n   * @param listener\r\n   */\n  onAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n    this._anyOutgoingListeners.push(listener);\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback. The listener is added to the beginning of the listeners array.\r\n   *\r\n   * Note: acknowledgements sent to the server are not included.\r\n   *\r\n   * @example\r\n   * socket.prependAnyOutgoing((event, ...args) => {\r\n   *   console.log(`sent event ${event}`);\r\n   * });\r\n   *\r\n   * @param listener\r\n   */\n  prependAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n    this._anyOutgoingListeners.unshift(listener);\n    return this;\n  }\n  /**\r\n   * Removes the listener that will be fired when any event is emitted.\r\n   *\r\n   * @example\r\n   * const catchAllListener = (event, ...args) => {\r\n   *   console.log(`sent event ${event}`);\r\n   * }\r\n   *\r\n   * socket.onAnyOutgoing(catchAllListener);\r\n   *\r\n   * // remove a specific listener\r\n   * socket.offAnyOutgoing(catchAllListener);\r\n   *\r\n   * // or remove all listeners\r\n   * socket.offAnyOutgoing();\r\n   *\r\n   * @param [listener] - the catch-all listener (optional)\r\n   */\n  offAnyOutgoing(listener) {\n    if (!this._anyOutgoingListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyOutgoingListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyOutgoingListeners = [];\n    }\n    return this;\n  }\n  /**\r\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n   * e.g. to remove listeners.\r\n   */\n  listenersAnyOutgoing() {\n    return this._anyOutgoingListeners || [];\n  }\n  /**\r\n   * Notify the listeners for each packet sent\r\n   *\r\n   * @param packet\r\n   *\r\n   * @private\r\n   */\n  notifyOutgoingListeners(packet) {\n    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n      const listeners = this._anyOutgoingListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, packet.data);\n      }\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
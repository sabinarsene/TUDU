{"ast":null,"code":"import { getTabbableNodes } from './utils/DOMutils';\nfunction weakRef(value) {\n  if (!value) return null;\n  // #68 Safari 14.1 dont have it yet\n  // FIXME: remove in 2025\n  if (typeof WeakRef === 'undefined') {\n    return function () {\n      return value || null;\n    };\n  }\n  var w = value ? new WeakRef(value) : null;\n  return function () {\n    return (w === null || w === void 0 ? void 0 : w.deref()) || null;\n  };\n}\nexport var recordElementLocation = function (element) {\n  if (!element) {\n    return null;\n  }\n  var stack = [];\n  var currentElement = element;\n  while (currentElement && currentElement !== document.body) {\n    stack.push({\n      current: weakRef(currentElement),\n      parent: weakRef(currentElement.parentElement),\n      left: weakRef(currentElement.previousElementSibling),\n      right: weakRef(currentElement.nextElementSibling)\n    });\n    currentElement = currentElement.parentElement;\n  }\n  return {\n    element: weakRef(element),\n    stack: stack,\n    ownerDocument: element.ownerDocument\n  };\n};\nvar restoreFocusTo = function (location) {\n  var _a, _b, _c, _d, _e;\n  if (!location) {\n    return undefined;\n  }\n  var stack = location.stack,\n    ownerDocument = location.ownerDocument;\n  var visibilityCache = new Map();\n  for (var _i = 0, stack_1 = stack; _i < stack_1.length; _i++) {\n    var line = stack_1[_i];\n    var parent_1 = (_a = line.parent) === null || _a === void 0 ? void 0 : _a.call(line);\n    // is it still here?\n    if (parent_1 && ownerDocument.contains(parent_1)) {\n      var left = (_b = line.left) === null || _b === void 0 ? void 0 : _b.call(line);\n      var savedCurrent = line.current();\n      var current = parent_1.contains(savedCurrent) ? savedCurrent : undefined;\n      var right = (_c = line.right) === null || _c === void 0 ? void 0 : _c.call(line);\n      var focusables = getTabbableNodes([parent_1], visibilityCache);\n      var aim =\n      // that is element itself\n      (_e = (_d = current !== null && current !== void 0 ? current :\n      // or something in it's place\n      left === null || left === void 0 ? void 0 : left.nextElementSibling) !== null && _d !== void 0 ? _d :\n      // or somebody to the right, still close enough\n      right) !== null && _e !== void 0 ? _e :\n      // or somebody to the left, something?\n      left;\n      while (aim) {\n        for (var _f = 0, focusables_1 = focusables; _f < focusables_1.length; _f++) {\n          var focusable = focusables_1[_f];\n          if (aim === null || aim === void 0 ? void 0 : aim.contains(focusable.node)) {\n            return focusable.node;\n          }\n        }\n        aim = aim.nextElementSibling;\n      }\n      if (focusables.length) {\n        // if parent contains a focusable - move there\n        return focusables[0].node;\n      }\n    }\n  }\n  // nothing matched\n  return undefined;\n};\n/**\n * Captures the current focused element to restore focus as close as possible in the future\n * Handles situations where the focused element is removed from the DOM or no longer focusable\n * moving focus to the closest focusable element\n * @param targetElement - element where focus should be restored\n * @returns a function returning a new element to focus\n */\nexport var captureFocusRestore = function (targetElement) {\n  var location = recordElementLocation(targetElement);\n  return function () {\n    return restoreFocusTo(location);\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
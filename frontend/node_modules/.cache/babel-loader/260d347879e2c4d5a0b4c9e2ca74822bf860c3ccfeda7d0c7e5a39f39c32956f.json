{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope, observeAttributes, observeChildren } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport { createSplitProps, compact } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/avatar.anatomy.ts\nvar anatomy = createAnatomy(\"avatar\").parts(\"root\", \"image\", \"fallback\");\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `avatar:${ctx.id}`,\n  getImageId: ctx => ctx.ids?.image ?? `avatar:${ctx.id}:image`,\n  getFallbackId: ctx => ctx.ids?.fallback ?? `avatar:${ctx.id}:fallback`,\n  getRootEl: ctx => dom.getById(ctx, dom.getRootId(ctx)),\n  getImageEl: ctx => dom.getById(ctx, dom.getImageId(ctx))\n});\n\n// src/avatar.connect.ts\nfunction connect(state, send, normalize) {\n  const loaded = state.matches(\"loaded\");\n  return {\n    loaded,\n    setSrc(src) {\n      send({\n        type: \"SRC.SET\",\n        src\n      });\n    },\n    setLoaded() {\n      send({\n        type: \"IMG.LOADED\",\n        src: \"api\"\n      });\n    },\n    setError() {\n      send({\n        type: \"IMG.ERROR\",\n        src: \"api\"\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: state.context.dir,\n        id: dom.getRootId(state.context)\n      });\n    },\n    getImageProps() {\n      return normalize.img({\n        ...parts.image.attrs,\n        hidden: !loaded,\n        dir: state.context.dir,\n        id: dom.getImageId(state.context),\n        \"data-state\": loaded ? \"visible\" : \"hidden\",\n        onLoad() {\n          send({\n            type: \"IMG.LOADED\",\n            src: \"element\"\n          });\n        },\n        onError() {\n          send({\n            type: \"IMG.ERROR\",\n            src: \"element\"\n          });\n        }\n      });\n    },\n    getFallbackProps() {\n      return normalize.element({\n        ...parts.fallback.attrs,\n        dir: state.context.dir,\n        id: dom.getFallbackId(state.context),\n        hidden: loaded,\n        \"data-state\": loaded ? \"hidden\" : \"visible\"\n      });\n    }\n  };\n}\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"avatar\",\n    initial: \"loading\",\n    activities: [\"trackImageRemoval\"],\n    context: ctx,\n    on: {\n      \"SRC.CHANGE\": {\n        target: \"loading\"\n      },\n      \"IMG.UNMOUNT\": {\n        target: \"error\"\n      }\n    },\n    states: {\n      loading: {\n        activities: [\"trackSrcChange\"],\n        entry: [\"checkImageStatus\"],\n        on: {\n          \"IMG.LOADED\": {\n            target: \"loaded\",\n            actions: [\"invokeOnLoad\"]\n          },\n          \"IMG.ERROR\": {\n            target: \"error\",\n            actions: [\"invokeOnError\"]\n          }\n        }\n      },\n      error: {\n        activities: [\"trackSrcChange\"],\n        on: {\n          \"IMG.LOADED\": {\n            target: \"loaded\",\n            actions: [\"invokeOnLoad\"]\n          }\n        }\n      },\n      loaded: {\n        activities: [\"trackSrcChange\"],\n        on: {\n          \"IMG.ERROR\": {\n            target: \"error\",\n            actions: [\"invokeOnError\"]\n          }\n        }\n      }\n    }\n  }, {\n    activities: {\n      trackSrcChange(ctx2, _evt, {\n        send\n      }) {\n        const imageEl = dom.getImageEl(ctx2);\n        return observeAttributes(imageEl, {\n          attributes: [\"src\", \"srcset\"],\n          callback() {\n            send({\n              type: \"SRC.CHANGE\"\n            });\n          }\n        });\n      },\n      trackImageRemoval(ctx2, _evt, {\n        send\n      }) {\n        const rootEl = dom.getRootEl(ctx2);\n        return observeChildren(rootEl, {\n          callback(records) {\n            const removedNodes = Array.from(records[0].removedNodes);\n            const removed = removedNodes.find(node => node.nodeType === Node.ELEMENT_NODE && node.matches(\"[data-scope=avatar][data-part=image]\"));\n            if (removed) {\n              send({\n                type: \"IMG.UNMOUNT\"\n              });\n            }\n          }\n        });\n      }\n    },\n    actions: {\n      invokeOnLoad(ctx2) {\n        ctx2.onStatusChange?.({\n          status: \"loaded\"\n        });\n      },\n      invokeOnError(ctx2) {\n        ctx2.onStatusChange?.({\n          status: \"error\"\n        });\n      },\n      checkImageStatus(ctx2, _evt, {\n        send\n      }) {\n        const imageEl = dom.getImageEl(ctx2);\n        if (imageEl?.complete) {\n          const type = hasLoaded(imageEl) ? \"IMG.LOADED\" : \"IMG.ERROR\";\n          send({\n            type,\n            src: \"ssr\"\n          });\n        }\n      }\n    }\n  });\n}\nfunction hasLoaded(image) {\n  return image.complete && image.naturalWidth !== 0 && image.naturalHeight !== 0;\n}\nvar props = createProps()([\"dir\", \"id\", \"ids\", \"onStatusChange\", \"getRootNode\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { mergeProps } from '@zag-js/react';\nimport { forwardRef } from 'react';\nimport { composeRefs } from '../../utils/compose-refs.js';\nimport { createSplitProps } from '../../utils/create-split-props.js';\nimport { ark } from '../factory.js';\nimport { useField } from './use-field.js';\nimport { FieldProvider } from './use-field-context.js';\nconst FieldRoot = forwardRef((props, ref) => {\n  const [useFieldProps, localProps] = createSplitProps()(props, [\"id\", \"ids\", \"disabled\", \"invalid\", \"readOnly\", \"required\"]);\n  const field = useField(useFieldProps);\n  const mergedProps = mergeProps(field.getRootProps(), localProps);\n  return /* @__PURE__ */jsx(FieldProvider, {\n    value: field,\n    children: /* @__PURE__ */jsx(ark.div, {\n      ...mergedProps,\n      ref: composeRefs(ref, field.refs.rootRef)\n    })\n  });\n});\nFieldRoot.displayName = \"FieldRoot\";\nexport { FieldRoot };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
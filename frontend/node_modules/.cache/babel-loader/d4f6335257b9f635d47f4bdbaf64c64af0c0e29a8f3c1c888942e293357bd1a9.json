{"ast":null,"code":"import axios from 'axios';\n\n// Folosim window.location.hostname pentru a obține adresa IP sau hostname-ul curent\nconst API_URL = `http://${window.location.hostname}:5000/api`;\nconst AUTH_ENDPOINT = `${API_URL}/auth`;\nconsole.log('Auth API URL:', API_URL);\n\n// Setarea token-ului în header-ul de autorizare\nconst setAuthToken = token => {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    // Păstrăm și x-auth-token pentru compatibilitate\n    axios.defaults.headers.common['x-auth-token'] = token;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n    delete axios.defaults.headers.common['x-auth-token'];\n  }\n};\n\n// Înregistrare utilizator\nexport const register = async userData => {\n  try {\n    const response = await axios.post(`${AUTH_ENDPOINT}/register`, userData);\n\n    // Salvare token în localStorage\n    localStorage.setItem('token', response.data.token);\n    localStorage.setItem('user', JSON.stringify(response.data.user));\n\n    // Setare token în header\n    setAuthToken(response.data.token);\n    return response.data;\n  } catch (error) {\n    console.error('Register error:', error);\n\n    // Gestionare îmbunătățită a erorilor\n    if (error.response && error.response.data) {\n      throw new Error(error.response.data.message || 'Eroare la înregistrare');\n    } else if (error.request) {\n      // Cererea a fost făcută dar nu s-a primit răspuns\n      throw new Error('Nu s-a putut contacta serverul. Verificați conexiunea la internet.');\n    } else {\n      // Eroare la configurarea cererii\n      throw new Error(error.message || 'A apărut o eroare la înregistrare.');\n    }\n  }\n};\n\n// Login utilizator\nexport const login = async (email, password) => {\n  try {\n    const response = await axios.post(`${AUTH_ENDPOINT}/login`, {\n      email,\n      password\n    });\n\n    // Salvare token în localStorage\n    localStorage.setItem('token', response.data.token);\n    localStorage.setItem('user', JSON.stringify(response.data.user));\n\n    // Setare token în header\n    setAuthToken(response.data.token);\n    return response.data;\n  } catch (error) {\n    console.error('Login error:', error);\n\n    // Gestionare îmbunătățită a erorilor\n    if (error.response && error.response.data) {\n      throw new Error(error.response.data.message || 'Eroare la autentificare');\n    } else if (error.request) {\n      // Cererea a fost făcută dar nu s-a primit răspuns\n      throw new Error('Nu s-a putut contacta serverul. Verificați conexiunea la internet.');\n    } else {\n      // Eroare la configurarea cererii\n      throw new Error(error.message || 'A apărut o eroare la autentificare.');\n    }\n  }\n};\n\n// Logout utilizator\nexport const logout = () => {\n  // Ștergere token din localStorage\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n\n  // Ștergere token din header\n  setAuthToken(null);\n};\n\n// Verificare dacă utilizatorul este autentificat\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  return !!token;\n};\n\n// Obținere profil utilizator\nexport const getUserProfile = async () => {\n  try {\n    setAuthToken(localStorage.getItem('token'));\n    const response = await axios.get(`${AUTH_ENDPOINT}/profile`);\n    return response.data;\n  } catch (error) {\n    console.error('Get profile error:', error);\n\n    // Gestionare îmbunătățită a erorilor\n    if (error.response && error.response.data) {\n      throw new Error(error.response.data.message || 'Eroare la obținerea profilului');\n    } else if (error.request) {\n      // Cererea a fost făcută dar nu s-a primit răspuns\n      throw new Error('Nu s-a putut contacta serverul. Verificați conexiunea la internet.');\n    } else {\n      // Eroare la configurarea cererii\n      throw new Error(error.message || 'A apărut o eroare la obținerea profilului.');\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","window","location","hostname","AUTH_ENDPOINT","console","log","setAuthToken","token","defaults","headers","common","register","userData","response","post","localStorage","setItem","data","JSON","stringify","user","error","Error","message","request","login","email","password","logout","removeItem","isAuthenticated","getItem","getUserProfile","get"],"sources":["C:/Users/sabin.arsene/Desktop/Tudu-app/TUDU/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Folosim window.location.hostname pentru a obține adresa IP sau hostname-ul curent\r\nconst API_URL = `http://${window.location.hostname}:5000/api`;\r\nconst AUTH_ENDPOINT = `${API_URL}/auth`;\r\n\r\nconsole.log('Auth API URL:', API_URL);\r\n\r\n// Setarea token-ului în header-ul de autorizare\r\nconst setAuthToken = (token) => {\r\n  if (token) {\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    // Păstrăm și x-auth-token pentru compatibilitate\r\n    axios.defaults.headers.common['x-auth-token'] = token;\r\n  } else {\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    delete axios.defaults.headers.common['x-auth-token'];\r\n  }\r\n};\r\n\r\n// Înregistrare utilizator\r\nexport const register = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${AUTH_ENDPOINT}/register`, userData);\r\n    \r\n    // Salvare token în localStorage\r\n    localStorage.setItem('token', response.data.token);\r\n    localStorage.setItem('user', JSON.stringify(response.data.user));\r\n    \r\n    // Setare token în header\r\n    setAuthToken(response.data.token);\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Register error:', error);\r\n    \r\n    // Gestionare îmbunătățită a erorilor\r\n    if (error.response && error.response.data) {\r\n      throw new Error(error.response.data.message || 'Eroare la înregistrare');\r\n    } else if (error.request) {\r\n      // Cererea a fost făcută dar nu s-a primit răspuns\r\n      throw new Error('Nu s-a putut contacta serverul. Verificați conexiunea la internet.');\r\n    } else {\r\n      // Eroare la configurarea cererii\r\n      throw new Error(error.message || 'A apărut o eroare la înregistrare.');\r\n    }\r\n  }\r\n};\r\n\r\n// Login utilizator\r\nexport const login = async (email, password) => {\r\n  try {\r\n    const response = await axios.post(`${AUTH_ENDPOINT}/login`, { email, password });\r\n    \r\n    // Salvare token în localStorage\r\n    localStorage.setItem('token', response.data.token);\r\n    localStorage.setItem('user', JSON.stringify(response.data.user));\r\n    \r\n    // Setare token în header\r\n    setAuthToken(response.data.token);\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    \r\n    // Gestionare îmbunătățită a erorilor\r\n    if (error.response && error.response.data) {\r\n      throw new Error(error.response.data.message || 'Eroare la autentificare');\r\n    } else if (error.request) {\r\n      // Cererea a fost făcută dar nu s-a primit răspuns\r\n      throw new Error('Nu s-a putut contacta serverul. Verificați conexiunea la internet.');\r\n    } else {\r\n      // Eroare la configurarea cererii\r\n      throw new Error(error.message || 'A apărut o eroare la autentificare.');\r\n    }\r\n  }\r\n};\r\n\r\n// Logout utilizator\r\nexport const logout = () => {\r\n  // Ștergere token din localStorage\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('user');\r\n  \r\n  // Ștergere token din header\r\n  setAuthToken(null);\r\n};\r\n\r\n// Verificare dacă utilizatorul este autentificat\r\nexport const isAuthenticated = () => {\r\n  const token = localStorage.getItem('token');\r\n  return !!token;\r\n};\r\n\r\n// Obținere profil utilizator\r\nexport const getUserProfile = async () => {\r\n  try {\r\n    setAuthToken(localStorage.getItem('token'));\r\n    const response = await axios.get(`${AUTH_ENDPOINT}/profile`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Get profile error:', error);\r\n    \r\n    // Gestionare îmbunătățită a erorilor\r\n    if (error.response && error.response.data) {\r\n      throw new Error(error.response.data.message || 'Eroare la obținerea profilului');\r\n    } else if (error.request) {\r\n      // Cererea a fost făcută dar nu s-a primit răspuns\r\n      throw new Error('Nu s-a putut contacta serverul. Verificați conexiunea la internet.');\r\n    } else {\r\n      // Eroare la configurarea cererii\r\n      throw new Error(error.message || 'A apărut o eroare la obținerea profilului.');\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
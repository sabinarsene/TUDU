{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef, useMemo } from 'react';\nimport { mergeProps } from '../../merge-props.js';\nimport { cx } from '../../utils/cx.js';\nimport { createRecipeContext } from '../../styled-system/create-recipe-context.js';\nimport { chakra } from '../../styled-system/factory.js';\nimport { Loader } from '../loader/loader.js';\nconst {\n  useRecipeResult,\n  PropsProvider,\n  usePropsContext\n} = createRecipeContext({\n  key: \"button\"\n});\nconst Button = forwardRef(function Button2(inProps, ref) {\n  const propsContext = usePropsContext();\n  const props = useMemo(() => mergeProps(propsContext, inProps), [propsContext, inProps]);\n  const result = useRecipeResult(props);\n  const {\n    loading,\n    loadingText,\n    children,\n    spinner,\n    spinnerPlacement,\n    ...rest\n  } = result.props;\n  return /* @__PURE__ */jsx(chakra.button, {\n    type: \"button\",\n    ref,\n    ...rest,\n    disabled: loading || rest.disabled,\n    className: cx(result.className, props.className),\n    css: [result.styles, props.css],\n    children: !props.asChild && loading ? /* @__PURE__ */jsx(Loader, {\n      spinner,\n      text: loadingText,\n      spinnerPlacement,\n      children\n    }) : children\n  });\n});\nconst ButtonPropsProvider = PropsProvider;\nexport { Button, ButtonPropsProvider };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
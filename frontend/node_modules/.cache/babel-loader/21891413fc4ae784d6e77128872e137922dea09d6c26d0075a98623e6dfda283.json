{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sabin.arsene\\\\Desktop\\\\Tudu-app\\\\TUDU\\\\frontend\\\\src\\\\components\\\\Chat\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Box, VStack, Input, Button, Text, Flex, Badge } from '@chakra-ui/react';\nimport { useSocket } from '../../contexts/SocketContext';\nimport { NotificationService } from '../../services/NotificationService';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Chat({\n  receiverId,\n  receiverName\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [receiverStatus, setReceiverStatus] = useState('offline');\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isWindowFocused, setIsWindowFocused] = useState(true);\n  useEffect(() => {\n    const handleFocus = () => setIsWindowFocused(true);\n    const handleBlur = () => setIsWindowFocused(false);\n    window.addEventListener('focus', handleFocus);\n    window.addEventListener('blur', handleBlur);\n    NotificationService.requestPermission();\n    return () => {\n      window.removeEventListener('focus', handleFocus);\n      window.removeEventListener('blur', handleBlur);\n    };\n  }, []);\n  useEffect(() => {\n    if (socket) {\n      socket.on('receive_message', async data => {\n        setMessages(prev => [...prev, data]);\n        if (!isWindowFocused) {\n          setUnreadCount(prev => prev + 1);\n          await NotificationService.showNotification(`New message from ${receiverName}`, {\n            body: data.content,\n            tag: 'chat-message'\n          });\n        }\n      });\n      return () => {\n        socket.off('receive_message');\n      };\n    }\n  }, [socket, isWindowFocused, receiverName]);\n  useEffect(() => {\n    if (isWindowFocused && unreadCount > 0) {\n      setUnreadCount(0);\n      // Mark messages as read\n      messages.filter(msg => !msg.read_at && msg.sender_id === receiverId).forEach(msg => {\n        socket.emit('message_read', {\n          messageId: msg.id,\n          userId: localStorage.getItem('userId'),\n          senderId: msg.sender_id\n        });\n      });\n    }\n  }, [isWindowFocused, messages, unreadCount, receiverId, socket]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const {\n    socket,\n    connected,\n    sendMessage\n  } = useSocket();\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  useEffect(() => {\n    if (socket) {\n      socket.emit('join_chat', receiverId);\n      socket.on('receive_message', data => {\n        setMessages(prev => [...prev, data]);\n      });\n      socket.on('user_typing', userId => {\n        if (userId === receiverId) {\n          setIsTyping(true);\n          setTimeout(() => setIsTyping(false), 3000);\n        }\n      });\n\n      // Load existing messages\n      loadMessages();\n    }\n    return () => {\n      if (socket) {\n        socket.off('receive_message');\n        socket.off('user_typing');\n        socket.emit('leave_chat', receiverId);\n      }\n    };\n  }, [socket, receiverId]);\n  const loadMessages = async () => {\n    try {\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/messages/${receiverId}`);\n      setMessages(response.data);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error loading messages:', error);\n      setLoading(false);\n    }\n  };\n  const handleTyping = () => {\n    if (socket) {\n      socket.emit('typing', receiverId);\n    }\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n    typingTimeoutRef.current = setTimeout(() => {\n      if (socket) {\n        socket.emit('stop_typing', receiverId);\n      }\n    }, 2000);\n  };\n  const handleSend = async () => {\n    if (newMessage.trim() && socket) {\n      try {\n        const messageData = {\n          receiverId,\n          content: newMessage\n        };\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/messages`, messageData);\n        sendMessage(receiverId, newMessage);\n        setMessages(prev => [...prev, response.data]);\n        setNewMessage('');\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    w: \"100%\",\n    h: \"500px\",\n    borderWidth: \"1px\",\n    borderRadius: \"lg\",\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      p: 2,\n      borderBottomWidth: \"1px\",\n      alignItems: \"center\",\n      justify: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        align: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontWeight: \"bold\",\n          children: receiverName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          ml: 2,\n          w: 2,\n          h: 2,\n          borderRadius: \"full\",\n          bg: receiverStatus === 'online' ? 'green.500' : 'gray.400'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(Badge, {\n        colorScheme: \"red\",\n        borderRadius: \"full\",\n        px: 2,\n        children: unreadCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VStack, {\n      h: \"100%\",\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        flex: \"1\",\n        w: \"100%\",\n        overflowY: \"auto\",\n        p: 4,\n        children: [messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(Flex, {\n          justify: msg.sender_id === parseInt(localStorage.getItem('userId')) ? 'flex-end' : 'flex-start',\n          mb: 2,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            bg: msg.sender_id === parseInt(localStorage.getItem('userId')) ? 'blue.500' : 'gray.200',\n            color: msg.sender_id === parseInt(localStorage.getItem('userId')) ? 'white' : 'black',\n            borderRadius: \"lg\",\n            px: 3,\n            py: 2,\n            maxW: \"70%\",\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              children: msg.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              fontSize: \"xs\",\n              opacity: 0.8,\n              children: new Date(msg.created_at).toLocaleTimeString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"sm\",\n          color: \"gray.500\",\n          ml: 2,\n          children: [receiverName, \" is typing...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        p: 4,\n        w: \"100%\",\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          value: newMessage,\n          onChange: e => {\n            setNewMessage(e.target.value);\n            handleTyping();\n          },\n          placeholder: \"Type a message...\",\n          mr: 2,\n          onKeyPress: e => e.key === 'Enter' && handleSend()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSend,\n          colorScheme: \"blue\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"LaxBVoScYvlla8QBIHiJNi3qRrI=\", false, function () {\n  return [useSocket];\n});\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Box","VStack","Input","Button","Text","Flex","Badge","useSocket","NotificationService","axios","jsxDEV","_jsxDEV","Chat","receiverId","receiverName","_s","messages","setMessages","receiverStatus","setReceiverStatus","unreadCount","setUnreadCount","isWindowFocused","setIsWindowFocused","handleFocus","handleBlur","window","addEventListener","requestPermission","removeEventListener","socket","on","data","prev","showNotification","body","content","tag","off","filter","msg","read_at","sender_id","forEach","emit","messageId","id","userId","localStorage","getItem","senderId","newMessage","setNewMessage","isTyping","setIsTyping","loading","setLoading","connected","sendMessage","messagesEndRef","typingTimeoutRef","setTimeout","loadMessages","response","get","process","env","REACT_APP_API_URL","error","console","handleTyping","current","clearTimeout","handleSend","trim","messageData","post","display","justifyContent","alignItems","h","children","Spinner","fileName","_jsxFileName","lineNumber","columnNumber","w","borderWidth","borderRadius","p","borderBottomWidth","justify","align","fontWeight","ml","bg","colorScheme","px","spacing","flex","overflowY","map","idx","parseInt","mb","color","py","maxW","fontSize","opacity","Date","created_at","toLocaleTimeString","value","onChange","e","target","placeholder","mr","onKeyPress","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/sabin.arsene/Desktop/Tudu-app/TUDU/frontend/src/components/Chat/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Box, VStack, Input, Button, Text, Flex, Badge } from '@chakra-ui/react';\r\nimport { useSocket } from '../../contexts/SocketContext';\r\nimport { NotificationService } from '../../services/NotificationService';\r\nimport axios from 'axios';\r\n\r\nexport function Chat({ receiverId, receiverName }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [receiverStatus, setReceiverStatus] = useState('offline');\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [isWindowFocused, setIsWindowFocused] = useState(true);\r\n  \r\n  useEffect(() => {\r\n    const handleFocus = () => setIsWindowFocused(true);\r\n    const handleBlur = () => setIsWindowFocused(false);\r\n\r\n    window.addEventListener('focus', handleFocus);\r\n    window.addEventListener('blur', handleBlur);\r\n\r\n    NotificationService.requestPermission();\r\n\r\n    return () => {\r\n      window.removeEventListener('focus', handleFocus);\r\n      window.removeEventListener('blur', handleBlur);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.on('receive_message', async (data) => {\r\n        setMessages(prev => [...prev, data]);\r\n        \r\n        if (!isWindowFocused) {\r\n          setUnreadCount(prev => prev + 1);\r\n          await NotificationService.showNotification(`New message from ${receiverName}`, {\r\n            body: data.content,\r\n            tag: 'chat-message'\r\n          });\r\n        }\r\n      });\r\n\r\n      return () => {\r\n        socket.off('receive_message');\r\n      };\r\n    }\r\n  }, [socket, isWindowFocused, receiverName]);\r\n\r\n  useEffect(() => {\r\n    if (isWindowFocused && unreadCount > 0) {\r\n      setUnreadCount(0);\r\n      // Mark messages as read\r\n      messages\r\n        .filter(msg => !msg.read_at && msg.sender_id === receiverId)\r\n        .forEach(msg => {\r\n          socket.emit('message_read', {\r\n            messageId: msg.id,\r\n            userId: localStorage.getItem('userId'),\r\n            senderId: msg.sender_id\r\n          });\r\n        });\r\n    }\r\n  }, [isWindowFocused, messages, unreadCount, receiverId, socket]);\r\n\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const { socket, connected, sendMessage } = useSocket();\r\n  const messagesEndRef = useRef(null);\r\n  const typingTimeoutRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.emit('join_chat', receiverId);\r\n      \r\n      socket.on('receive_message', (data) => {\r\n        setMessages(prev => [...prev, data]);\r\n      });\r\n\r\n      socket.on('user_typing', (userId) => {\r\n        if (userId === receiverId) {\r\n          setIsTyping(true);\r\n          setTimeout(() => setIsTyping(false), 3000);\r\n        }\r\n      });\r\n\r\n      // Load existing messages\r\n      loadMessages();\r\n    }\r\n\r\n    return () => {\r\n      if (socket) {\r\n        socket.off('receive_message');\r\n        socket.off('user_typing');\r\n        socket.emit('leave_chat', receiverId);\r\n      }\r\n    };\r\n  }, [socket, receiverId]);\r\n\r\n  const loadMessages = async () => {\r\n    try {\r\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/messages/${receiverId}`);\r\n      setMessages(response.data);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error loading messages:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleTyping = () => {\r\n    if (socket) {\r\n      socket.emit('typing', receiverId);\r\n    }\r\n\r\n    if (typingTimeoutRef.current) {\r\n      clearTimeout(typingTimeoutRef.current);\r\n    }\r\n\r\n    typingTimeoutRef.current = setTimeout(() => {\r\n      if (socket) {\r\n        socket.emit('stop_typing', receiverId);\r\n      }\r\n    }, 2000);\r\n  };\r\n\r\n  const handleSend = async () => {\r\n    if (newMessage.trim() && socket) {\r\n      try {\r\n        const messageData = {\r\n          receiverId,\r\n          content: newMessage\r\n        };\r\n\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/messages`, messageData);\r\n        \r\n        sendMessage(receiverId, newMessage);\r\n        setMessages(prev => [...prev, response.data]);\r\n        setNewMessage('');\r\n      } catch (error) {\r\n        console.error('Error sending message:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" h=\"100%\">\r\n        <Spinner />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box w=\"100%\" h=\"500px\" borderWidth=\"1px\" borderRadius=\"lg\">\r\n      <Flex p={2} borderBottomWidth=\"1px\" alignItems=\"center\" justify=\"space-between\">\r\n        <Flex align=\"center\">\r\n          <Text fontWeight=\"bold\">{receiverName}</Text>\r\n          <Box ml={2} w={2} h={2} borderRadius=\"full\" bg={receiverStatus === 'online' ? 'green.500' : 'gray.400'} />\r\n        </Flex>\r\n        {unreadCount > 0 && (\r\n          <Badge colorScheme=\"red\" borderRadius=\"full\" px={2}>\r\n            {unreadCount}\r\n          </Badge>\r\n        )}\r\n      </Flex>\r\n      <VStack h=\"100%\" spacing={4}>\r\n        <Box flex=\"1\" w=\"100%\" overflowY=\"auto\" p={4}>\r\n          {messages.map((msg, idx) => (\r\n            <Flex \r\n              key={idx} \r\n              justify={msg.sender_id === parseInt(localStorage.getItem('userId')) ? 'flex-end' : 'flex-start'}\r\n              mb={2}\r\n            >\r\n              <Box\r\n                bg={msg.sender_id === parseInt(localStorage.getItem('userId')) ? 'blue.500' : 'gray.200'}\r\n                color={msg.sender_id === parseInt(localStorage.getItem('userId')) ? 'white' : 'black'}\r\n                borderRadius=\"lg\"\r\n                px={3}\r\n                py={2}\r\n                maxW=\"70%\"\r\n              >\r\n                <Text>{msg.content}</Text>\r\n                <Text fontSize=\"xs\" opacity={0.8}>\r\n                  {new Date(msg.created_at).toLocaleTimeString()}\r\n                </Text>\r\n              </Box>\r\n            </Flex>\r\n          ))}\r\n          {isTyping && (\r\n            <Text fontSize=\"sm\" color=\"gray.500\" ml={2}>\r\n              {receiverName} is typing...\r\n            </Text>\r\n          )}\r\n        </Box>\r\n        <Flex p={4} w=\"100%\">\r\n          <Input\r\n            value={newMessage}\r\n            onChange={(e) => {\r\n              setNewMessage(e.target.value);\r\n              handleTyping();\r\n            }}\r\n            placeholder=\"Type a message...\"\r\n            mr={2}\r\n            onKeyPress={(e) => e.key === 'Enter' && handleSend()}\r\n          />\r\n          <Button onClick={handleSend} colorScheme=\"blue\">\r\n            Send\r\n          </Button>\r\n        </Flex>\r\n      </VStack>\r\n    </Box>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { getWindow } from '@zag-js/dom-query';\n\n// src/cache.ts\nfunction i18nCache(Ins) {\n  const formatterCache = /* @__PURE__ */new Map();\n  return function create(locale, options) {\n    const cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : \"\");\n    if (formatterCache.has(cacheKey)) {\n      return formatterCache.get(cacheKey);\n    }\n    let formatter = new Ins(locale, options);\n    formatterCache.set(cacheKey, formatter);\n    return formatter;\n  };\n}\n\n// src/filter.ts\nvar collatorCache = i18nCache(Intl.Collator);\nfunction filter(options) {\n  const {\n    locale,\n    ...rest\n  } = options || {};\n  const collator = collatorCache(locale || \"en-US\", {\n    usage: \"search\",\n    ...rest\n  });\n  function normalize(string) {\n    string = string.normalize(\"NFC\");\n    if (collator.resolvedOptions().ignorePunctuation) {\n      string = string.replace(/\\p{P}/gu, \"\");\n    }\n    return string;\n  }\n  function startsWith(string, substring) {\n    if (substring.length === 0) return true;\n    string = normalize(string);\n    substring = normalize(substring);\n    return collator.compare(string.slice(0, substring.length), substring) === 0;\n  }\n  function endsWith(string, substring) {\n    if (substring.length === 0) return true;\n    string = normalize(string);\n    substring = normalize(substring);\n    return collator.compare(string.slice(-substring.length), substring) === 0;\n  }\n  function contains(string, substring) {\n    if (substring.length === 0) return true;\n    string = normalize(string);\n    substring = normalize(substring);\n    let scan = 0;\n    let sliceLen = substring.length;\n    for (; scan + sliceLen <= string.length; scan++) {\n      let slice = string.slice(scan, scan + sliceLen);\n      if (collator.compare(substring, slice) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n  return {\n    startsWith,\n    endsWith,\n    contains\n  };\n}\n\n// src/format-number.ts\nvar getNumberFormatter = i18nCache(Intl.NumberFormat);\nfunction formatNumber(v, locale, options = {}) {\n  const formatter = getNumberFormatter(locale, options);\n  return formatter.format(v);\n}\n\n// src/format-bytes.ts\nvar bitPrefixes = [\"\", \"kilo\", \"mega\", \"giga\", \"tera\"];\nvar bytePrefixes = [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\"];\nvar formatBytes = (bytes, locale = \"en-US\", options = {}) => {\n  if (isNaN(bytes)) return \"\";\n  if (bytes === 0) return \"0 B\";\n  const {\n    unit = \"byte\",\n    unitDisplay = \"short\"\n  } = options;\n  const prefix = unit === \"bit\" ? bitPrefixes : bytePrefixes;\n  const index = Math.max(0, Math.min(Math.floor(Math.log10(bytes) / 3), prefix.length - 1));\n  const _unit = prefix[index] + unit;\n  const _unitDisplay = unitDisplay || \"short\";\n  const v = parseFloat((bytes / Math.pow(1e3, index)).toPrecision(3));\n  return formatNumber(v, locale, {\n    style: \"unit\",\n    unit: _unit,\n    unitDisplay: _unitDisplay\n  });\n};\n\n// src/format-date.ts\nvar symbols = \"\\\\s|\\\\.|-|/|\\\\\\\\|,|\\\\$|\\\\!|\\\\?|:|;\";\nfunction createRegEx(sign) {\n  return new RegExp(\"(^|>|\" + symbols + \")(\" + sign + \")($|<|\" + symbols + \")\", \"g\");\n}\nvar FORMATS = [\"G\", \"GG\", \"GGG\", \"GGGG\", \"GGGGG\", \"y\", \"yo\", \"yy\", \"yyy\", \"yyyy\", \"Y\", \"Yo\", \"YY\", \"YYY\", \"YYYY\", \"Q\", \"Qo\", \"QQ\", \"QQQ\", \"QQQQ\", \"QQQQQ\", \"M\", \"Mo\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"E\", \"EE\", \"EEE\", \"EEEE\", \"EEEEE\", \"EEEEEE\", \"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"d\", \"do\", \"dd\", \"D\", \"Do\", \"DD\", \"DDD\", \"w\", \"wo\", \"ww\", \"s\", \"so\", \"ss\", \"m\", \"mo\", \"mm\", \"h\", \"ho\", \"hh\", \"H\", \"Ho\", \"HH\", \"z\", \"zz\", \"zzz\", \"zzzz\", \"T\"];\nfunction ordinal(num) {\n  const n = typeof num === \"string\" ? parseFloat(num) : num;\n  let suffix = \"th\";\n  if (n % 10 === 1 && n % 100 !== 11) {\n    suffix = \"st\";\n  } else if (n % 10 === 2 && n % 100 !== 12) {\n    suffix = \"nd\";\n  } else if (n % 10 === 3 && n % 100 !== 13) {\n    suffix = \"rd\";\n  }\n  return `${n}${suffix}`;\n}\nfunction pad(num, length) {\n  return String(num).padStart(length, \"0\");\n}\nfunction zone(str) {\n  return str.split(/AM|PM/)[1].trim();\n}\nfunction getFormat(date, options) {\n  const {\n    locale,\n    format,\n    timeZone\n  } = options;\n  switch (format) {\n    // era\n    case \"G\":\n    case \"GG\":\n    case \"GGG\":\n      return date.toLocaleString(locale, {\n        era: \"short\"\n      });\n    case \"GGGG\":\n      return date.toLocaleString(locale, {\n        era: \"long\"\n      });\n    case \"GGGGG\":\n      return date.toLocaleString(locale, {\n        era: \"narrow\"\n      });\n    // year\n    case \"y\":\n    case \"Y\":\n      return date.getFullYear();\n    case \"yo\":\n    case \"Yo\":\n      return ordinal(date.toLocaleString(locale, {\n        year: \"numeric\"\n      }));\n    case \"yy\":\n    case \"YY\":\n      return date.toLocaleString(locale, {\n        year: \"2-digit\"\n      });\n    case \"yyy\":\n    case \"YYY\":\n      return date.toLocaleString(locale, {\n        year: \"numeric\"\n      }).padStart(3, \"0\");\n    case \"yyyy\":\n    case \"YYYY\":\n      return date.toLocaleString(locale, {\n        year: \"numeric\"\n      }).padStart(4, \"0\");\n    // quarter\n    case \"Q\":\n    case \"QQQQQ\":\n      return Math.ceil((date.getMonth() + 1) / 3);\n    case \"Qo\":\n      return ordinal(Math.ceil((date.getMonth() + 1) / 3));\n    case \"QQ\":\n      return pad(Math.ceil((date.getMonth() + 1) / 3), 2);\n    case \"QQQ\":\n      return `Q${Math.ceil((date.getMonth() + 1) / 3)}`;\n    case \"QQQQ\":\n      {\n        const base = ordinal(String(Math.ceil((date.getMonth() + 1) / 3)));\n        return `${base} quarter`;\n      }\n    // month\n    case \"M\":\n      return date.getMonth() + 1;\n    case \"Mo\":\n      return ordinal(date.getMonth() + 1);\n    case \"MM\":\n      return date.toLocaleString(locale, {\n        month: \"2-digit\"\n      });\n    case \"MMM\":\n      return date.toLocaleString(locale, {\n        month: \"short\"\n      });\n    case \"MMMM\":\n      return date.toLocaleString(locale, {\n        month: \"long\"\n      });\n    case \"MMMMM\":\n      return date.toLocaleString(locale, {\n        month: \"narrow\"\n      });\n    // week\n    case \"w\":\n      return Math.ceil(date.getDate() / 7);\n    case \"wo\":\n      return ordinal(Math.ceil(date.getDate() / 7));\n    case \"ww\":\n      return pad(Math.ceil(date.getDate() / 7), 2);\n    // day\n    case \"d\":\n    case \"D\":\n      return date.getDate();\n    case \"do\":\n    case \"Do\":\n      return ordinal(date.getDate());\n    case \"dd\":\n    case \"DD\":\n      return date.toLocaleString(locale, {\n        day: \"2-digit\"\n      });\n    case \"DDD\":\n      return pad(date.getDate(), 3);\n    // weekday\n    case \"E\":\n    case \"EE\":\n    case \"EEE\":\n      return date.toLocaleString(locale, {\n        weekday: \"short\"\n      });\n    case \"EEEE\":\n      return date.toLocaleString(locale, {\n        weekday: \"long\"\n      });\n    case \"EEEEE\":\n      return date.toLocaleString(locale, {\n        weekday: \"narrow\"\n      });\n    case \"EEEEEE\":\n      return date.toLocaleString(locale, {\n        weekday: \"short\"\n      }).slice(0, 2);\n    // hour\n    case \"h\":\n      return date.toLocaleString(locale, {\n        hour: \"numeric\",\n        hour12: true\n      });\n    case \"ho\":\n      return ordinal(date.toLocaleString(locale, {\n        hour: \"2-digit\",\n        hour12: true\n      }));\n    case \"hh\":\n      return date.toLocaleString(locale, {\n        hour: \"2-digit\",\n        hour12: true\n      });\n    case \"H\":\n      return date.toLocaleString(locale, {\n        hour: \"numeric\",\n        hour12: false\n      });\n    case \"Ho\":\n      return ordinal(+date.toLocaleString(locale, {\n        hour: \"numeric\",\n        hour12: false\n      }));\n    case \"HH\":\n      return date.toLocaleString(locale, {\n        hour: \"2-digit\",\n        hour12: false\n      });\n    // minute\n    case \"m\":\n      return date.toLocaleString(locale, {\n        minute: \"numeric\"\n      });\n    case \"mo\":\n      return ordinal(date.toLocaleString(locale, {\n        minute: \"numeric\"\n      }));\n    case \"mm\":\n      return date.toLocaleString(locale, {\n        minute: \"2-digit\"\n      });\n    // second\n    case \"s\":\n      return date.toLocaleString(locale, {\n        second: \"numeric\"\n      });\n    case \"so\":\n      return ordinal(date.toLocaleString(locale, {\n        second: \"numeric\"\n      }));\n    case \"ss\":\n      return date.toLocaleString(locale, {\n        second: \"2-digit\"\n      });\n    // timestamp\n    case \"T\":\n      return date.getTime();\n    // day period\n    case \"a\":\n    case \"aa\":\n    case \"aaa\":\n      return date.toLocaleString(locale, {\n        hour: \"numeric\",\n        hour12: true\n      }).toLocaleUpperCase();\n    case \"aaaa\":\n      return date.toLocaleString(locale, {\n        hour: \"numeric\",\n        hour12: true\n      }).toLocaleLowerCase();\n    case \"aaaaa\":\n      return date.toLocaleString(locale, {\n        hour: \"numeric\",\n        hour12: true\n      }).charAt(0);\n    // TODO:Revise this\n    case \"z\":\n    case \"zz\":\n    case \"zzz\":\n      {\n        return zone(date.toLocaleString(locale, {\n          timeZone,\n          timeZoneName: \"shortOffset\"\n        }));\n      }\n    case \"zzzz\":\n      return zone(date.toLocaleString(locale, {\n        timeZone,\n        timeZoneName: \"longOffset\"\n      }));\n    default:\n      throw new Error(`Unknown format: ${format}`);\n  }\n}\nfunction formatDate(date, format, locale, timeZone) {\n  let result = format;\n  for (const key of FORMATS) {\n    const res = getFormat(date, {\n      locale,\n      format: key,\n      timeZone\n    });\n    result = result.replace(createRegEx(key), \"$1\" + res + \"$3\");\n  }\n  return result;\n}\n\n// src/format-list.ts\nvar getListFormatter = i18nCache(Intl.ListFormat);\nfunction formatList(list, locale, options = {}) {\n  const formatter = getListFormatter(locale, options);\n  return formatter.format(list);\n}\n\n// src/format-relative-time.ts\nvar getRelativeTimeFormatter = i18nCache(Intl.RelativeTimeFormat);\nfunction formatRelativeTime(value, locale, options = {}) {\n  const rtf = getRelativeTimeFormatter(locale, options);\n  const now = /* @__PURE__ */new Date();\n  const diff = getDistance(now, value);\n  if (diff.years > 0) return rtf.format(diff.years * diff.sign, \"year\");\n  if (diff.months > 0) return rtf.format(diff.months * diff.sign, \"month\");\n  if (diff.weeks > 0) return rtf.format(diff.weeks * diff.sign, \"week\");\n  if (diff.days > 0) return rtf.format(diff.days * diff.sign, \"day\");\n  if (diff.hours > 0) return rtf.format(diff.hours * diff.sign, \"hour\");\n  if (diff.minutes > 0) return rtf.format(diff.minutes * diff.sign, \"minute\");\n  return rtf.format(diff.seconds * diff.sign, \"second\");\n}\nvar SECOND_TO_MS = 1e3;\nvar MINUTE_TO_MS = 1e3 * 60;\nvar HOUR_TO_MS = 1e3 * 60 * 60;\nvar DAY_TO_MS = 1e3 * 60 * 60 * 24;\nvar WEEK_TO_MS = 1e3 * 60 * 60 * 24 * 7;\nvar MONTH_TO_MS = 1e3 * 60 * 60 * 24 * 30;\nvar YEAR_TO_MS = 1e3 * 60 * 60 * 24 * 365;\nfunction getDistance(startDate, endDate) {\n  const endTime = endDate.getTime();\n  const startTime = startDate.getTime();\n  const distance = Math.abs(endTime - startTime);\n  return {\n    sign: Math.sign(endTime - startTime),\n    days: Math.floor(distance / DAY_TO_MS),\n    hours: Math.floor(distance % DAY_TO_MS / HOUR_TO_MS),\n    minutes: Math.floor(distance % HOUR_TO_MS / MINUTE_TO_MS),\n    seconds: Math.floor(distance % MINUTE_TO_MS / SECOND_TO_MS),\n    weeks: Math.floor(distance / WEEK_TO_MS),\n    months: Math.floor(distance / MONTH_TO_MS),\n    years: Math.floor(distance / YEAR_TO_MS)\n  };\n}\n\n// src/is-rtl.ts\nvar RTL_SCRIPTS = /* @__PURE__ */new Set([\"Avst\", \"Arab\", \"Armi\", \"Syrc\", \"Samr\", \"Mand\", \"Thaa\", \"Mend\", \"Nkoo\", \"Adlm\", \"Rohg\", \"Hebr\"]);\nvar RTL_LANGS = /* @__PURE__ */new Set([\"ae\", \"ar\", \"arc\", \"bcc\", \"bqi\", \"ckb\", \"dv\", \"fa\", \"glk\", \"he\", \"ku\", \"mzn\", \"nqo\", \"pnb\", \"ps\", \"sd\", \"ug\", \"ur\", \"yi\"]);\nfunction isRTL(locale) {\n  if (Intl.Locale) {\n    const script = new Intl.Locale(locale).maximize().script ?? \"\";\n    return RTL_SCRIPTS.has(script);\n  }\n  const lang = locale.split(\"-\")[0];\n  return RTL_LANGS.has(lang);\n}\nfunction getLocaleDir(locale) {\n  return isRTL(locale) ? \"rtl\" : \"ltr\";\n}\n\n// src/locale.ts\nfunction getDefaultLocale() {\n  let locale = typeof navigator !== \"undefined\" && (navigator.language || navigator.userLanguage) || \"en-US\";\n  return {\n    locale,\n    dir: isRTL(locale) ? \"rtl\" : \"ltr\"\n  };\n}\nfunction trackLocale(options = {}) {\n  const {\n    getRootNode,\n    onLocaleChange\n  } = options;\n  onLocaleChange?.(getDefaultLocale());\n  const handleLocaleChange = () => {\n    onLocaleChange?.(getDefaultLocale());\n  };\n  const win = getRootNode ? getWindow(getRootNode()) : window;\n  win.addEventListener(\"languagechange\", handleLocaleChange);\n  return () => {\n    win.removeEventListener(\"languagechange\", handleLocaleChange);\n  };\n}\nexport { filter, formatBytes, formatDate, formatList, formatNumber, formatRelativeTime, getDefaultLocale, getLocaleDir, isRTL, trackLocale };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { createContext } from '@chakra-ui/utils';\nimport { AnimatePresence } from 'framer-motion';\nimport { useModal } from './use-modal.mjs';\nimport { Portal } from '../portal/portal.mjs';\nimport { useMultiStyleConfig } from '../system/use-style-config.mjs';\nconst [ModalStylesProvider, useModalStyles] = createContext({\n  name: `ModalStylesContext`,\n  errorMessage: `useModalStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Modal />\" `\n});\nconst [ModalContextProvider, useModalContext] = createContext({\n  strict: true,\n  name: \"ModalContext\",\n  errorMessage: \"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`\"\n});\nconst Modal = props => {\n  const modalProps = {\n    scrollBehavior: \"outside\",\n    autoFocus: true,\n    trapFocus: true,\n    returnFocusOnClose: true,\n    blockScrollOnMount: true,\n    allowPinchZoom: false,\n    preserveScrollBarGap: true,\n    motionPreset: \"scale\",\n    ...props,\n    lockFocusAcrossFrames: props.lockFocusAcrossFrames || true\n  };\n  const {\n    portalProps,\n    children,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames,\n    animatePresenceProps,\n    onCloseComplete\n  } = modalProps;\n  const styles = useMultiStyleConfig(\"Modal\", modalProps);\n  const modal = useModal(modalProps);\n  const context = {\n    ...modal,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames\n  };\n  return /* @__PURE__ */jsx(ModalContextProvider, {\n    value: context,\n    children: /* @__PURE__ */jsx(ModalStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */jsx(AnimatePresence, {\n        ...animatePresenceProps,\n        onExitComplete: onCloseComplete,\n        children: context.isOpen && /* @__PURE__ */jsx(Portal, {\n          ...portalProps,\n          children\n        })\n      })\n    })\n  });\n};\nModal.displayName = \"Modal\";\nexport { Modal, ModalContextProvider, useModalContext, useModalStyles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope, getWindow, dataAttr } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport { createSplitProps, compact } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/clipboard.anatomy.ts\nvar anatomy = createAnatomy(\"clipboard\").parts(\"root\", \"control\", \"trigger\", \"indicator\", \"input\", \"label\");\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `clip:${ctx.id}`,\n  getInputId: ctx => ctx.ids?.input ?? `clip:${ctx.id}:input`,\n  getLabelId: ctx => ctx.ids?.label ?? `clip:${ctx.id}:label`,\n  getInputEl: ctx => dom.getById(ctx, dom.getInputId(ctx)),\n  writeToClipboard: ctx => copyText(dom.getDoc(ctx), ctx.value)\n});\nfunction createNode(doc, text) {\n  const node = doc.createElement(\"pre\");\n  Object.assign(node.style, {\n    width: \"1px\",\n    height: \"1px\",\n    position: \"fixed\",\n    top: \"5px\"\n  });\n  node.textContent = text;\n  return node;\n}\nfunction copyNode(node) {\n  const win = getWindow(node);\n  const selection = win.getSelection();\n  if (selection == null) {\n    return Promise.reject(new Error());\n  }\n  selection.removeAllRanges();\n  const doc = node.ownerDocument;\n  const range = doc.createRange();\n  range.selectNodeContents(node);\n  selection.addRange(range);\n  doc.execCommand(\"copy\");\n  selection.removeAllRanges();\n  return Promise.resolve();\n}\nfunction copyText(doc, text) {\n  const win = doc.defaultView || window;\n  if (win.navigator.clipboard?.writeText !== void 0) {\n    return win.navigator.clipboard.writeText(text);\n  }\n  if (!doc.body) {\n    return Promise.reject(new Error());\n  }\n  const node = createNode(doc, text);\n  doc.body.appendChild(node);\n  copyNode(node);\n  doc.body.removeChild(node);\n  return Promise.resolve();\n}\n\n// src/clipboard.connect.ts\nfunction connect(state, send, normalize) {\n  const copied = state.matches(\"copied\");\n  return {\n    copied,\n    value: state.context.value,\n    setValue(value) {\n      send({\n        type: \"VALUE.SET\",\n        value\n      });\n    },\n    copy() {\n      send({\n        type: \"COPY\"\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        \"data-copied\": dataAttr(copied),\n        id: dom.getRootId(state.context)\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        htmlFor: dom.getInputId(state.context),\n        \"data-copied\": dataAttr(copied),\n        id: dom.getLabelId(state.context)\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        \"data-copied\": dataAttr(copied)\n      });\n    },\n    getInputProps() {\n      return normalize.input({\n        ...parts.input.attrs,\n        defaultValue: state.context.value,\n        \"data-copied\": dataAttr(copied),\n        readOnly: true,\n        \"data-readonly\": \"true\",\n        id: dom.getInputId(state.context),\n        onFocus(event) {\n          event.currentTarget.select();\n        },\n        onCopy() {\n          send({\n            type: \"INPUT.COPY\"\n          });\n        }\n      });\n    },\n    getTriggerProps() {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        type: \"button\",\n        \"aria-label\": copied ? \"Copied to clipboard\" : \"Copy to clipboard\",\n        \"data-copied\": dataAttr(copied),\n        onClick() {\n          send({\n            type: \"COPY\"\n          });\n        }\n      });\n    },\n    getIndicatorProps(props2) {\n      return normalize.element({\n        ...parts.indicator.attrs,\n        hidden: props2.copied !== copied\n      });\n    }\n  };\n}\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"clipboard\",\n    initial: \"idle\",\n    context: {\n      value: \"\",\n      timeout: 3e3,\n      ...ctx\n    },\n    watch: {\n      value: [\"syncInputElement\"]\n    },\n    on: {\n      \"VALUE.SET\": {\n        actions: [\"setValue\"]\n      },\n      COPY: {\n        target: \"copied\",\n        actions: [\"copyToClipboard\", \"invokeOnCopy\"]\n      }\n    },\n    states: {\n      idle: {\n        on: {\n          \"INPUT.COPY\": {\n            target: \"copied\",\n            actions: [\"invokeOnCopy\"]\n          }\n        }\n      },\n      copied: {\n        after: {\n          COPY_TIMEOUT: \"idle\"\n        },\n        on: {\n          COPY: {\n            target: \"copied\",\n            actions: [\"copyToClipboard\", \"invokeOnCopy\"]\n          },\n          \"INPUT.COPY\": {\n            actions: [\"invokeOnCopy\"]\n          }\n        }\n      }\n    }\n  }, {\n    actions: {\n      setValue(ctx2, evt) {\n        ctx2.value = evt.value;\n      },\n      copyToClipboard(ctx2) {\n        dom.writeToClipboard(ctx2);\n      },\n      invokeOnCopy(ctx2) {\n        ctx2.onStatusChange?.({\n          copied: true\n        });\n      },\n      syncInputElement(ctx2) {\n        dom.setValue(dom.getInputEl(ctx2), ctx2.value);\n      }\n    },\n    delays: {\n      COPY_TIMEOUT: ctx2 => ctx2.timeout\n    }\n  });\n}\nvar props = createProps()([\"getRootNode\", \"id\", \"ids\", \"value\", \"timeout\", \"onStatusChange\"]);\nvar contextProps = createSplitProps(props);\nvar indicatorProps = createProps()([\"copied\"]);\nvar splitIndicatorProps = createSplitProps(indicatorProps);\nexport { anatomy, connect, contextProps, indicatorProps, machine, props, splitIndicatorProps };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
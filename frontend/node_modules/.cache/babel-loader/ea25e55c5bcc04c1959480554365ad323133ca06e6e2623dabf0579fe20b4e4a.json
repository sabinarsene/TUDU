{"ast":null,"code":"// Request API for handling request-related API calls\nconst API_URL = 'http://localhost:5000/api';\n\n// Log the API URL for debugging\nconsole.log('Request API URL:', API_URL);\n\n/**\r\n * Fetch all requests from the API\r\n * @returns {Promise<Array>} Array of requests\r\n */\nexport const fetchRequests = async () => {\n  try {\n    const fullUrl = `${API_URL}/requests`;\n    console.log('Fetching requests from:', fullUrl);\n    const response = await fetch(fullUrl);\n\n    // Încearcă să obții răspunsul JSON, chiar dacă statusul nu este ok\n    let responseData;\n    try {\n      responseData = await response.json();\n    } catch (jsonError) {\n      console.error('Error parsing JSON response:', jsonError);\n      return [];\n    }\n    if (!response.ok) {\n      console.error('Server returned error:', responseData);\n      return [];\n    }\n\n    // Ne asigurăm că returnăm întotdeauna un array\n    if (Array.isArray(responseData)) {\n      return responseData;\n    } else if (responseData && responseData.requests) {\n      return responseData.requests;\n    } else {\n      console.error('Unexpected response format:', responseData);\n      return [];\n    }\n  } catch (error) {\n    console.error('Error fetching requests:', error);\n    return [];\n  }\n};\n\n/**\r\n * Fetch a single request by ID\r\n * @param {number} id - Request ID\r\n * @returns {Promise<Object>} Request object\r\n */\nexport const fetchRequestById = async id => {\n  try {\n    const response = await fetch(`${API_URL}/requests/${id}`);\n    if (!response.ok) {\n      throw new Error(`Error fetching request: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error fetching request with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Create a new request\r\n * @param {FormData} requestData - Request data as FormData (for file uploads)\r\n * @param {string} token - Authentication token\r\n * @returns {Promise<Object>} Created request\r\n */\nexport const createRequest = async (requestData, token) => {\n  try {\n    // Verificăm că avem token\n    if (!token) {\n      throw new Error('Nu ești autentificat');\n    }\n    console.log('Sending request to server with data:', {\n      title: requestData.get('title'),\n      category: requestData.get('category'),\n      description: requestData.get('description'),\n      location: requestData.get('location'),\n      budget: requestData.get('budget'),\n      deadline: requestData.get('deadline'),\n      image: requestData.get('image')\n    });\n\n    // Facem request-ul către server\n    const response = await fetch(`${API_URL}/requests`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      body: requestData // Send FormData directly\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Error creating request');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in createRequest:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Update an existing request\r\n * @param {number} id - Request ID\r\n * @param {Object} requestData - Updated request data\r\n * @param {string} token - Authentication token\r\n * @returns {Promise<Object>} Updated request\r\n */\nexport const updateRequest = async (id, requestData, token) => {\n  try {\n    // Verificăm dacă requestData este FormData sau obiect normal\n    const isFormData = requestData instanceof FormData;\n    const headers = {\n      'Authorization': `Bearer ${token}`\n    };\n\n    // Adăugăm Content-Type doar dacă nu este FormData\n    if (!isFormData) {\n      headers['Content-Type'] = 'application/json';\n    }\n    const response = await fetch(`${API_URL}/requests/${id}`, {\n      method: 'PUT',\n      headers: headers,\n      body: isFormData ? requestData : JSON.stringify(requestData)\n    });\n    if (!response.ok) {\n      throw new Error(`Error updating request: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error updating request with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Delete a request\r\n * @param {number} id - Request ID\r\n * @param {string} token - Authentication token\r\n * @returns {Promise<Object>} Response message\r\n */\nexport const deleteRequest = async (id, token) => {\n  try {\n    const response = await fetch(`${API_URL}/requests/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error deleting request: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error deleting request with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Fetch requests for a specific user\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Array>} Array of requests\r\n */\nexport const fetchUserRequests = async userId => {\n  try {\n    // Încercăm să facem apelul API\n    try {\n      const response = await fetch(`${API_URL}/requests/user/${userId}`);\n      if (!response.ok) {\n        // Dacă primim 404, returnăm date mock\n        if (response.status === 404) {\n          console.log(`Endpoint /requests/user/${userId} nu este disponibil, returnăm date mock`);\n          return getMockUserRequests(userId);\n        }\n        throw new Error(`Error fetching user requests: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      // Dacă primim orice eroare, returnăm date mock\n      console.error(`Error fetching requests for user ${userId}:`, error);\n      return getMockUserRequests(userId);\n    }\n  } catch (error) {\n    console.error(`Error fetching requests for user ${userId}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Generează date mock pentru cererile unui utilizator\r\n * @param {string} userId - ID-ul utilizatorului\r\n * @returns {Array} Array de cereri mock\r\n */\nconst getMockUserRequests = userId => {\n  // Generăm un număr aleatoriu de cereri între 0 și 3\n  const numRequests = Math.floor(Math.random() * 4);\n  const requests = [];\n  const categories = ['Instalații', 'Curățenie', 'Transport', 'Reparații', 'IT', 'Design', 'Educație'];\n  const locations = ['București', 'Cluj-Napoca', 'Timișoara', 'Iași', 'Brașov', 'Constanța'];\n  const deadlines = ['Urgent', '1-3 zile', 'O săptămână', '2 săptămâni', 'O lună'];\n\n  // Generăm cereri aleatorii\n  for (let i = 0; i < numRequests; i++) {\n    const request = {\n      id: `mock-request-${i}`,\n      title: `Cerere Mock ${i + 1}`,\n      description: `Aceasta este o descriere mock pentru cererea ${i + 1} a utilizatorului cu ID-ul ${userId}.`,\n      category: categories[Math.floor(Math.random() * categories.length)],\n      location: locations[Math.floor(Math.random() * locations.length)],\n      budget: Math.floor(Math.random() * 1000) + 100,\n      currency: 'RON',\n      deadline: deadlines[Math.floor(Math.random() * deadlines.length)],\n      images: [],\n      user: {\n        id: userId,\n        name: `Utilizator ${userId}`,\n        image: null\n      }\n    };\n    requests.push(request);\n  }\n  return requests;\n};","map":{"version":3,"names":["API_URL","console","log","fetchRequests","fullUrl","response","fetch","responseData","json","jsonError","error","ok","Array","isArray","requests","fetchRequestById","id","Error","statusText","createRequest","requestData","token","title","get","category","description","location","budget","deadline","image","method","headers","body","errorData","message","updateRequest","isFormData","FormData","JSON","stringify","deleteRequest","fetchUserRequests","userId","status","getMockUserRequests","numRequests","Math","floor","random","categories","locations","deadlines","i","request","length","currency","images","user","name","push"],"sources":["C:/Users/sabin.arsene/Desktop/Tudu-app/TUDU/frontend/src/services/requestApi.js"],"sourcesContent":["// Request API for handling request-related API calls\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Log the API URL for debugging\r\nconsole.log('Request API URL:', API_URL);\r\n\r\n/**\r\n * Fetch all requests from the API\r\n * @returns {Promise<Array>} Array of requests\r\n */\r\nexport const fetchRequests = async () => {\r\n  try {\r\n    const fullUrl = `${API_URL}/requests`;\r\n    console.log('Fetching requests from:', fullUrl);\r\n    \r\n    const response = await fetch(fullUrl);\r\n    \r\n    // Încearcă să obții răspunsul JSON, chiar dacă statusul nu este ok\r\n    let responseData;\r\n    try {\r\n      responseData = await response.json();\r\n    } catch (jsonError) {\r\n      console.error('Error parsing JSON response:', jsonError);\r\n      return [];\r\n    }\r\n    \r\n    if (!response.ok) {\r\n      console.error('Server returned error:', responseData);\r\n      return [];\r\n    }\r\n    \r\n    // Ne asigurăm că returnăm întotdeauna un array\r\n    if (Array.isArray(responseData)) {\r\n      return responseData;\r\n    } else if (responseData && responseData.requests) {\r\n      return responseData.requests;\r\n    } else {\r\n      console.error('Unexpected response format:', responseData);\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching requests:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch a single request by ID\r\n * @param {number} id - Request ID\r\n * @returns {Promise<Object>} Request object\r\n */\r\nexport const fetchRequestById = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/requests/${id}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Error fetching request: ${response.statusText}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error fetching request with ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Create a new request\r\n * @param {FormData} requestData - Request data as FormData (for file uploads)\r\n * @param {string} token - Authentication token\r\n * @returns {Promise<Object>} Created request\r\n */\r\nexport const createRequest = async (requestData, token) => {\r\n  try {\r\n    // Verificăm că avem token\r\n    if (!token) {\r\n      throw new Error('Nu ești autentificat');\r\n    }\r\n\r\n    console.log('Sending request to server with data:', {\r\n      title: requestData.get('title'),\r\n      category: requestData.get('category'),\r\n      description: requestData.get('description'),\r\n      location: requestData.get('location'),\r\n      budget: requestData.get('budget'),\r\n      deadline: requestData.get('deadline'),\r\n      image: requestData.get('image')\r\n    });\r\n\r\n    // Facem request-ul către server\r\n    const response = await fetch(`${API_URL}/requests`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: requestData // Send FormData directly\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Error creating request');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in createRequest:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Update an existing request\r\n * @param {number} id - Request ID\r\n * @param {Object} requestData - Updated request data\r\n * @param {string} token - Authentication token\r\n * @returns {Promise<Object>} Updated request\r\n */\r\nexport const updateRequest = async (id, requestData, token) => {\r\n  try {\r\n    // Verificăm dacă requestData este FormData sau obiect normal\r\n    const isFormData = requestData instanceof FormData;\r\n    \r\n    const headers = {\r\n      'Authorization': `Bearer ${token}`\r\n    };\r\n    \r\n    // Adăugăm Content-Type doar dacă nu este FormData\r\n    if (!isFormData) {\r\n      headers['Content-Type'] = 'application/json';\r\n    }\r\n    \r\n    const response = await fetch(`${API_URL}/requests/${id}`, {\r\n      method: 'PUT',\r\n      headers: headers,\r\n      body: isFormData ? requestData : JSON.stringify(requestData)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Error updating request: ${response.statusText}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error updating request with ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Delete a request\r\n * @param {number} id - Request ID\r\n * @param {string} token - Authentication token\r\n * @returns {Promise<Object>} Response message\r\n */\r\nexport const deleteRequest = async (id, token) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/requests/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Error deleting request: ${response.statusText}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error deleting request with ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch requests for a specific user\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Array>} Array of requests\r\n */\r\nexport const fetchUserRequests = async (userId) => {\r\n  try {\r\n    // Încercăm să facem apelul API\r\n    try {\r\n      const response = await fetch(`${API_URL}/requests/user/${userId}`);\r\n      \r\n      if (!response.ok) {\r\n        // Dacă primim 404, returnăm date mock\r\n        if (response.status === 404) {\r\n          console.log(`Endpoint /requests/user/${userId} nu este disponibil, returnăm date mock`);\r\n          return getMockUserRequests(userId);\r\n        }\r\n        throw new Error(`Error fetching user requests: ${response.statusText}`);\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      // Dacă primim orice eroare, returnăm date mock\r\n      console.error(`Error fetching requests for user ${userId}:`, error);\r\n      return getMockUserRequests(userId);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching requests for user ${userId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Generează date mock pentru cererile unui utilizator\r\n * @param {string} userId - ID-ul utilizatorului\r\n * @returns {Array} Array de cereri mock\r\n */\r\nconst getMockUserRequests = (userId) => {\r\n  // Generăm un număr aleatoriu de cereri între 0 și 3\r\n  const numRequests = Math.floor(Math.random() * 4);\r\n  const requests = [];\r\n  \r\n  const categories = ['Instalații', 'Curățenie', 'Transport', 'Reparații', 'IT', 'Design', 'Educație'];\r\n  const locations = ['București', 'Cluj-Napoca', 'Timișoara', 'Iași', 'Brașov', 'Constanța'];\r\n  const deadlines = ['Urgent', '1-3 zile', 'O săptămână', '2 săptămâni', 'O lună'];\r\n  \r\n  // Generăm cereri aleatorii\r\n  for (let i = 0; i < numRequests; i++) {\r\n    const request = {\r\n      id: `mock-request-${i}`,\r\n      title: `Cerere Mock ${i + 1}`,\r\n      description: `Aceasta este o descriere mock pentru cererea ${i + 1} a utilizatorului cu ID-ul ${userId}.`,\r\n      category: categories[Math.floor(Math.random() * categories.length)],\r\n      location: locations[Math.floor(Math.random() * locations.length)],\r\n      budget: Math.floor(Math.random() * 1000) + 100,\r\n      currency: 'RON',\r\n      deadline: deadlines[Math.floor(Math.random() * deadlines.length)],\r\n      images: [],\r\n      user: {\r\n        id: userId,\r\n        name: `Utilizator ${userId}`,\r\n        image: null\r\n      }\r\n    };\r\n    requests.push(request);\r\n  }\r\n  \r\n  return requests;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
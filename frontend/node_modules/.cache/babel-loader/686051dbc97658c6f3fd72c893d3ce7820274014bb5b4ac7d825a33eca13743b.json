{"ast":null,"code":"export { mergeProps } from '@zag-js/core';\nimport { createNormalizer } from '@zag-js/types';\nimport { Children, useRef, useSyncExternalStore, useCallback, useMemo, useEffect, useLayoutEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { globalRef, subscribe, snapshot } from '@zag-js/store';\nimport { isChanged, createProxy } from 'proxy-compare';\nvar normalizeProps = createNormalizer(v => v);\nvar Portal = props => {\n  const {\n    children,\n    container,\n    disabled,\n    getRootNode\n  } = props;\n  const isServer = typeof window === \"undefined\";\n  if (isServer || disabled) return /* @__PURE__ */jsx(Fragment, {\n    children\n  });\n  const doc = getRootNode?.().ownerDocument ?? document;\n  const mountNode = container?.current ?? doc.body;\n  return /* @__PURE__ */jsx(Fragment, {\n    children: Children.map(children, child => createPortal(child, mountNode))\n  });\n};\n\n// ../../utilities/core/src/equal.ts\nvar isArrayLike = value => value?.constructor.name === \"Array\";\nvar isArrayEqual = (a, b) => {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (!isEqual(a[i], b[i])) return false;\n  }\n  return true;\n};\nvar isEqual = (a, b) => {\n  if (Object.is(a, b)) return true;\n  if (a == null && b != null || a != null && b == null) return false;\n  if (typeof a?.isEqual === \"function\" && typeof b?.isEqual === \"function\") {\n    return a.isEqual(b);\n  }\n  if (typeof a === \"function\" && typeof b === \"function\") {\n    return a.toString() === b.toString();\n  }\n  if (isArrayLike(a) && isArrayLike(b)) {\n    return isArrayEqual(Array.from(a), Array.from(b));\n  }\n  if (!(typeof a === \"object\") || !(typeof b === \"object\")) return false;\n  const keys = Object.keys(b ?? /* @__PURE__ */Object.create(null));\n  const length = keys.length;\n  for (let i = 0; i < length; i++) {\n    const hasKey = Reflect.has(a, keys[i]);\n    if (!hasKey) return false;\n  }\n  for (let i = 0; i < length; i++) {\n    const key = keys[i];\n    if (!isEqual(a[key], b[key])) return false;\n  }\n  return true;\n};\n\n// ../../utilities/core/src/guard.ts\nvar isDev = () => process.env.NODE_ENV !== \"production\";\nvar fnToString = Function.prototype.toString;\nfnToString.call(Object);\n\n// ../../utilities/core/src/object.ts\nfunction compact(obj) {\n  if (!isPlainObject(obj) || obj === void 0) return obj;\n  const keys = Reflect.ownKeys(obj).filter(key => typeof key === \"string\");\n  const filtered = {};\n  for (const key of keys) {\n    const value = obj[key];\n    if (value !== void 0) {\n      filtered[key] = compact(value);\n    }\n  }\n  return filtered;\n}\nvar isPlainObject = v => {\n  return v && typeof v === \"object\" && v.constructor === Object;\n};\nfunction useUpdateEffect(callback, deps) {\n  const render = useRef(false);\n  const effect = useRef(false);\n  useEffect(() => {\n    const mounted = render.current;\n    const run = mounted && effect.current;\n    if (run) {\n      return callback();\n    }\n    effect.current = true;\n  }, deps);\n  useEffect(() => {\n    render.current = true;\n    return () => {\n      render.current = false;\n    };\n  }, []);\n}\n\n// src/use-snapshot.ts\nvar targetCache = globalRef(\"__zag__targetCache\", () => /* @__PURE__ */new WeakMap());\nfunction useSnapshot(service, options) {\n  const {\n    actions,\n    context,\n    sync: notifyInSync\n  } = options ?? {};\n  const lastSnapshot = useRef(void 0);\n  const lastAffected = useRef(void 0);\n  const currSnapshot = useSyncExternalStore(useCallback(callback => subscribe(service.state, callback, notifyInSync), [notifyInSync]), () => {\n    const nextSnapshot = snapshot(service.state);\n    try {\n      if (lastSnapshot.current && lastAffected.current && !isChanged(lastSnapshot.current, nextSnapshot, lastAffected.current, /* @__PURE__ */new WeakMap())) {\n        return lastSnapshot.current;\n      }\n    } catch {}\n    return nextSnapshot;\n  }, () => snapshot(service.state));\n  service.setOptions({\n    actions\n  });\n  const ctx = useMemo(() => compact(context ?? {}), [context]);\n  useUpdateEffect(() => {\n    const entries = Object.entries(ctx);\n    const previousCtx = service.contextSnapshot ?? {};\n    const equality = entries.map(([key, value]) => ({\n      key,\n      curr: value,\n      prev: previousCtx[key],\n      equal: isEqual(previousCtx[key], value)\n    }));\n    const allEqual = equality.every(({\n      equal\n    }) => equal);\n    if (!allEqual) {\n      service.setContext(ctx);\n    }\n  }, [ctx]);\n  const currAffected = /* @__PURE__ */new WeakMap();\n  useEffect(() => {\n    lastSnapshot.current = currSnapshot;\n    lastAffected.current = currAffected;\n  });\n  const proxyCache = useMemo(() => /* @__PURE__ */new WeakMap(), []);\n  return createProxy(currSnapshot, currAffected, proxyCache, targetCache);\n}\n\n// src/use-actor.ts\nfunction useActor(service) {\n  const state = useSnapshot(service);\n  return [state, service.send];\n}\nfunction useConstant(fn) {\n  const ref = useRef(void 0);\n  if (!ref.current) ref.current = {\n    v: fn()\n  };\n  return ref.current.v;\n}\nvar useSafeLayoutEffect = typeof document !== \"undefined\" ? useLayoutEffect : useEffect;\n\n// src/use-service.ts\nfunction useService(machine, options) {\n  const {\n    state: hydratedState,\n    context\n  } = options ?? {};\n  const service = useConstant(() => {\n    const instance = typeof machine === \"function\" ? machine() : machine;\n    if (context) instance.setContext(context);\n    instance._created();\n    return instance;\n  });\n  const snapshotRef = useRef(void 0);\n  useSafeLayoutEffect(() => {\n    const stateInit = hydratedState ?? snapshotRef.current;\n    service.start(stateInit);\n    return () => {\n      if (isDev()) {\n        snapshotRef.current = service.getHydrationState();\n      }\n      service.stop();\n    };\n  }, []);\n  return service;\n}\n\n// src/use-machine.ts\nfunction useMachine(machine, options) {\n  const service = useService(machine, options);\n  const state = useSnapshot(service, options);\n  return [state, service.send, service];\n}\nexport { Portal, normalizeProps, useActor, useMachine };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
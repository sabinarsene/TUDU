{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx } from 'react/jsx-runtime';\nimport { Avatar } from '@ark-ui/react/avatar';\nimport { forwardRef, useMemo } from 'react';\nimport { cx } from '../../utils/cx.js';\nimport { createSlotRecipeContext } from '../../styled-system/create-slot-recipe-context.js';\nimport { chakra } from '../../styled-system/factory.js';\nimport { useSlotRecipe } from '../../styled-system/use-slot-recipe.js';\nimport { Group } from '../group/group.js';\nconst {\n  withProvider,\n  withContext,\n  useStyles: useAvatarStyles,\n  useClassNames,\n  PropsProvider\n} = createSlotRecipeContext({\n  key: \"avatar\"\n});\nconst AvatarRootProvider = withProvider(Avatar.RootProvider, \"root\", {\n  forwardAsChild: true\n});\nconst AvatarRoot = withProvider(Avatar.Root, \"root\", {\n  forwardAsChild: true\n});\nconst AvatarPropsProvider = PropsProvider;\nconst StyledFallback = chakra(Avatar.Fallback, {}, {\n  forwardAsChild: true\n});\nfunction getFallbackChildren(props) {\n  if (props.children || props.asChild) return props.children;\n  if (props.name) return getInitials(props.name);\n  return /* @__PURE__ */jsx(AvatarIcon, {});\n}\nfunction getInitials(name) {\n  const names = name.trim().split(\" \");\n  const firstName = names[0] != null ? names[0] : \"\";\n  const lastName = names.length > 1 ? names[names.length - 1] : \"\";\n  return firstName && lastName ? `${firstName.charAt(0)}${lastName.charAt(0)}` : firstName.charAt(0);\n}\nconst AvatarFallback = forwardRef(function AvatarFallback2(props, ref) {\n  const styles = useAvatarStyles();\n  const classNames = useClassNames();\n  const {\n    name: _,\n    ...rest\n  } = props;\n  return /* @__PURE__ */jsx(StyledFallback, {\n    ref,\n    ...rest,\n    className: cx(props.className, classNames.fallback),\n    css: [styles.fallback, props.css],\n    children: getFallbackChildren(props)\n  });\n});\nconst AvatarImage = withContext(Avatar.Image, \"image\", {\n  forwardAsChild: true,\n  defaultProps: {\n    draggable: \"false\",\n    referrerPolicy: \"no-referrer\"\n  }\n});\nconst AvatarIcon = forwardRef(function AvatarIcon2(props, ref) {\n  return /* @__PURE__ */jsx(chakra.svg, {\n    stroke: \"currentColor\",\n    fill: \"currentColor\",\n    strokeWidth: \"0\",\n    viewBox: \"0 0 24 24\",\n    height: \"1.2em\",\n    width: \"1.2em\",\n    ref,\n    ...props,\n    children: /* @__PURE__ */jsx(\"path\", {\n      d: \"M20 22H18V20C18 18.3431 16.6569 17 15 17H9C7.34315 17 6 18.3431 6 20V22H4V20C4 17.2386 6.23858 15 9 15H15C17.7614 15 20 17.2386 20 20V22ZM12 13C8.68629 13 6 10.3137 6 7C6 3.68629 8.68629 1 12 1C15.3137 1 18 3.68629 18 7C18 10.3137 15.3137 13 12 13ZM12 11C14.2091 11 16 9.20914 16 7C16 4.79086 14.2091 3 12 3C9.79086 3 8 4.79086 8 7C8 9.20914 9.79086 11 12 11Z\"\n    })\n  });\n});\nconst AvatarContext = Avatar.Context;\nconst AvatarGroup = forwardRef(function AvatarGroup2(props, ref) {\n  const recipe = useSlotRecipe({\n    key: \"avatar\"\n  });\n  const [variantProps, localProps] = useMemo(() => recipe.splitVariantProps(props), [props, recipe]);\n  return /* @__PURE__ */jsx(PropsProvider, {\n    value: variantProps,\n    children: /* @__PURE__ */jsx(Group, {\n      gap: \"0\",\n      spaceX: \"-3\",\n      ref,\n      ...localProps\n    })\n  });\n});\nexport { AvatarContext, AvatarFallback, AvatarGroup, AvatarIcon, AvatarImage, AvatarPropsProvider, AvatarRoot, AvatarRootProvider, useAvatarStyles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
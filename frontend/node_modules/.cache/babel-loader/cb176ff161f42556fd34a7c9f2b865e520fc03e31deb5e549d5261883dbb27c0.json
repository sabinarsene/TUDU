{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { useChakraContext } from '../styled-system/provider.js';\nimport { useMediaQuery } from './use-media-query.js';\nfunction useBreakpoint(options = {}) {\n  options.fallback || (options.fallback = \"base\");\n  const sys = useChakraContext();\n  let fallbackPassed = false;\n  const allBreakpoints = sys.breakpoints.values;\n  const breakpoints = allBreakpoints.map(({\n    min,\n    name: breakpoint\n  }) => {\n    const item = {\n      breakpoint,\n      query: `(min-width: ${min})`,\n      fallback: !fallbackPassed\n    };\n    if (breakpoint === options.fallback) {\n      fallbackPassed = true;\n    }\n    return item;\n  }).filter(({\n    breakpoint\n  }) => !!options.breakpoints?.includes(breakpoint));\n  const fallback = breakpoints.map(({\n    fallback: fallback2\n  }) => fallback2);\n  const values = useMediaQuery(breakpoints.map(bp => bp.query), {\n    fallback,\n    ssr: options.ssr\n  });\n  const index = values.lastIndexOf(true);\n  return breakpoints[index]?.breakpoint ?? options.fallback;\n}\nfunction useBreakpointValue(value, opts) {\n  const sys = useChakraContext();\n  const normalized = sys.normalizeValue(value);\n  const breakpoint = useBreakpoint({\n    breakpoints: Object.keys(normalized),\n    ...opts\n  });\n  return normalized[breakpoint];\n}\nexport { useBreakpoint, useBreakpointValue };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
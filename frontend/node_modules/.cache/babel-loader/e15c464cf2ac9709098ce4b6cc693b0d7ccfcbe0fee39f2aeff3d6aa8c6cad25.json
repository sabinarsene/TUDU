{"ast":null,"code":"import { isObject } from './is.mjs';\nfunction walkObject(target, predicate, options = {}) {\n  const {\n    stop,\n    getKey\n  } = options;\n  function inner(value, path = []) {\n    if (isObject(value) || Array.isArray(value)) {\n      const result = {};\n      for (const [prop, child] of Object.entries(value)) {\n        const key = getKey?.(prop) ?? prop;\n        const childPath = [...path, key];\n        if (stop?.(value, childPath)) {\n          return predicate(value, path);\n        }\n        result[key] = inner(child, childPath);\n      }\n      return result;\n    }\n    return predicate(value, path);\n  }\n  return inner(target);\n}\nexport { walkObject };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
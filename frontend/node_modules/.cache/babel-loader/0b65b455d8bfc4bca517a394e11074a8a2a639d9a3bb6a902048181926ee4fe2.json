{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx } from 'react/jsx-runtime';\nimport { RadioGroup, useRadioGroupItemContext } from '@ark-ui/react/radio-group';\nimport { forwardRef } from 'react';\nimport { createSlotRecipeContext } from '../../styled-system/create-slot-recipe-context.js';\nimport { chakra } from '../../styled-system/factory.js';\nimport { Radiomark } from '../radiomark/radiomark.js';\nconst {\n  withProvider,\n  withContext,\n  useStyles: useRadioCardStyles,\n  PropsProvider\n} = createSlotRecipeContext({\n  key: \"radioCard\"\n});\nconst RadioCardRootProvider = withProvider(RadioGroup.RootProvider, \"root\", {\n  forwardAsChild: true\n});\nconst RadioCardRoot = withProvider(RadioGroup.Root, \"root\", {\n  forwardAsChild: true\n});\nconst RadioCardPropsProvider = PropsProvider;\nconst RadioCardLabel = withContext(RadioGroup.Label, \"label\", {\n  forwardAsChild: true\n});\nconst RadioCardItem = withContext(RadioGroup.Item, \"item\", {\n  forwardAsChild: true\n});\nconst RadioCardItemText = withContext(RadioGroup.ItemText, \"itemText\", {\n  forwardAsChild: true\n});\nconst RadioCardItemDescription = withContext(\"div\", \"itemDescription\", {\n  forwardAsChild: true\n});\nconst RadioCardItemControl = withContext(RadioGroup.ItemControl, \"itemControl\", {\n  forwardAsChild: true\n});\nconst RadioCardItemContent = withContext(\"div\", \"itemContent\");\nconst RadioCardItemAddon = withContext(\"div\", \"itemAddon\");\nconst RadioCardItemIndicator = forwardRef(function RadioGroupItemIndicator(props, ref) {\n  const {\n    checked,\n    ...rest\n  } = props;\n  const styles = useRadioCardStyles();\n  const itemContext = useRadioGroupItemContext();\n  if (checked && itemContext.checked) {\n    return /* @__PURE__ */jsx(chakra.span, {\n      ref,\n      asChild: true,\n      ...rest,\n      css: [styles[\"itemIndicator\"], props.css],\n      children: checked\n    });\n  }\n  return /* @__PURE__ */jsx(Radiomark, {\n    ref,\n    unstyled: true,\n    ...props,\n    checked: itemContext.checked,\n    disabled: itemContext.disabled,\n    css: [styles[\"itemIndicator\"], props.css]\n  });\n});\nconst RadioCardContext = RadioGroup.Context;\nconst RadioCardItemContext = RadioGroup.ItemContext;\nconst RadioCardItemHiddenInput = RadioGroup.ItemHiddenInput;\nexport { RadioCardContext, RadioCardItem, RadioCardItemAddon, RadioCardItemContent, RadioCardItemContext, RadioCardItemControl, RadioCardItemDescription, RadioCardItemHiddenInput, RadioCardItemIndicator, RadioCardItemText, RadioCardLabel, RadioCardPropsProvider, RadioCardRoot, RadioCardRootProvider, useRadioCardStyles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
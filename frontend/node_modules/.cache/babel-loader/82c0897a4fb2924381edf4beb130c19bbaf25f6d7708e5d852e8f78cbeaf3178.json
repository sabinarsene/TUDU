{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sabin.arsene\\\\Desktop\\\\TUDU-app\\\\TUDU\\\\frontend\\\\src\\\\pages\\\\ChatPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport { getConversations, markAllMessagesRead } from '../services/messageApi';\nimport Chat from '../components/Chat';\nimport './ChatPage.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatPage = () => {\n  _s();\n  var _conversations$find;\n  const {\n    userId\n  } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    user\n  } = useAuth();\n  const {\n    socket,\n    connected\n  } = useSocket();\n  const [conversations, setConversations] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [markingAsRead, setMarkingAsRead] = useState(false);\n\n  // Load conversations\n  useEffect(() => {\n    const fetchChats = async () => {\n      try {\n        var _location$state;\n        setLoading(true);\n        const data = await getConversations();\n\n        // Verificăm dacă avem date valide\n        if (!data || !Array.isArray(data)) {\n          setConversations([]);\n          setError('Nu s-au putut încărca conversațiile');\n          setLoading(false);\n          return;\n        }\n\n        // Nu mai filtrăm conversațiile, deoarece backend-ul ar trebui să returneze doar conversațiile utilizatorului curent\n        setConversations(data);\n        setError(null);\n\n        // Check if we have a receiverId in the location state (from profile page)\n        const receiverId = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.receiverId;\n\n        // If we have a receiverId in state, navigate to that chat\n        if (receiverId && !userId) {\n          navigate(`/chat/${receiverId}`);\n          return;\n        }\n      } catch (err) {\n        console.error('Error fetching chats:', err);\n        setError('Failed to load conversations');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchChats();\n  }, [userId, navigate, user.id, location.state]);\n\n  // Mark messages as read when a user opens a conversation\n  useEffect(() => {\n    const markMessagesAsRead = async () => {\n      if (!userId || markingAsRead) return;\n      try {\n        setMarkingAsRead(true);\n        // Mark all messages from this sender as read\n        await markAllMessagesRead(userId);\n\n        // Update the conversations list to reflect the read status\n        const updatedConversations = await getConversations();\n        setConversations(updatedConversations);\n      } catch (err) {\n        console.error('Error marking messages as read:', err);\n      } finally {\n        setMarkingAsRead(false);\n      }\n    };\n    markMessagesAsRead();\n  }, [userId]);\n\n  // Listen for new messages to update conversations list\n  useEffect(() => {\n    if (!socket || !connected) return;\n    const handleMessageReceived = async message => {\n      // If this message is relevant to the current user (sender or receiver)\n      if (message.sender_id === user.id || message.receiver_id === user.id) {\n        // If the message is from the current open conversation, mark it as read immediately\n        if (message.sender_id === parseInt(userId) && message.receiver_id === user.id) {\n          try {\n            await markAllMessagesRead(userId);\n          } catch (err) {\n            console.error('Error marking message as read:', err);\n          }\n        }\n\n        // Refresh the conversations list\n        try {\n          const data = await getConversations();\n          if (data && Array.isArray(data)) {\n            setConversations(data);\n          }\n        } catch (err) {\n          console.error('Error refreshing conversations after new message:', err);\n        }\n      }\n    };\n    socket.on('message_received', handleMessageReceived);\n    return () => {\n      socket.off('message_received', handleMessageReceived);\n    };\n  }, [socket, connected, user.id, userId]);\n\n  // Filter conversations by search query\n  const filteredConversations = searchQuery.trim() ? conversations.filter(conv => conv.user.name.toLowerCase().includes(searchQuery.toLowerCase())) : conversations;\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-page-loading\",\n      children: \"Loading chats...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-page-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversations-sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversations-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-button\",\n          onClick: () => navigate('/home'),\n          \"aria-label\": \"Back to Homepage\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\u2190\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search conversations...\",\n          value: searchQuery,\n          onChange: e => setSearchQuery(e.target.value),\n          className: \"search-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), searchQuery && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-search\",\n          onClick: () => setSearchQuery(''),\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversations-list\",\n        children: filteredConversations.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-conversations\",\n          children: searchQuery ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"No conversations matching \\\"\", searchQuery, \"\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No conversations yet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"no-conversations-hint\",\n              children: \"Start a chat from a user's profile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this) : filteredConversations.map(conversation => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `conversation-item ${conversation.user.id === parseInt(userId) ? 'active' : ''}`,\n          onClick: () => navigate(`/chat/${conversation.user.id}`),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conversation-avatar\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: conversation.user.image || '/default-avatar.png',\n              alt: conversation.user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 19\n            }, this), conversation.user.isOnline && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"online-indicator\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conversation-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"conversation-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: conversation.user.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"last-message-time\",\n                children: formatTimestamp(conversation.lastMessage.time)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"last-message\",\n              children: [conversation.lastMessage.sender === 'you' && 'You: ', conversation.lastMessage.text]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 19\n            }, this), conversation.unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"unread-count\",\n              children: conversation.unreadCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 17\n          }, this)]\n        }, conversation.user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-area\",\n      children: userId ? /*#__PURE__*/_jsxDEV(Chat, {\n        otherUser: (_conversations$find = conversations.find(c => c.user.id === parseInt(userId))) === null || _conversations$find === void 0 ? void 0 : _conversations$find.user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-chat-selected\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-chat-icon\",\n          children: \"\\uD83D\\uDCAC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Your messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a conversation to start chatting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"no-chat-hint\",\n          children: \"or find a user to chat with from their profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to format timestamp\n_s(ChatPage, \"p8e+FLmCg6EfrKnpzucp3jT1wo4=\", false, function () {\n  return [useParams, useNavigate, useLocation, useAuth, useSocket];\n});\n_c = ChatPage;\nconst formatTimestamp = timestamp => {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diff = now - date;\n\n  // If less than 24 hours, show only time\n  if (diff < 24 * 60 * 60 * 1000) {\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n\n  // If less than a week, show day name\n  if (diff < 7 * 24 * 60 * 60 * 1000) {\n    return date.toLocaleDateString([], {\n      weekday: 'short'\n    });\n  }\n\n  // Otherwise show date\n  return date.toLocaleDateString([], {\n    month: 'short',\n    day: 'numeric'\n  });\n};\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","useLocation","useAuth","useSocket","getConversations","markAllMessagesRead","Chat","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatPage","_s","_conversations$find","userId","navigate","location","user","socket","connected","conversations","setConversations","loading","setLoading","error","setError","searchQuery","setSearchQuery","markingAsRead","setMarkingAsRead","fetchChats","_location$state","data","Array","isArray","receiverId","state","err","console","id","markMessagesAsRead","updatedConversations","handleMessageReceived","message","sender_id","receiver_id","parseInt","on","off","filteredConversations","trim","filter","conv","name","toLowerCase","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","length","map","conversation","src","image","alt","isOnline","formatTimestamp","lastMessage","time","sender","text","unreadCount","otherUser","find","c","_c","timestamp","date","Date","now","diff","toLocaleTimeString","hour","minute","toLocaleDateString","weekday","month","day","$RefreshReg$"],"sources":["C:/Users/sabin.arsene/Desktop/TUDU-app/TUDU/frontend/src/pages/ChatPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport { getConversations, markAllMessagesRead } from '../services/messageApi';\nimport Chat from '../components/Chat';\nimport './ChatPage.css';\n\nconst ChatPage = () => {\n  const { userId } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { user } = useAuth();\n  const { socket, connected } = useSocket();\n  const [conversations, setConversations] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [markingAsRead, setMarkingAsRead] = useState(false);\n\n  // Load conversations\n  useEffect(() => {\n    const fetchChats = async () => {\n      try {\n        setLoading(true);\n        const data = await getConversations();\n        \n        // Verificăm dacă avem date valide\n        if (!data || !Array.isArray(data)) {\n          setConversations([]);\n          setError('Nu s-au putut încărca conversațiile');\n          setLoading(false);\n          return;\n        }\n        \n        // Nu mai filtrăm conversațiile, deoarece backend-ul ar trebui să returneze doar conversațiile utilizatorului curent\n        setConversations(data);\n        setError(null);\n\n        // Check if we have a receiverId in the location state (from profile page)\n        const receiverId = location.state?.receiverId;\n        \n        // If we have a receiverId in state, navigate to that chat\n        if (receiverId && !userId) {\n          navigate(`/chat/${receiverId}`);\n          return;\n        }\n      } catch (err) {\n        console.error('Error fetching chats:', err);\n        setError('Failed to load conversations');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchChats();\n  }, [userId, navigate, user.id, location.state]);\n\n  // Mark messages as read when a user opens a conversation\n  useEffect(() => {\n    const markMessagesAsRead = async () => {\n      if (!userId || markingAsRead) return;\n      \n      try {\n        setMarkingAsRead(true);\n        // Mark all messages from this sender as read\n        await markAllMessagesRead(userId);\n        \n        // Update the conversations list to reflect the read status\n        const updatedConversations = await getConversations();\n        setConversations(updatedConversations);\n      } catch (err) {\n        console.error('Error marking messages as read:', err);\n      } finally {\n        setMarkingAsRead(false);\n      }\n    };\n\n    markMessagesAsRead();\n  }, [userId]);\n\n  // Listen for new messages to update conversations list\n  useEffect(() => {\n    if (!socket || !connected) return;\n\n    const handleMessageReceived = async (message) => {\n      // If this message is relevant to the current user (sender or receiver)\n      if (message.sender_id === user.id || message.receiver_id === user.id) {\n        // If the message is from the current open conversation, mark it as read immediately\n        if (message.sender_id === parseInt(userId) && message.receiver_id === user.id) {\n          try {\n            await markAllMessagesRead(userId);\n          } catch (err) {\n            console.error('Error marking message as read:', err);\n          }\n        }\n        \n        // Refresh the conversations list\n        try {\n          const data = await getConversations();\n          if (data && Array.isArray(data)) {\n            setConversations(data);\n          }\n        } catch (err) {\n          console.error('Error refreshing conversations after new message:', err);\n        }\n      }\n    };\n\n    socket.on('message_received', handleMessageReceived);\n\n    return () => {\n      socket.off('message_received', handleMessageReceived);\n    };\n  }, [socket, connected, user.id, userId]);\n\n  // Filter conversations by search query\n  const filteredConversations = searchQuery.trim() \n    ? conversations.filter(conv => \n        conv.user.name.toLowerCase().includes(searchQuery.toLowerCase())\n      )\n    : conversations;\n\n  if (loading) {\n    return <div className=\"chat-page-loading\">Loading chats...</div>;\n  }\n\n  if (error) {\n    return <div className=\"chat-page-error\">{error}</div>;\n  }\n\n  return (\n    <div className=\"chat-page\">\n      <div className=\"conversations-sidebar\">\n        <div className=\"conversations-header\">\n          <button \n            className=\"back-button\" \n            onClick={() => navigate('/home')}\n            aria-label=\"Back to Homepage\"\n          >\n            <span>&#8592;</span>\n          </button>\n          <h2>Messages</h2>\n        </div>\n\n        <div className=\"search-container\">\n          <input \n            type=\"text\" \n            placeholder=\"Search conversations...\" \n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"search-input\"\n          />\n          {searchQuery && (\n            <button \n              className=\"clear-search\" \n              onClick={() => setSearchQuery('')}\n            >\n              ✕\n            </button>\n          )}\n        </div>\n\n        <div className=\"conversations-list\">\n          {filteredConversations.length === 0 ? (\n            <div className=\"no-conversations\">\n              {searchQuery ? (\n                <p>No conversations matching \"{searchQuery}\"</p>\n              ) : (\n                <>\n                  <p>No conversations yet</p>\n                  <p className=\"no-conversations-hint\">Start a chat from a user's profile</p>\n                </>\n              )}\n            </div>\n          ) : (\n            filteredConversations.map((conversation) => (\n              <div\n                key={conversation.user.id}\n                className={`conversation-item ${\n                  conversation.user.id === parseInt(userId) ? 'active' : ''\n                }`}\n                onClick={() => navigate(`/chat/${conversation.user.id}`)}\n              >\n                <div className=\"conversation-avatar\">\n                  <img\n                    src={conversation.user.image || '/default-avatar.png'}\n                    alt={conversation.user.name}\n                  />\n                  {conversation.user.isOnline && (\n                    <span className=\"online-indicator\" />\n                  )}\n                </div>\n                <div className=\"conversation-details\">\n                  <div className=\"conversation-header\">\n                    <h3>{conversation.user.name}</h3>\n                    <span className=\"last-message-time\">\n                      {formatTimestamp(conversation.lastMessage.time)}\n                    </span>\n                  </div>\n                  <p className=\"last-message\">\n                    {conversation.lastMessage.sender === 'you' && 'You: '}\n                    {conversation.lastMessage.text}\n                  </p>\n                  {conversation.unreadCount > 0 && (\n                    <span className=\"unread-count\">\n                      {conversation.unreadCount}\n                    </span>\n                  )}\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n      <div className=\"chat-area\">\n        {userId ? (\n          <Chat \n            otherUser={conversations.find(c => c.user.id === parseInt(userId))?.user}\n          />\n        ) : (\n          <div className=\"no-chat-selected\">\n            <div className=\"empty-chat-icon\">💬</div>\n            <h3>Your messages</h3>\n            <p>Select a conversation to start chatting</p>\n            <p className=\"no-chat-hint\">or find a user to chat with from their profile</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Helper function to format timestamp\nconst formatTimestamp = (timestamp) => {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diff = now - date;\n  \n  // If less than 24 hours, show only time\n  if (diff < 24 * 60 * 60 * 1000) {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  }\n  \n  // If less than a week, show day name\n  if (diff < 7 * 24 * 60 * 60 * 1000) {\n    return date.toLocaleDateString([], { weekday: 'short' });\n  }\n  \n  // Otherwise show date\n  return date.toLocaleDateString([], { month: 'short', day: 'numeric' });\n};\n\nexport default ChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { focusOn } from './commands';\nimport { getTabbableNodes, contains, getFocusableNodes } from './utils/DOMutils';\nimport { asArray } from './utils/array';\n/**\r\n * for a given `element` in a given `scope` returns focusable siblings\r\n * @param element - base element\r\n * @param scope - common parent. Can be document, but better to narrow it down for performance reasons\r\n * @returns {prev,next} - references to a focusable element before and after\r\n * @returns undefined - if operation is not applicable\r\n */\nexport var getRelativeFocusable = function (element, scope, useTabbables) {\n  if (!element || !scope) {\n    console.error('no element or scope given');\n    return {};\n  }\n  var shards = asArray(scope);\n  if (shards.every(function (shard) {\n    return !contains(shard, element);\n  })) {\n    console.error('Active element is not contained in the scope');\n    return {};\n  }\n  var focusables = useTabbables ? getTabbableNodes(shards, new Map()) : getFocusableNodes(shards, new Map());\n  var current = focusables.findIndex(function (_a) {\n    var node = _a.node;\n    return node === element;\n  });\n  if (current === -1) {\n    // an edge case, when anchor element is not found\n    return undefined;\n  }\n  return {\n    prev: focusables[current - 1],\n    next: focusables[current + 1],\n    first: focusables[0],\n    last: focusables[focusables.length - 1]\n  };\n};\nvar getBoundary = function (shards, useTabbables) {\n  var set = useTabbables ? getTabbableNodes(asArray(shards), new Map()) : getFocusableNodes(asArray(shards), new Map());\n  return {\n    first: set[0],\n    last: set[set.length - 1]\n  };\n};\nvar defaultOptions = function (options) {\n  return Object.assign({\n    scope: document.body,\n    cycle: true,\n    onlyTabbable: true\n  }, options);\n};\nvar moveFocus = function (fromElement, options, cb) {\n  if (options === void 0) {\n    options = {};\n  }\n  var newOptions = defaultOptions(options);\n  var solution = getRelativeFocusable(fromElement, newOptions.scope, newOptions.onlyTabbable);\n  if (!solution) {\n    return;\n  }\n  var target = cb(solution, newOptions.cycle);\n  if (target) {\n    focusOn(target.node, newOptions.focusOptions);\n  }\n};\n/**\r\n * focuses next element in the tab-order\r\n * @param fromElement - common parent to scope active element search or tab cycle order\r\n * @param {FocusNextOptions} [options] - focus options\r\n */\nexport var focusNextElement = function (fromElement, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  moveFocus(fromElement, options, function (_a, cycle) {\n    var next = _a.next,\n      first = _a.first;\n    return next || cycle && first;\n  });\n};\n/**\r\n * focuses prev element in the tab order\r\n * @param fromElement - common parent to scope active element search or tab cycle order\r\n * @param {FocusNextOptions} [options] - focus options\r\n */\nexport var focusPrevElement = function (fromElement, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  moveFocus(fromElement, options, function (_a, cycle) {\n    var prev = _a.prev,\n      last = _a.last;\n    return prev || cycle && last;\n  });\n};\nvar pickBoundary = function (scope, options, what) {\n  var _a;\n  var boundary = getBoundary(scope, (_a = options.onlyTabbable) !== null && _a !== void 0 ? _a : true);\n  var node = boundary[what];\n  if (node) {\n    focusOn(node.node, options.focusOptions);\n  }\n};\n/**\r\n * focuses first element in the tab-order\r\n * @param {FocusNextOptions} options - focus options\r\n */\nexport var focusFirstElement = function (scope, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  pickBoundary(scope, options, 'first');\n};\n/**\r\n * focuses last element in the tab order\r\n * @param {FocusNextOptions} options - focus options\r\n */\nexport var focusLastElement = function (scope, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  pickBoundary(scope, options, 'last');\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
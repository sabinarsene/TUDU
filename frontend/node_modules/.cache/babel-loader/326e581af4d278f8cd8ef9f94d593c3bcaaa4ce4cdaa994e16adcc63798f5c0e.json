{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL } from '../config/api';\n\n// Use consistent API URL format\nconst API_ENDPOINT = `${API_BASE_URL}/api/services`;\n\n// Log the API URL for debugging\nconsole.log('API URL:', API_ENDPOINT);\n\n/**\r\n * Fetch all services from the API\r\n * @returns {Promise<Array>} Array of services\r\n */\nexport const getServices = async (filters = {}) => {\n  try {\n    const queryParams = new URLSearchParams(filters).toString();\n    const fullUrl = `${API_ENDPOINT}${queryParams ? `?${queryParams}` : ''}`;\n    const response = await fetch(fullUrl);\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching services:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Fetch a single service by ID\r\n * @param {number} id - Service ID\r\n * @returns {Promise<Object>} Service object\r\n */\nexport const getServiceById = async id => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/${id}`);\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching service:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Create a new service\r\n * @param {FormData} serviceData - Service data as FormData (for file uploads)\r\n * @returns {Promise<Object>} Created service\r\n */\nexport const createService = async serviceData => {\n  try {\n    console.log('Creating service with data:', {\n      title: serviceData.get('title'),\n      category: serviceData.get('category'),\n      hasImages: serviceData.getAll('images').length > 0\n    });\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Nu ești autentificat');\n    }\n    const response = await fetch(API_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      body: serviceData\n    });\n    if (!response.ok) {\n      let errorMessage = 'Failed to create service';\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.message || errorMessage;\n      } catch (e) {\n        console.error('Error parsing error response:', e);\n      }\n      throw new Error(errorMessage);\n    }\n    const data = await response.json();\n    console.log('Service created successfully:', data);\n    return data;\n  } catch (error) {\n    console.error('Error creating service:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Update an existing service\r\n * @param {number} id - Service ID\r\n * @param {Object|FormData} serviceData - Updated service data\r\n * @param {string} token - Authentication token\r\n * @returns {Promise<Object>} Updated service\r\n */\nexport const updateService = async (id, serviceData) => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify(serviceData)\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating service:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Delete a service\r\n * @param {number} id - Service ID\r\n * @param {string} token - Authentication token\r\n * @returns {Promise<Object>} Response message\r\n */\nexport const deleteService = async id => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error deleting service:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Submit a rating for a user\r\n * @param {string} userId - ID of the user being rated\r\n * @param {number} rating - Rating value (1-5)\r\n * @param {string} comment - Optional comment with the rating\r\n * @param {string} token - Authentication token\r\n * @returns {Promise<Object>} Response with the updated rating information\r\n */\nexport const submitUserRating = async (userId, rating, comment, token) => {\n  try {\n    console.log(`Submitting rating ${rating} for user ${userId} with comment: ${comment}`);\n    const apiUrl = `${API_BASE_URL}/api/users/${userId}/ratings`;\n    console.log('API URL:', apiUrl);\n\n    // Verificăm dacă avem token\n    if (!token) {\n      console.error('No token provided');\n      throw new Error('Nu ești autentificat');\n    }\n    console.log('Using token:', token);\n\n    // Configurăm axios cu timeout și headers\n    const axiosInstance = axios.create({\n      timeout: 10000,\n      // 10 secunde timeout\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n        'x-auth-token': token // pentru compatibilitate\n      }\n    });\n    console.log('Request headers:', axiosInstance.defaults.headers);\n    const response = await axiosInstance.post(apiUrl, {\n      rating,\n      comment\n    });\n    console.log('Response status:', response.status);\n    console.log('Response headers:', response.headers);\n    console.log('Rating submitted successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`Error submitting rating for user ${userId}:`, error);\n    if (error.response) {\n      // Serverul a răspuns cu un status code în afara intervalului 2xx\n      console.error('Server error response:', error.response.data);\n      const errorMessage = error.response.data.message || `Error submitting rating: ${error.response.statusText}`;\n      throw new Error(errorMessage);\n    } else if (error.request) {\n      // Cererea a fost făcută dar nu s-a primit răspuns\n      console.error('No response received:', error.request);\n      throw new Error('Nu s-a putut contacta serverul. Verificați conexiunea la internet.');\n    } else {\n      // Ceva s-a întâmplat la configurarea cererii\n      console.error('Request configuration error:', error.message);\n      throw error;\n    }\n  }\n};\n\n/**\r\n * Fetch ratings for a user\r\n * @param {string} userId - ID of the user\r\n * @returns {Promise<Object>} Object with ratings array\r\n */\nexport const fetchUserRatings = async userId => {\n  try {\n    console.log(`Fetching ratings for user ${userId}`);\n    const apiUrl = `${API_BASE_URL}/api/users/${userId}/ratings`;\n    console.log('API URL:', apiUrl);\n\n    // Adăugăm un timeout pentru a evita blocarea UI-ului\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 secunde timeout\n\n    try {\n      const response = await fetch(apiUrl, {\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries([...response.headers]));\n      if (!response.ok) {\n        if (response.status === 404) {\n          console.log(`Endpoint /users/${userId}/ratings nu este disponibil sau utilizatorul nu are evaluări`);\n          return {\n            ratings: [],\n            averageRating: 0,\n            reviewCount: 0\n          };\n        }\n\n        // Încercăm să obținem detalii despre eroare\n        try {\n          const errorData = await response.json();\n          console.error('Error response data:', errorData);\n          throw new Error(errorData.message || `Error fetching ratings: ${response.statusText}`);\n        } catch (jsonError) {\n          console.error('Could not parse error response:', jsonError);\n          throw new Error(`Error fetching ratings: ${response.statusText}`);\n        }\n      }\n      const data = await response.json();\n      console.log('Ratings fetched successfully:', data);\n      return data;\n    } catch (fetchError) {\n      clearTimeout(timeoutId);\n      if (fetchError.name === 'AbortError') {\n        console.error('Request timed out after 10 seconds');\n        throw new Error('Cererea a expirat. Serverul nu a răspuns în timp util.');\n      }\n      throw fetchError;\n    }\n  } catch (error) {\n    console.error(`Error fetching ratings for user ${userId}:`, error);\n\n    // Returnăm un obiect gol în loc să aruncăm eroarea\n    // pentru a permite componentei să afișeze un mesaj de eroare\n    return {\n      ratings: [],\n      averageRating: 0,\n      reviewCount: 0\n    };\n  }\n};\n\n/**\r\n * Fetch services for a specific user\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Array>} Array of services\r\n */\nexport const getUserServices = async userId => {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/user/${userId}`);\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching user services:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Generează date mock pentru serviciile unui utilizator\r\n * @param {string} userId - ID-ul utilizatorului\r\n * @returns {Array} Array de servicii mock\r\n */\nconst getMockUserServices = userId => {\n  // Generăm un număr aleatoriu de servicii între 1 și 5\n  const numServices = Math.floor(Math.random() * 5) + 1;\n  const services = [];\n  const categories = ['Instalații', 'Curățenie', 'Transport', 'Reparații', 'IT', 'Design', 'Educație'];\n  const locations = ['București', 'Cluj-Napoca', 'Timișoara', 'Iași', 'Brașov', 'Constanța'];\n\n  // Generăm servicii aleatorii\n  for (let i = 0; i < numServices; i++) {\n    const service = {\n      id: `mock-service-${i}`,\n      title: `Serviciu Mock ${i + 1}`,\n      description: `Aceasta este o descriere mock pentru serviciul ${i + 1} al utilizatorului cu ID-ul ${userId}.`,\n      category: categories[Math.floor(Math.random() * categories.length)],\n      location: locations[Math.floor(Math.random() * locations.length)],\n      price: Math.floor(Math.random() * 500) + 50,\n      currency: 'RON',\n      rating: (Math.random() * 4 + 1).toFixed(1),\n      review_count: Math.floor(Math.random() * 50),\n      image: null,\n      provider: {\n        id: userId,\n        name: `Utilizator ${userId}`,\n        image: null\n      }\n    };\n    services.push(service);\n  }\n  return services;\n};","map":{"version":3,"names":["axios","API_BASE_URL","API_ENDPOINT","console","log","getServices","filters","queryParams","URLSearchParams","toString","fullUrl","response","fetch","json","error","getServiceById","id","createService","serviceData","title","get","category","hasImages","getAll","length","token","localStorage","getItem","Error","method","headers","body","ok","errorMessage","errorData","message","e","data","updateService","JSON","stringify","deleteService","submitUserRating","userId","rating","comment","apiUrl","axiosInstance","create","timeout","defaults","post","status","statusText","request","fetchUserRatings","controller","AbortController","timeoutId","setTimeout","abort","signal","clearTimeout","Object","fromEntries","ratings","averageRating","reviewCount","jsonError","fetchError","name","getUserServices","getMockUserServices","numServices","Math","floor","random","services","categories","locations","i","service","description","location","price","currency","toFixed","review_count","image","provider","push"],"sources":["C:/Users/sabin.arsene/Desktop/Tudu-app/TUDU/frontend/src/services/serviceApi.js"],"sourcesContent":["import axios from 'axios';\r\nimport { API_BASE_URL } from '../config/api';\r\n\r\n// Use consistent API URL format\r\nconst API_ENDPOINT = `${API_BASE_URL}/api/services`;\r\n\r\n// Log the API URL for debugging\r\nconsole.log('API URL:', API_ENDPOINT);\r\n\r\n/**\r\n * Fetch all services from the API\r\n * @returns {Promise<Array>} Array of services\r\n */\r\nexport const getServices = async (filters = {}) => {\r\n  try {\r\n    const queryParams = new URLSearchParams(filters).toString();\r\n    const fullUrl = `${API_ENDPOINT}${queryParams ? `?${queryParams}` : ''}`;\r\n    const response = await fetch(fullUrl);\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching services:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch a single service by ID\r\n * @param {number} id - Service ID\r\n * @returns {Promise<Object>} Service object\r\n */\r\nexport const getServiceById = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_ENDPOINT}/${id}`);\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching service:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Create a new service\r\n * @param {FormData} serviceData - Service data as FormData (for file uploads)\r\n * @returns {Promise<Object>} Created service\r\n */\r\nexport const createService = async (serviceData) => {\r\n  try {\r\n    console.log('Creating service with data:', {\r\n      title: serviceData.get('title'),\r\n      category: serviceData.get('category'),\r\n      hasImages: serviceData.getAll('images').length > 0\r\n    });\r\n\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Nu ești autentificat');\r\n    }\r\n\r\n    const response = await fetch(API_ENDPOINT, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: serviceData\r\n    });\r\n\r\n    if (!response.ok) {\r\n      let errorMessage = 'Failed to create service';\r\n      try {\r\n        const errorData = await response.json();\r\n        errorMessage = errorData.message || errorMessage;\r\n      } catch (e) {\r\n        console.error('Error parsing error response:', e);\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Service created successfully:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error creating service:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Update an existing service\r\n * @param {number} id - Service ID\r\n * @param {Object|FormData} serviceData - Updated service data\r\n * @param {string} token - Authentication token\r\n * @returns {Promise<Object>} Updated service\r\n */\r\nexport const updateService = async (id, serviceData) => {\r\n  try {\r\n    const response = await fetch(`${API_ENDPOINT}/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n      },\r\n      body: JSON.stringify(serviceData)\r\n    });\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error updating service:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Delete a service\r\n * @param {number} id - Service ID\r\n * @param {string} token - Authentication token\r\n * @returns {Promise<Object>} Response message\r\n */\r\nexport const deleteService = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_ENDPOINT}/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n      }\r\n    });\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error deleting service:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Submit a rating for a user\r\n * @param {string} userId - ID of the user being rated\r\n * @param {number} rating - Rating value (1-5)\r\n * @param {string} comment - Optional comment with the rating\r\n * @param {string} token - Authentication token\r\n * @returns {Promise<Object>} Response with the updated rating information\r\n */\r\nexport const submitUserRating = async (userId, rating, comment, token) => {\r\n  try {\r\n    console.log(`Submitting rating ${rating} for user ${userId} with comment: ${comment}`);\r\n    const apiUrl = `${API_BASE_URL}/api/users/${userId}/ratings`;\r\n    console.log('API URL:', apiUrl);\r\n    \r\n    // Verificăm dacă avem token\r\n    if (!token) {\r\n      console.error('No token provided');\r\n      throw new Error('Nu ești autentificat');\r\n    }\r\n    \r\n    console.log('Using token:', token);\r\n    \r\n    // Configurăm axios cu timeout și headers\r\n    const axiosInstance = axios.create({\r\n      timeout: 10000, // 10 secunde timeout\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`,\r\n        'x-auth-token': token // pentru compatibilitate\r\n      }\r\n    });\r\n    \r\n    console.log('Request headers:', axiosInstance.defaults.headers);\r\n    \r\n    const response = await axiosInstance.post(apiUrl, {\r\n      rating,\r\n      comment\r\n    });\r\n    \r\n    console.log('Response status:', response.status);\r\n    console.log('Response headers:', response.headers);\r\n    console.log('Rating submitted successfully:', response.data);\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error submitting rating for user ${userId}:`, error);\r\n    \r\n    if (error.response) {\r\n      // Serverul a răspuns cu un status code în afara intervalului 2xx\r\n      console.error('Server error response:', error.response.data);\r\n      const errorMessage = error.response.data.message || `Error submitting rating: ${error.response.statusText}`;\r\n      throw new Error(errorMessage);\r\n    } else if (error.request) {\r\n      // Cererea a fost făcută dar nu s-a primit răspuns\r\n      console.error('No response received:', error.request);\r\n      throw new Error('Nu s-a putut contacta serverul. Verificați conexiunea la internet.');\r\n    } else {\r\n      // Ceva s-a întâmplat la configurarea cererii\r\n      console.error('Request configuration error:', error.message);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch ratings for a user\r\n * @param {string} userId - ID of the user\r\n * @returns {Promise<Object>} Object with ratings array\r\n */\r\nexport const fetchUserRatings = async (userId) => {\r\n  try {\r\n    console.log(`Fetching ratings for user ${userId}`);\r\n    const apiUrl = `${API_BASE_URL}/api/users/${userId}/ratings`;\r\n    console.log('API URL:', apiUrl);\r\n    \r\n    // Adăugăm un timeout pentru a evita blocarea UI-ului\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 secunde timeout\r\n    \r\n    try {\r\n      const response = await fetch(apiUrl, {\r\n        signal: controller.signal\r\n      });\r\n      \r\n      clearTimeout(timeoutId);\r\n      \r\n      console.log('Response status:', response.status);\r\n      console.log('Response headers:', Object.fromEntries([...response.headers]));\r\n      \r\n      if (!response.ok) {\r\n        if (response.status === 404) {\r\n          console.log(`Endpoint /users/${userId}/ratings nu este disponibil sau utilizatorul nu are evaluări`);\r\n          return { ratings: [], averageRating: 0, reviewCount: 0 };\r\n        }\r\n        \r\n        // Încercăm să obținem detalii despre eroare\r\n        try {\r\n          const errorData = await response.json();\r\n          console.error('Error response data:', errorData);\r\n          throw new Error(errorData.message || `Error fetching ratings: ${response.statusText}`);\r\n        } catch (jsonError) {\r\n          console.error('Could not parse error response:', jsonError);\r\n          throw new Error(`Error fetching ratings: ${response.statusText}`);\r\n        }\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('Ratings fetched successfully:', data);\r\n      return data;\r\n    } catch (fetchError) {\r\n      clearTimeout(timeoutId);\r\n      \r\n      if (fetchError.name === 'AbortError') {\r\n        console.error('Request timed out after 10 seconds');\r\n        throw new Error('Cererea a expirat. Serverul nu a răspuns în timp util.');\r\n      }\r\n      \r\n      throw fetchError;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching ratings for user ${userId}:`, error);\r\n    \r\n    // Returnăm un obiect gol în loc să aruncăm eroarea\r\n    // pentru a permite componentei să afișeze un mesaj de eroare\r\n    return { ratings: [], averageRating: 0, reviewCount: 0 };\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch services for a specific user\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Array>} Array of services\r\n */\r\nexport const getUserServices = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${API_ENDPOINT}/user/${userId}`);\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching user services:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Generează date mock pentru serviciile unui utilizator\r\n * @param {string} userId - ID-ul utilizatorului\r\n * @returns {Array} Array de servicii mock\r\n */\r\nconst getMockUserServices = (userId) => {\r\n  // Generăm un număr aleatoriu de servicii între 1 și 5\r\n  const numServices = Math.floor(Math.random() * 5) + 1;\r\n  const services = [];\r\n  \r\n  const categories = ['Instalații', 'Curățenie', 'Transport', 'Reparații', 'IT', 'Design', 'Educație'];\r\n  const locations = ['București', 'Cluj-Napoca', 'Timișoara', 'Iași', 'Brașov', 'Constanța'];\r\n  \r\n  // Generăm servicii aleatorii\r\n  for (let i = 0; i < numServices; i++) {\r\n    const service = {\r\n      id: `mock-service-${i}`,\r\n      title: `Serviciu Mock ${i + 1}`,\r\n      description: `Aceasta este o descriere mock pentru serviciul ${i + 1} al utilizatorului cu ID-ul ${userId}.`,\r\n      category: categories[Math.floor(Math.random() * categories.length)],\r\n      location: locations[Math.floor(Math.random() * locations.length)],\r\n      price: Math.floor(Math.random() * 500) + 50,\r\n      currency: 'RON',\r\n      rating: (Math.random() * 4 + 1).toFixed(1),\r\n      review_count: Math.floor(Math.random() * 50),\r\n      image: null,\r\n      provider: {\r\n        id: userId,\r\n        name: `Utilizator ${userId}`,\r\n        image: null\r\n      }\r\n    };\r\n    services.push(service);\r\n  }\r\n  \r\n  return services;\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,eAAe;;AAE5C;AACA,MAAMC,YAAY,GAAG,GAAGD,YAAY,eAAe;;AAEnD;AACAE,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEF,YAAY,CAAC;;AAErC;AACA;AACA;AACA;AACA,OAAO,MAAMG,WAAW,GAAG,MAAAA,CAAOC,OAAO,GAAG,CAAC,CAAC,KAAK;EACjD,IAAI;IACF,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACF,OAAO,CAAC,CAACG,QAAQ,CAAC,CAAC;IAC3D,MAAMC,OAAO,GAAG,GAAGR,YAAY,GAAGK,WAAW,GAAG,IAAIA,WAAW,EAAE,GAAG,EAAE,EAAE;IACxE,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACF,OAAO,CAAC;IACrC,OAAO,MAAMC,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,EAAE,IAAK;EAC1C,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,YAAY,IAAIc,EAAE,EAAE,CAAC;IACrD,OAAO,MAAML,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,aAAa,GAAG,MAAOC,WAAW,IAAK;EAClD,IAAI;IACFf,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE;MACzCe,KAAK,EAAED,WAAW,CAACE,GAAG,CAAC,OAAO,CAAC;MAC/BC,QAAQ,EAAEH,WAAW,CAACE,GAAG,CAAC,UAAU,CAAC;MACrCE,SAAS,EAAEJ,WAAW,CAACK,MAAM,CAAC,QAAQ,CAAC,CAACC,MAAM,GAAG;IACnD,CAAC,CAAC;IAEF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACV,MAAM,IAAIG,KAAK,CAAC,sBAAsB,CAAC;IACzC;IAEA,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAACV,YAAY,EAAE;MACzC2B,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,eAAe,EAAE,UAAUL,KAAK;MAClC,CAAC;MACDM,IAAI,EAAEb;IACR,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACqB,EAAE,EAAE;MAChB,IAAIC,YAAY,GAAG,0BAA0B;MAC7C,IAAI;QACF,MAAMC,SAAS,GAAG,MAAMvB,QAAQ,CAACE,IAAI,CAAC,CAAC;QACvCoB,YAAY,GAAGC,SAAS,CAACC,OAAO,IAAIF,YAAY;MAClD,CAAC,CAAC,OAAOG,CAAC,EAAE;QACVjC,OAAO,CAACW,KAAK,CAAC,+BAA+B,EAAEsB,CAAC,CAAC;MACnD;MACA,MAAM,IAAIR,KAAK,CAACK,YAAY,CAAC;IAC/B;IAEA,MAAMI,IAAI,GAAG,MAAM1B,QAAQ,CAACE,IAAI,CAAC,CAAC;IAClCV,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEiC,IAAI,CAAC;IAClD,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOvB,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMwB,aAAa,GAAG,MAAAA,CAAOtB,EAAE,EAAEE,WAAW,KAAK;EACtD,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,YAAY,IAAIc,EAAE,EAAE,EAAE;MACpDa,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUJ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC1D,CAAC;MACDI,IAAI,EAAEQ,IAAI,CAACC,SAAS,CAACtB,WAAW;IAClC,CAAC,CAAC;IACF,OAAO,MAAMP,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM2B,aAAa,GAAG,MAAOzB,EAAE,IAAK;EACzC,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,YAAY,IAAIc,EAAE,EAAE,EAAE;MACpDa,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACP,eAAe,EAAE,UAAUJ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC1D;IACF,CAAC,CAAC;IACF,OAAO,MAAMhB,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM4B,gBAAgB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAEpB,KAAK,KAAK;EACxE,IAAI;IACFtB,OAAO,CAACC,GAAG,CAAC,qBAAqBwC,MAAM,aAAaD,MAAM,kBAAkBE,OAAO,EAAE,CAAC;IACtF,MAAMC,MAAM,GAAG,GAAG7C,YAAY,cAAc0C,MAAM,UAAU;IAC5DxC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE0C,MAAM,CAAC;;IAE/B;IACA,IAAI,CAACrB,KAAK,EAAE;MACVtB,OAAO,CAACW,KAAK,CAAC,mBAAmB,CAAC;MAClC,MAAM,IAAIc,KAAK,CAAC,sBAAsB,CAAC;IACzC;IAEAzB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEqB,KAAK,CAAC;;IAElC;IACA,MAAMsB,aAAa,GAAG/C,KAAK,CAACgD,MAAM,CAAC;MACjCC,OAAO,EAAE,KAAK;MAAE;MAChBnB,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUL,KAAK,EAAE;QAClC,cAAc,EAAEA,KAAK,CAAC;MACxB;IACF,CAAC,CAAC;IAEFtB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE2C,aAAa,CAACG,QAAQ,CAACpB,OAAO,CAAC;IAE/D,MAAMnB,QAAQ,GAAG,MAAMoC,aAAa,CAACI,IAAI,CAACL,MAAM,EAAE;MAChDF,MAAM;MACNC;IACF,CAAC,CAAC;IAEF1C,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEO,QAAQ,CAACyC,MAAM,CAAC;IAChDjD,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEO,QAAQ,CAACmB,OAAO,CAAC;IAClD3B,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEO,QAAQ,CAAC0B,IAAI,CAAC;IAE5D,OAAO1B,QAAQ,CAAC0B,IAAI;EACtB,CAAC,CAAC,OAAOvB,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,oCAAoC6B,MAAM,GAAG,EAAE7B,KAAK,CAAC;IAEnE,IAAIA,KAAK,CAACH,QAAQ,EAAE;MAClB;MACAR,OAAO,CAACW,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACH,QAAQ,CAAC0B,IAAI,CAAC;MAC5D,MAAMJ,YAAY,GAAGnB,KAAK,CAACH,QAAQ,CAAC0B,IAAI,CAACF,OAAO,IAAI,4BAA4BrB,KAAK,CAACH,QAAQ,CAAC0C,UAAU,EAAE;MAC3G,MAAM,IAAIzB,KAAK,CAACK,YAAY,CAAC;IAC/B,CAAC,MAAM,IAAInB,KAAK,CAACwC,OAAO,EAAE;MACxB;MACAnD,OAAO,CAACW,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACwC,OAAO,CAAC;MACrD,MAAM,IAAI1B,KAAK,CAAC,oEAAoE,CAAC;IACvF,CAAC,MAAM;MACL;MACAzB,OAAO,CAACW,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAACqB,OAAO,CAAC;MAC5D,MAAMrB,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMyC,gBAAgB,GAAG,MAAOZ,MAAM,IAAK;EAChD,IAAI;IACFxC,OAAO,CAACC,GAAG,CAAC,6BAA6BuC,MAAM,EAAE,CAAC;IAClD,MAAMG,MAAM,GAAG,GAAG7C,YAAY,cAAc0C,MAAM,UAAU;IAC5DxC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE0C,MAAM,CAAC;;IAE/B;IACA,MAAMU,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,MAAMC,SAAS,GAAGC,UAAU,CAAC,MAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAE/D,IAAI;MACF,MAAMjD,QAAQ,GAAG,MAAMC,KAAK,CAACkC,MAAM,EAAE;QACnCe,MAAM,EAAEL,UAAU,CAACK;MACrB,CAAC,CAAC;MAEFC,YAAY,CAACJ,SAAS,CAAC;MAEvBvD,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEO,QAAQ,CAACyC,MAAM,CAAC;MAChDjD,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE2D,MAAM,CAACC,WAAW,CAAC,CAAC,GAAGrD,QAAQ,CAACmB,OAAO,CAAC,CAAC,CAAC;MAE3E,IAAI,CAACnB,QAAQ,CAACqB,EAAE,EAAE;QAChB,IAAIrB,QAAQ,CAACyC,MAAM,KAAK,GAAG,EAAE;UAC3BjD,OAAO,CAACC,GAAG,CAAC,mBAAmBuC,MAAM,8DAA8D,CAAC;UACpG,OAAO;YAAEsB,OAAO,EAAE,EAAE;YAAEC,aAAa,EAAE,CAAC;YAAEC,WAAW,EAAE;UAAE,CAAC;QAC1D;;QAEA;QACA,IAAI;UACF,MAAMjC,SAAS,GAAG,MAAMvB,QAAQ,CAACE,IAAI,CAAC,CAAC;UACvCV,OAAO,CAACW,KAAK,CAAC,sBAAsB,EAAEoB,SAAS,CAAC;UAChD,MAAM,IAAIN,KAAK,CAACM,SAAS,CAACC,OAAO,IAAI,2BAA2BxB,QAAQ,CAAC0C,UAAU,EAAE,CAAC;QACxF,CAAC,CAAC,OAAOe,SAAS,EAAE;UAClBjE,OAAO,CAACW,KAAK,CAAC,iCAAiC,EAAEsD,SAAS,CAAC;UAC3D,MAAM,IAAIxC,KAAK,CAAC,2BAA2BjB,QAAQ,CAAC0C,UAAU,EAAE,CAAC;QACnE;MACF;MAEA,MAAMhB,IAAI,GAAG,MAAM1B,QAAQ,CAACE,IAAI,CAAC,CAAC;MAClCV,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEiC,IAAI,CAAC;MAClD,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOgC,UAAU,EAAE;MACnBP,YAAY,CAACJ,SAAS,CAAC;MAEvB,IAAIW,UAAU,CAACC,IAAI,KAAK,YAAY,EAAE;QACpCnE,OAAO,CAACW,KAAK,CAAC,oCAAoC,CAAC;QACnD,MAAM,IAAIc,KAAK,CAAC,wDAAwD,CAAC;MAC3E;MAEA,MAAMyC,UAAU;IAClB;EACF,CAAC,CAAC,OAAOvD,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,mCAAmC6B,MAAM,GAAG,EAAE7B,KAAK,CAAC;;IAElE;IACA;IACA,OAAO;MAAEmD,OAAO,EAAE,EAAE;MAAEC,aAAa,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAE,CAAC;EAC1D;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,eAAe,GAAG,MAAO5B,MAAM,IAAK;EAC/C,IAAI;IACF,MAAMhC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,YAAY,SAASyC,MAAM,EAAE,CAAC;IAC9D,OAAO,MAAMhC,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAM0D,mBAAmB,GAAI7B,MAAM,IAAK;EACtC;EACA,MAAM8B,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EACrD,MAAMC,QAAQ,GAAG,EAAE;EAEnB,MAAMC,UAAU,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,CAAC;EACpG,MAAMC,SAAS,GAAG,CAAC,WAAW,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,CAAC;;EAE1F;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,WAAW,EAAEO,CAAC,EAAE,EAAE;IACpC,MAAMC,OAAO,GAAG;MACdjE,EAAE,EAAE,gBAAgBgE,CAAC,EAAE;MACvB7D,KAAK,EAAE,iBAAiB6D,CAAC,GAAG,CAAC,EAAE;MAC/BE,WAAW,EAAE,kDAAkDF,CAAC,GAAG,CAAC,+BAA+BrC,MAAM,GAAG;MAC5GtB,QAAQ,EAAEyD,UAAU,CAACJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGE,UAAU,CAACtD,MAAM,CAAC,CAAC;MACnE2D,QAAQ,EAAEJ,SAAS,CAACL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGG,SAAS,CAACvD,MAAM,CAAC,CAAC;MACjE4D,KAAK,EAAEV,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE;MAC3CS,QAAQ,EAAE,KAAK;MACfzC,MAAM,EAAE,CAAC8B,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAEU,OAAO,CAAC,CAAC,CAAC;MAC1CC,YAAY,EAAEb,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;MAC5CY,KAAK,EAAE,IAAI;MACXC,QAAQ,EAAE;QACRzE,EAAE,EAAE2B,MAAM;QACV2B,IAAI,EAAE,cAAc3B,MAAM,EAAE;QAC5B6C,KAAK,EAAE;MACT;IACF,CAAC;IACDX,QAAQ,CAACa,IAAI,CAACT,OAAO,CAAC;EACxB;EAEA,OAAOJ,QAAQ;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
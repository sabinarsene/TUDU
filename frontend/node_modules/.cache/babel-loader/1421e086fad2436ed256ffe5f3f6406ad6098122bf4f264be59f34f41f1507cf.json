{"ast":null,"code":"import { correctNodes } from './utils/correctFocus';\nimport { pickFocusable } from './utils/firstFocus';\nimport { isGuard } from './utils/is';\nexport var NEW_FOCUS = 'NEW_FOCUS';\n/**\r\n * Main solver for the \"find next focus\" question\r\n * @param innerNodes - used to control \"return focus\"\r\n * @param innerTabbables - used to control \"autofocus\"\r\n * @param outerNodes\r\n * @param activeElement\r\n * @param lastNode\r\n * @returns {number|string|undefined|*}\r\n */\nexport var newFocus = function (innerNodes, innerTabbables, outerNodes, activeElement, lastNode) {\n  var cnt = innerNodes.length;\n  var firstFocus = innerNodes[0];\n  var lastFocus = innerNodes[cnt - 1];\n  var isOnGuard = isGuard(activeElement);\n  // focus is inside\n  if (activeElement && innerNodes.indexOf(activeElement) >= 0) {\n    return undefined;\n  }\n  var activeIndex = activeElement !== undefined ? outerNodes.indexOf(activeElement) : -1;\n  var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;\n  var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;\n  // no active focus (or focus is on the body)\n  if (activeIndex === -1) {\n    // known fallback\n    if (lastNodeInside !== -1) {\n      return lastNodeInside;\n    }\n    return NEW_FOCUS;\n  }\n  // new focus, nothing to calculate\n  if (lastNodeInside === -1) {\n    return NEW_FOCUS;\n  }\n  var indexDiff = activeIndex - lastIndex;\n  var firstNodeIndex = outerNodes.indexOf(firstFocus);\n  var lastNodeIndex = outerNodes.indexOf(lastFocus);\n  var correctedNodes = correctNodes(outerNodes);\n  var currentFocusableIndex = activeElement !== undefined ? correctedNodes.indexOf(activeElement) : -1;\n  var previousFocusableIndex = lastNode ? correctedNodes.indexOf(lastNode) : currentFocusableIndex;\n  var tabbableNodes = correctedNodes.filter(function (node) {\n    return node.tabIndex >= 0;\n  });\n  var currentTabbableIndex = activeElement !== undefined ? tabbableNodes.indexOf(activeElement) : -1;\n  var previousTabbableIndex = lastNode ? tabbableNodes.indexOf(lastNode) : currentTabbableIndex;\n  var focusIndexDiff = currentTabbableIndex >= 0 && previousTabbableIndex >= 0 ?\n  // old/new are tabbables, measure distance in tabbable space\n  previousTabbableIndex - currentTabbableIndex :\n  // or else measure in focusable space\n  previousFocusableIndex - currentFocusableIndex;\n  // old focus\n  if (!indexDiff && lastNodeInside >= 0) {\n    return lastNodeInside;\n  }\n  // no tabbable elements, autofocus is not possible\n  if (innerTabbables.length === 0) {\n    // an edge case with no tabbable elements\n    // return the last focusable one\n    // with some probability this will prevent focus from cycling across the lock, but there is no tabbale elements to cycle to\n    return lastNodeInside;\n  }\n  var returnFirstNode = pickFocusable(innerNodes, innerTabbables[0]);\n  var returnLastNode = pickFocusable(innerNodes, innerTabbables[innerTabbables.length - 1]);\n  // first element\n  if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {\n    return returnLastNode;\n  }\n  // last element\n  if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {\n    return returnFirstNode;\n  }\n  // jump out, but not on the guard\n  if (indexDiff && Math.abs(focusIndexDiff) > 1) {\n    return lastNodeInside;\n  }\n  // focus above lock\n  if (activeIndex <= firstNodeIndex) {\n    return returnLastNode;\n  }\n  // focus below lock\n  if (activeIndex > lastNodeIndex) {\n    return returnFirstNode;\n  }\n  // index is inside tab order, but outside Lock\n  if (indexDiff) {\n    if (Math.abs(indexDiff) > 1) {\n      return lastNodeInside;\n    }\n    return (cnt + lastNodeInside + indexDiff) % cnt;\n  }\n  // do nothing\n  return undefined;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
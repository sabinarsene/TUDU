{"ast":null,"code":"\"use strict\";\n\nimport { omit } from '../utils/omit.js';\nimport { splitProps } from '../utils/split-props.js';\nconst getSlotRecipes = (config = {}) => {\n  const init = slot => ({\n    base: config.base?.[slot] ?? {},\n    variants: {},\n    defaultVariants: config.defaultVariants ?? {},\n    compoundVariants: config.compoundVariants ? getSlotCompoundVariant(config.compoundVariants, slot) : []\n  });\n  const slots = config.slots ?? [];\n  const entries = slots.map(slot => [slot, init(slot)]);\n  for (const [variantsKey, variantsSpec] of Object.entries(config.variants ?? {})) {\n    for (const [variantKey, variantSpec] of Object.entries(variantsSpec)) {\n      entries.forEach(([slot, slotRecipe]) => {\n        var _a;\n        (_a = slotRecipe.variants)[variantsKey] ?? (_a[variantsKey] = {});\n        slotRecipe.variants[variantsKey][variantKey] = variantSpec[slot] ?? {};\n      });\n    }\n  }\n  return Object.fromEntries(entries);\n};\nconst getSlotCompoundVariant = (compoundVariants, slotName) => compoundVariants.filter(compoundVariant => compoundVariant.css[slotName]).map(compoundVariant => ({\n  ...compoundVariant,\n  css: compoundVariant.css[slotName]\n}));\nfunction createSlotRecipeFn(options) {\n  const {\n    cva\n  } = options;\n  return function sva(config = {}) {\n    const slots = Object.entries(getSlotRecipes(config)).map(([slot, slotCva]) => [slot, cva(slotCva)]);\n    function svaFn(props) {\n      const result = slots.map(([slot, cvaFn]) => [slot, cvaFn(props)]);\n      return Object.fromEntries(result);\n    }\n    const variants = config.variants ?? {};\n    const variantKeys = Object.keys(variants);\n    function splitVariantProps(props) {\n      const restProps = omit(props, [\"recipe\"]);\n      const [recipeProps, localProps] = splitProps(restProps, variantKeys);\n      if (!variantKeys.includes(\"colorPalette\")) {\n        recipeProps.colorPalette = props.colorPalette || config.defaultVariants?.colorPalette;\n      }\n      if (variantKeys.includes(\"orientation\")) {\n        localProps.orientation = props.orientation;\n      }\n      return [recipeProps, localProps];\n    }\n    const variantMap = Object.fromEntries(Object.entries(variants).map(([key, value]) => [key, Object.keys(value)]));\n    let classNameMap = {};\n    if (config.className) {\n      classNameMap = Object.fromEntries(config.slots.map(slot => [slot, `${config.className}__${slot}`]));\n    }\n    return Object.assign(svaFn, {\n      variantMap,\n      variantKeys,\n      splitVariantProps,\n      classNameMap\n    });\n  };\n}\nexport { createSlotRecipeFn, getSlotCompoundVariant };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
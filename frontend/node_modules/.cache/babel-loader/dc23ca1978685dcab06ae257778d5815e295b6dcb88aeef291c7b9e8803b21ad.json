{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sabin.arsene\\\\Desktop\\\\Tudu-app\\\\TUDU\\\\frontend\\\\src\\\\pages\\\\ChatPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Grid, GridItem, Box } from '@chakra-ui/react';\nimport { Chat } from '../components/Chat/Chat';\nimport { ChatList } from '../components/Chat/ChatList';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ChatPage() {\n  _s();\n  const [conversations, setConversations] = useState([]);\n  const [selectedChat, setSelectedChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    fetchConversations();\n  }, []);\n  useEffect(() => {\n    if (selectedChat) {\n      fetchMessages(selectedChat.id);\n    }\n  }, [selectedChat]);\n  const fetchConversations = async () => {\n    try {\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/conversations`);\n      setConversations(response.data);\n    } catch (error) {\n      console.error('Error fetching conversations:', error);\n    }\n  };\n  const fetchMessages = async userId => {\n    try {\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/messages/${userId}`);\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    templateColumns: \"300px 1fr\",\n    gap: 4,\n    p: 4,\n    h: \"calc(100vh - 64px)\",\n    children: [/*#__PURE__*/_jsxDEV(GridItem, {\n      children: /*#__PURE__*/_jsxDEV(ChatList, {\n        conversations: conversations,\n        onSelectChat: setSelectedChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n      children: selectedChat ? /*#__PURE__*/_jsxDEV(Chat, {\n        receiverId: selectedChat.id,\n        receiverName: selectedChat.name,\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Box, {\n        h: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        color: \"gray.500\",\n        children: \"Select a conversation to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatPage, \"NHjB+LJ70B9SU22cPfBEE7tOCAk=\");\n_c = ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","Grid","GridItem","Box","Chat","ChatList","axios","jsxDEV","_jsxDEV","ChatPage","_s","conversations","setConversations","selectedChat","setSelectedChat","messages","setMessages","fetchConversations","fetchMessages","id","response","get","process","env","REACT_APP_API_URL","data","error","console","userId","templateColumns","gap","p","h","children","onSelectChat","fileName","_jsxFileName","lineNumber","columnNumber","receiverId","receiverName","name","display","alignItems","justifyContent","color","_c","$RefreshReg$"],"sources":["C:/Users/sabin.arsene/Desktop/Tudu-app/TUDU/frontend/src/pages/ChatPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Grid, GridItem, Box } from '@chakra-ui/react';\r\nimport { Chat } from '../components/Chat/Chat';\r\nimport { ChatList } from '../components/Chat/ChatList';\r\nimport axios from 'axios';\r\n\r\nexport function ChatPage() {\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedChat, setSelectedChat] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchConversations();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedChat) {\r\n      fetchMessages(selectedChat.id);\r\n    }\r\n  }, [selectedChat]);\r\n\r\n  const fetchConversations = async () => {\r\n    try {\r\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/conversations`);\r\n      setConversations(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching conversations:', error);\r\n    }\r\n  };\r\n\r\n  const fetchMessages = async (userId) => {\r\n    try {\r\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/messages/${userId}`);\r\n      setMessages(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching messages:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid templateColumns=\"300px 1fr\" gap={4} p={4} h=\"calc(100vh - 64px)\">\r\n      <GridItem>\r\n        <ChatList \r\n          conversations={conversations}\r\n          onSelectChat={setSelectedChat}\r\n        />\r\n      </GridItem>\r\n      <GridItem>\r\n        {selectedChat ? (\r\n          <Chat\r\n            receiverId={selectedChat.id}\r\n            receiverName={selectedChat.name}\r\n            messages={messages}\r\n          />\r\n        ) : (\r\n          <Box \r\n            h=\"100%\" \r\n            display=\"flex\" \r\n            alignItems=\"center\" \r\n            justifyContent=\"center\"\r\n            color=\"gray.500\"\r\n          >\r\n            Select a conversation to start chatting\r\n          </Box>\r\n        )}\r\n      </GridItem>\r\n    </Grid>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
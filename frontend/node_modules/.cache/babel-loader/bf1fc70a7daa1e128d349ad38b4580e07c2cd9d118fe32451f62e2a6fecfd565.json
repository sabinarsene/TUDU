{"ast":null,"code":"'use client';\n\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { isShadowRoot, getDocument } from '@zag-js/dom-query';\nimport { useState, useSyncExternalStore, useEffect, Children } from 'react';\nimport { createPortal } from 'react-dom';\nimport { useEnvironmentContext } from '../../providers/environment/use-environment-context.js';\nconst Portal = props => {\n  const {\n    children,\n    disabled\n  } = props;\n  const [container, setContainer] = useState(props.container?.current);\n  const isServer = useSyncExternalStore(subscribe, () => false, () => true);\n  const {\n    getRootNode\n  } = useEnvironmentContext();\n  useEffect(() => {\n    setContainer(() => props.container?.current);\n  }, [props.container]);\n  if (isServer || disabled) return /* @__PURE__ */jsx(Fragment, {\n    children\n  });\n  const mountNode = container ?? getPortalNode(getRootNode);\n  return /* @__PURE__ */jsx(Fragment, {\n    children: Children.map(children, child => createPortal(child, mountNode))\n  });\n};\nconst getPortalNode = cb => {\n  const node = cb?.();\n  const rootNode = node.getRootNode();\n  if (isShadowRoot(rootNode)) return rootNode;\n  return getDocument(node).body;\n};\nconst subscribe = () => () => {};\nexport { Portal };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}